"use strict";
/**
 * Created by user on 2019/5/17.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.create_command2 = exports.call_commond = exports.create_command = exports.dummy_handler = exports.dummy_builder = void 0;
const cached_command = {};
function dummy_builder(yarg) {
    return yarg;
}
exports.dummy_builder = dummy_builder;
function dummy_handler(args) {
    return args;
}
exports.dummy_handler = dummy_handler;
function create_command(yarg, command, handler, builder) {
    // @ts-ignore
    builder = builder || dummy_builder;
    cached_command[command] = {
        // @ts-ignore
        builder,
        // @ts-ignore
        handler,
    };
    return [builder, handler];
}
exports.create_command = create_command;
function call_commond(yarg, commond, argv) {
    return cached_command[commond].handler(argv == null ? yarg.argv : argv);
}
exports.call_commond = call_commond;
function create_command2(conf) {
    // @ts-ignore
    let { handler = dummy_handler, builder = dummy_builder, desc } = conf;
    let { describe = desc } = conf;
    let opts = {
        ...conf,
        // @ts-ignore
        builder,
        handler,
        describe,
    };
    let command;
    if (Array.isArray(command)) {
        let cmd = command[0];
        cached_command[cmd] = opts;
        command.slice(1).forEach(c => cached_command[c] = cached_command[cmd]);
    }
    else {
        cached_command[command] = opts;
    }
    _delete(opts);
    function _delete(opts) {
        // @ts-ignore
        delete opts.yarg;
        delete opts.desc;
    }
    return opts;
}
exports.create_command2 = create_command2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2xpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7O0FBTUgsTUFBTSxjQUFjLEdBQW1CLEVBQUUsQ0FBQztBQVcxQyxTQUFnQixhQUFhLENBQWUsSUFBbUI7SUFFOUQsT0FBTyxJQUFJLENBQUE7QUFDWixDQUFDO0FBSEQsc0NBR0M7QUFFRCxTQUFnQixhQUFhLENBQWUsSUFBd0I7SUFFbkUsT0FBTyxJQUFJLENBQUE7QUFDWixDQUFDO0FBSEQsc0NBR0M7QUFFRCxTQUFnQixjQUFjLENBQWlCLElBQW1CLEVBQ2pFLE9BQWUsRUFDZixPQUEyQyxFQUMzQyxPQUFnRDtJQUdoRCxhQUFhO0lBQ2IsT0FBTyxHQUFHLE9BQU8sSUFBSSxhQUFhLENBQUM7SUFFbkMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxHQUFHO1FBQ3pCLGFBQWE7UUFDYixPQUFPO1FBQ1AsYUFBYTtRQUNiLE9BQU87S0FDUCxDQUFDO0lBRUYsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQVUsQ0FBQTtBQUNuQyxDQUFDO0FBakJELHdDQWlCQztBQUVELFNBQWdCLFlBQVksQ0FBTyxJQUFtQixFQUFFLE9BQWUsRUFBRSxJQUF5QjtJQUVqRyxPQUFPLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDeEUsQ0FBQztBQUhELG9DQUdDO0FBY0QsU0FBZ0IsZUFBZSxDQUFlLElBRzdDO0lBRUEsYUFBYTtJQUNiLElBQUksRUFBRSxPQUFPLEdBQUcsYUFBYSxFQUFFLE9BQU8sR0FBRyxhQUFhLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDO0lBQ3RFLElBQUksRUFBRSxRQUFRLEdBQUcsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDO0lBRS9CLElBQUksSUFBSSxHQUErQztRQUN0RCxHQUFJLElBQW1EO1FBQ3ZELGFBQWE7UUFDYixPQUFPO1FBQ1AsT0FBTztRQUNQLFFBQVE7S0FDUixDQUFDO0lBRUYsSUFBSSxPQUFtQyxDQUFDO0lBRXhDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFDMUI7UUFDQyxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFckIsY0FBYyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUUzQixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtLQUN0RTtTQUVEO1FBQ0MsY0FBYyxDQUFDLE9BQWlCLENBQUMsR0FBRyxJQUFJLENBQUM7S0FDekM7SUFFRCxPQUFPLENBQUMsSUFBVyxDQUFDLENBQUM7SUFFckIsU0FBUyxPQUFPLENBQUMsSUFBaUI7UUFFakMsYUFBYTtRQUNiLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztRQUNqQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbEIsQ0FBQztJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2IsQ0FBQztBQTFDRCwwQ0EwQ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgdXNlciBvbiAyMDE5LzUvMTcuXG4gKi9cblxuaW1wb3J0IHlhcmdzID0gcmVxdWlyZSgneWFyZ3MnKTtcbmltcG9ydCB7IEFyZ3VtZW50cywgQXJndiwgQ29tbWFuZEJ1aWxkZXIsIE9taXQgfSBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBJVW5wYWNrTXlZYXJnc0FyZ3YgfSBmcm9tICcuL2NtZF9kaXInO1xuXG5jb25zdCBjYWNoZWRfY29tbWFuZDogSUNhY2hlZENvbW1vbmQgPSB7fTtcblxuZXhwb3J0IHsgSVVucGFja015WWFyZ3NBcmd2IH1cblxuZXhwb3J0IHR5cGUgSVVucGFja1lhcmdzQXJndjxUIGV4dGVuZHMgeWFyZ3MuQXJndj4gPSBUIGV4dGVuZHMgeWFyZ3MuQXJndjxpbmZlciBVPiA/IFUgOiBuZXZlcjtcblxuZXhwb3J0IGludGVyZmFjZSBJQ2FjaGVkQ29tbW9uZFxue1xuXHRbY21kOiBzdHJpbmddOiB5YXJncy5Db21tYW5kTW9kdWxlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkdW1teV9idWlsZGVyPFQgZXh0ZW5kcyB7fT4oeWFyZzogeWFyZ3MuQXJndjxUPilcbntcblx0cmV0dXJuIHlhcmdcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGR1bW15X2hhbmRsZXI8VCBleHRlbmRzIHt9PihhcmdzOiB5YXJncy5Bcmd1bWVudHM8VD4pOiBhbnlcbntcblx0cmV0dXJuIGFyZ3Ncbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZV9jb21tYW5kPFQsIFUgZXh0ZW5kcyBUPih5YXJnOiB5YXJncy5Bcmd2PFQ+LFxuXHRjb21tYW5kOiBzdHJpbmcsXG5cdGhhbmRsZXI6IChhcmdzOiB5YXJncy5Bcmd1bWVudHM8VT4pID0+IHZvaWQsXG5cdGJ1aWxkZXI/OiAoeWFyZzogeWFyZ3MuQXJndjxUPikgPT4geWFyZ3MuQXJndjxVPixcbilcbntcblx0Ly8gQHRzLWlnbm9yZVxuXHRidWlsZGVyID0gYnVpbGRlciB8fCBkdW1teV9idWlsZGVyO1xuXG5cdGNhY2hlZF9jb21tYW5kW2NvbW1hbmRdID0ge1xuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRidWlsZGVyLFxuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRoYW5kbGVyLFxuXHR9O1xuXG5cdHJldHVybiBbYnVpbGRlciwgaGFuZGxlcl0gYXMgY29uc3Rcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGxfY29tbW9uZDxULCBVPih5YXJnOiB5YXJncy5Bcmd2PFQ+LCBjb21tb25kOiBzdHJpbmcsIGFyZ3Y/OiB5YXJncy5Bcmd1bWVudHM8VT4pXG57XG5cdHJldHVybiBjYWNoZWRfY29tbWFuZFtjb21tb25kXS5oYW5kbGVyKGFyZ3YgPT0gbnVsbCA/IHlhcmcuYXJndiA6IGFyZ3YpXG59XG5cbmV4cG9ydCB0eXBlIElDb21tYW5kQnVpbGRlcjxUIGV4dGVuZHMge30sIFUgZXh0ZW5kcyB7fT4gPSAoYXJnczogeWFyZ3MuQXJndjxUPikgPT4geWFyZ3MuQXJndjxJVW5wYWNrTXlZYXJnc0FyZ3YgJiBVPjtcblxuZXhwb3J0IHR5cGUgSUNvbW1hbmRNb2R1bGU8VCBleHRlbmRzIHt9LCBVIGV4dGVuZHMge30gPSBJVW5wYWNrTXlZYXJnc0FyZ3Y+ID1cbntcblx0Y29tbWFuZD86IFJlYWRvbmx5QXJyYXk8c3RyaW5nPiB8IHN0cmluZztcblx0YWxpYXNlcz86IFJlYWRvbmx5QXJyYXk8c3RyaW5nPiB8IHN0cmluZztcblx0ZGVzY3JpYmU/OiBzdHJpbmcgfCBmYWxzZTtcblxuXHRidWlsZGVyPzogSUNvbW1hbmRCdWlsZGVyPFQsIFU+LFxuXHRoYW5kbGVyKGFyZ3M6IHlhcmdzLkFyZ3VtZW50czxJVW5wYWNrTXlZYXJnc0FyZ3YgJiBVPik6IGFueSxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZV9jb21tYW5kMjxVIGV4dGVuZHMge30+KGNvbmY6IElDb21tYW5kTW9kdWxlPElVbnBhY2tNeVlhcmdzQXJndiwgVT4gJiB7XG5cdC8veWFyZz86IHlhcmdzLkFyZ3Y8VD4sXG5cdGRlc2M/OiBJQ29tbWFuZE1vZHVsZTxJVW5wYWNrTXlZYXJnc0FyZ3YsIFU+W1wiZGVzY3JpYmVcIl0sXG59KTogeWFyZ3MuQ29tbWFuZE1vZHVsZTxJVW5wYWNrTXlZYXJnc0FyZ3YsIFU+XG57XG5cdC8vIEB0cy1pZ25vcmVcblx0bGV0IHsgaGFuZGxlciA9IGR1bW15X2hhbmRsZXIsIGJ1aWxkZXIgPSBkdW1teV9idWlsZGVyLCBkZXNjIH0gPSBjb25mO1xuXHRsZXQgeyBkZXNjcmliZSA9IGRlc2MgfSA9IGNvbmY7XG5cblx0bGV0IG9wdHM6IHlhcmdzLkNvbW1hbmRNb2R1bGU8SVVucGFja015WWFyZ3NBcmd2LCBVPiA9IHtcblx0XHQuLi4oY29uZiBhcyB5YXJncy5Db21tYW5kTW9kdWxlPElVbnBhY2tNeVlhcmdzQXJndiwgVT4pLFxuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRidWlsZGVyLFxuXHRcdGhhbmRsZXIsXG5cdFx0ZGVzY3JpYmUsXG5cdH07XG5cblx0bGV0IGNvbW1hbmQ6IHJlYWRvbmx5IHN0cmluZ1tdIHwgc3RyaW5nO1xuXG5cdGlmIChBcnJheS5pc0FycmF5KGNvbW1hbmQpKVxuXHR7XG5cdFx0bGV0IGNtZCA9IGNvbW1hbmRbMF07XG5cblx0XHRjYWNoZWRfY29tbWFuZFtjbWRdID0gb3B0cztcblxuXHRcdGNvbW1hbmQuc2xpY2UoMSkuZm9yRWFjaChjID0+IGNhY2hlZF9jb21tYW5kW2NdID0gY2FjaGVkX2NvbW1hbmRbY21kXSlcblx0fVxuXHRlbHNlXG5cdHtcblx0XHRjYWNoZWRfY29tbWFuZFtjb21tYW5kIGFzIHN0cmluZ10gPSBvcHRzO1xuXHR9XG5cblx0X2RlbGV0ZShvcHRzIGFzIGFueSk7XG5cblx0ZnVuY3Rpb24gX2RlbGV0ZShvcHRzOiB0eXBlb2YgY29uZilcblx0e1xuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRkZWxldGUgb3B0cy55YXJnO1xuXHRcdGRlbGV0ZSBvcHRzLmRlc2M7XG5cdH1cblxuXHRyZXR1cm4gb3B0cztcbn1cbiJdfQ==