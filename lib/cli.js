"use strict";
/**
 * Created by user on 2019/5/17.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const yargs = require("yargs");
const cached_command = {};
exports.cli = yargs
    .help(true)
    .showHelpOnFail(true)
    .strict()
    .demandCommand()
    .command({
    command: 'help',
    describe: 'Show help',
    aliases: ['h'],
    builder(yarg) {
        yarg.showHelp('log');
        return yarg;
    },
    handler: dummy_handler,
})
    .command({
    command: 'version',
    describe: 'Show version',
    builder: dummy_builder,
    async handler() {
        return Promise.resolve().then(() => require('../package.json')).then(v => console.log(v.version));
    },
})
    .option('cwd', {
    desc: `current working directory or package directory`,
    normalize: true,
    default: process.cwd(),
})
    .option('skipCheckWorkspace', {
    desc: `this options is for search yarn.lock, pkg root, workspace root, not same as --ignore-workspace-root-check`,
    boolean: true,
});
function getYargs() {
    // @ts-ignore
    return exports.cli;
}
exports.getYargs = getYargs;
exports.default = exports.cli;
function dummy_builder(yarg) {
    return yarg;
}
exports.dummy_builder = dummy_builder;
function dummy_handler(args) {
    return args;
}
exports.dummy_handler = dummy_handler;
function create_command(yarg, command, handler, builder) {
    // @ts-ignore
    builder = builder || dummy_builder;
    cached_command[command] = {
        // @ts-ignore
        builder,
        // @ts-ignore
        handler,
    };
    return [builder, handler];
}
exports.create_command = create_command;
function call_commond(yarg, commond, argv) {
    return cached_command[commond].handler(argv == null ? yarg.argv : argv);
}
exports.call_commond = call_commond;
function create_command2(conf) {
    // @ts-ignore
    let { handler = dummy_handler, builder = dummy_builder, desc } = conf;
    let { describe = desc } = conf;
    let opts = {
        ...conf,
        // @ts-ignore
        builder,
        handler,
        describe,
    };
    let command;
    if (Array.isArray(command)) {
        let cmd = command[0];
        cached_command[cmd] = opts;
        command.slice(1).forEach(c => cached_command[c] = cached_command[cmd]);
    }
    else {
        cached_command[command] = opts;
    }
    _delete(opts);
    function _delete(opts) {
        // @ts-ignore
        delete opts.yarg;
        delete opts.desc;
    }
    return opts;
}
exports.create_command2 = create_command2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2xpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7QUFFSCwrQkFBZ0M7QUFHaEMsTUFBTSxjQUFjLEdBQW1CLEVBQUUsQ0FBQztBQUU3QixRQUFBLEdBQUcsR0FBRyxLQUFLO0tBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUM7S0FDVixjQUFjLENBQUMsSUFBSSxDQUFDO0tBQ3BCLE1BQU0sRUFBRTtLQUNSLGFBQWEsRUFBRTtLQUNmLE9BQU8sQ0FBQztJQUNSLE9BQU8sRUFBRSxNQUFNO0lBQ2YsUUFBUSxFQUFFLFdBQVc7SUFDckIsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDO0lBQ2QsT0FBTyxDQUFDLElBQUk7UUFFWCxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JCLE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUNELE9BQU8sRUFBRSxhQUFhO0NBQ3RCLENBQUM7S0FDRCxPQUFPLENBQUM7SUFDUixPQUFPLEVBQUUsU0FBUztJQUNsQixRQUFRLEVBQUUsY0FBYztJQUN4QixPQUFPLEVBQUUsYUFBYTtJQUN0QixLQUFLLENBQUMsT0FBTztRQUVaLE9BQU8scUNBQU8saUJBQWlCLEdBQzdCLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQ2pDO0lBQ0gsQ0FBQztDQUNELENBQUM7S0FDRCxNQUFNLENBQUMsS0FBSyxFQUFFO0lBQ2QsSUFBSSxFQUFFLGdEQUFnRDtJQUN0RCxTQUFTLEVBQUUsSUFBSTtJQUNmLE9BQU8sRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFO0NBQ3RCLENBQUM7S0FDRCxNQUFNLENBQUMsb0JBQW9CLEVBQUU7SUFDN0IsSUFBSSxFQUFFLDJHQUEyRztJQUNqSCxPQUFPLEVBQUUsSUFBSTtDQUNiLENBQUMsQ0FDRjtBQVNELFNBQWdCLFFBQVE7SUFFdkIsYUFBYTtJQUNiLE9BQU8sV0FBRyxDQUFDO0FBQ1osQ0FBQztBQUpELDRCQUlDO0FBRUQsa0JBQWUsV0FBRyxDQUFBO0FBU2xCLFNBQWdCLGFBQWEsQ0FBSSxJQUFPO0lBRXZDLE9BQU8sSUFBSSxDQUFBO0FBQ1osQ0FBQztBQUhELHNDQUdDO0FBRUQsU0FBZ0IsYUFBYSxDQUFJLElBQXdCO0lBRXhELE9BQU8sSUFBSSxDQUFBO0FBQ1osQ0FBQztBQUhELHNDQUdDO0FBRUQsU0FBZ0IsY0FBYyxDQUFpQixJQUFtQixFQUNqRSxPQUFlLEVBQ2YsT0FBMkMsRUFDM0MsT0FBZ0Q7SUFHaEQsYUFBYTtJQUNiLE9BQU8sR0FBRyxPQUFPLElBQUksYUFBYSxDQUFDO0lBRW5DLGNBQWMsQ0FBQyxPQUFPLENBQUMsR0FBRztRQUN6QixhQUFhO1FBQ2IsT0FBTztRQUNQLGFBQWE7UUFDYixPQUFPO0tBQ1AsQ0FBQztJQUVGLE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFVLENBQUE7QUFDbkMsQ0FBQztBQWpCRCx3Q0FpQkM7QUFFRCxTQUFnQixZQUFZLENBQU8sSUFBbUIsRUFBRSxPQUFlLEVBQUUsSUFBeUI7SUFFakcsT0FBTyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ3hFLENBQUM7QUFIRCxvQ0FHQztBQWNELFNBQWdCLGVBQWUsQ0FBZ0IsSUFHOUM7SUFFQSxhQUFhO0lBQ2IsSUFBSSxFQUFFLE9BQU8sR0FBRyxhQUFhLEVBQUUsT0FBTyxHQUFHLGFBQWEsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFDdEUsSUFBSSxFQUFFLFFBQVEsR0FBRyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFFL0IsSUFBSSxJQUFJLEdBQStDO1FBQ3RELEdBQUksSUFBbUQ7UUFDdkQsYUFBYTtRQUNiLE9BQU87UUFDUCxPQUFPO1FBQ1AsUUFBUTtLQUNSLENBQUM7SUFFRixJQUFJLE9BQW1DLENBQUM7SUFFeEMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUMxQjtRQUNDLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVyQixjQUFjLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBRTNCLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0tBQ3RFO1NBRUQ7UUFDQyxjQUFjLENBQUMsT0FBaUIsQ0FBQyxHQUFHLElBQUksQ0FBQztLQUN6QztJQUVELE9BQU8sQ0FBQyxJQUFXLENBQUMsQ0FBQztJQUVyQixTQUFTLE9BQU8sQ0FBQyxJQUFpQjtRQUVqQyxhQUFhO1FBQ2IsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNsQixDQUFDO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDYixDQUFDO0FBMUNELDBDQTBDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSB1c2VyIG9uIDIwMTkvNS8xNy5cbiAqL1xuXG5pbXBvcnQgeWFyZ3MgPSByZXF1aXJlKCd5YXJncycpO1xuaW1wb3J0IHsgQXJndW1lbnRzLCBBcmd2LCBDb21tYW5kQnVpbGRlciwgT21pdCB9IGZyb20gJ3lhcmdzJztcblxuY29uc3QgY2FjaGVkX2NvbW1hbmQ6IElDYWNoZWRDb21tb25kID0ge307XG5cbmV4cG9ydCBjb25zdCBjbGkgPSB5YXJnc1xuXHQuaGVscCh0cnVlKVxuXHQuc2hvd0hlbHBPbkZhaWwodHJ1ZSlcblx0LnN0cmljdCgpXG5cdC5kZW1hbmRDb21tYW5kKClcblx0LmNvbW1hbmQoe1xuXHRcdGNvbW1hbmQ6ICdoZWxwJyxcblx0XHRkZXNjcmliZTogJ1Nob3cgaGVscCcsXG5cdFx0YWxpYXNlczogWydoJ10sXG5cdFx0YnVpbGRlcih5YXJnKVxuXHRcdHtcblx0XHRcdHlhcmcuc2hvd0hlbHAoJ2xvZycpO1xuXHRcdFx0cmV0dXJuIHlhcmc7XG5cdFx0fSxcblx0XHRoYW5kbGVyOiBkdW1teV9oYW5kbGVyLFxuXHR9KVxuXHQuY29tbWFuZCh7XG5cdFx0Y29tbWFuZDogJ3ZlcnNpb24nLFxuXHRcdGRlc2NyaWJlOiAnU2hvdyB2ZXJzaW9uJyxcblx0XHRidWlsZGVyOiBkdW1teV9idWlsZGVyLFxuXHRcdGFzeW5jIGhhbmRsZXIoKVxuXHRcdHtcblx0XHRcdHJldHVybiBpbXBvcnQoJy4uL3BhY2thZ2UuanNvbicpXG5cdFx0XHRcdC50aGVuKHYgPT4gY29uc29sZS5sb2codi52ZXJzaW9uKSlcblx0XHRcdFx0O1xuXHRcdH0sXG5cdH0pXG5cdC5vcHRpb24oJ2N3ZCcsIHtcblx0XHRkZXNjOiBgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeSBvciBwYWNrYWdlIGRpcmVjdG9yeWAsXG5cdFx0bm9ybWFsaXplOiB0cnVlLFxuXHRcdGRlZmF1bHQ6IHByb2Nlc3MuY3dkKCksXG5cdH0pXG5cdC5vcHRpb24oJ3NraXBDaGVja1dvcmtzcGFjZScsIHtcblx0XHRkZXNjOiBgdGhpcyBvcHRpb25zIGlzIGZvciBzZWFyY2ggeWFybi5sb2NrLCBwa2cgcm9vdCwgd29ya3NwYWNlIHJvb3QsIG5vdCBzYW1lIGFzIC0taWdub3JlLXdvcmtzcGFjZS1yb290LWNoZWNrYCxcblx0XHRib29sZWFuOiB0cnVlLFxuXHR9KVxuO1xuXG5leHBvcnQgdHlwZSBJTXlZYXJnc0FyZ3YgPSB0eXBlb2YgY2xpO1xuXG5leHBvcnQgdHlwZSBJVW5wYWNrTXlZYXJnc0FyZ3YgPSB7XG5cdGN3ZDogc3RyaW5nO1xuXHRza2lwQ2hlY2tXb3Jrc3BhY2U6IGJvb2xlYW47XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0WWFyZ3MoKTogeWFyZ3MuQXJndjxJVW5wYWNrTXlZYXJnc0FyZ3Y+XG57XG5cdC8vIEB0cy1pZ25vcmVcblx0cmV0dXJuIGNsaTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xpXG5cbmV4cG9ydCB0eXBlIElVbnBhY2tZYXJnc0FyZ3Y8VCBleHRlbmRzIHlhcmdzLkFyZ3Y+ID0gVCBleHRlbmRzIHlhcmdzLkFyZ3Y8aW5mZXIgVT4gPyBVIDogbmV2ZXI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNhY2hlZENvbW1vbmRcbntcblx0W2NtZDogc3RyaW5nXTogeWFyZ3MuQ29tbWFuZE1vZHVsZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZHVtbXlfYnVpbGRlcjxUPih5YXJnOiBUKTogVFxue1xuXHRyZXR1cm4geWFyZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZHVtbXlfaGFuZGxlcjxUPihhcmdzOiB5YXJncy5Bcmd1bWVudHM8VD4pOiBhbnlcbntcblx0cmV0dXJuIGFyZ3Ncbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZV9jb21tYW5kPFQsIFUgZXh0ZW5kcyBUPih5YXJnOiB5YXJncy5Bcmd2PFQ+LFxuXHRjb21tYW5kOiBzdHJpbmcsXG5cdGhhbmRsZXI6IChhcmdzOiB5YXJncy5Bcmd1bWVudHM8VT4pID0+IHZvaWQsXG5cdGJ1aWxkZXI/OiAoeWFyZzogeWFyZ3MuQXJndjxUPikgPT4geWFyZ3MuQXJndjxVPixcbilcbntcblx0Ly8gQHRzLWlnbm9yZVxuXHRidWlsZGVyID0gYnVpbGRlciB8fCBkdW1teV9idWlsZGVyO1xuXG5cdGNhY2hlZF9jb21tYW5kW2NvbW1hbmRdID0ge1xuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRidWlsZGVyLFxuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRoYW5kbGVyLFxuXHR9O1xuXG5cdHJldHVybiBbYnVpbGRlciwgaGFuZGxlcl0gYXMgY29uc3Rcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGxfY29tbW9uZDxULCBVPih5YXJnOiB5YXJncy5Bcmd2PFQ+LCBjb21tb25kOiBzdHJpbmcsIGFyZ3Y/OiB5YXJncy5Bcmd1bWVudHM8VT4pXG57XG5cdHJldHVybiBjYWNoZWRfY29tbWFuZFtjb21tb25kXS5oYW5kbGVyKGFyZ3YgPT0gbnVsbCA/IHlhcmcuYXJndiA6IGFyZ3YpXG59XG5cbmV4cG9ydCB0eXBlIElDb21tYW5kQnVpbGRlcjxULCBVPiA9IChhcmdzOiB5YXJncy5Bcmd2PFQ+KSA9PiB5YXJncy5Bcmd2PElVbnBhY2tNeVlhcmdzQXJndiAmIFU+O1xuXG5leHBvcnQgdHlwZSBJQ29tbWFuZE1vZHVsZTxULCBVID0gSVVucGFja015WWFyZ3NBcmd2PiA9XG57XG5cdGNvbW1hbmQ/OiBSZWFkb25seUFycmF5PHN0cmluZz4gfCBzdHJpbmc7XG5cdGFsaWFzZXM/OiBSZWFkb25seUFycmF5PHN0cmluZz4gfCBzdHJpbmc7XG5cdGRlc2NyaWJlPzogc3RyaW5nIHwgZmFsc2U7XG5cblx0YnVpbGRlcj86IElDb21tYW5kQnVpbGRlcjxULCBVPixcblx0aGFuZGxlcihhcmdzOiB5YXJncy5Bcmd1bWVudHM8SVVucGFja015WWFyZ3NBcmd2ICYgVT4pOiBhbnksXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVfY29tbWFuZDI8VSBleHRlbmRzIGFueT4oY29uZjogSUNvbW1hbmRNb2R1bGU8SVVucGFja015WWFyZ3NBcmd2LCBVPiAmIHtcblx0Ly95YXJnPzogeWFyZ3MuQXJndjxUPixcblx0ZGVzYz86IElDb21tYW5kTW9kdWxlPElVbnBhY2tNeVlhcmdzQXJndiwgVT5bXCJkZXNjcmliZVwiXSxcbn0pOiB5YXJncy5Db21tYW5kTW9kdWxlPElVbnBhY2tNeVlhcmdzQXJndiwgVT5cbntcblx0Ly8gQHRzLWlnbm9yZVxuXHRsZXQgeyBoYW5kbGVyID0gZHVtbXlfaGFuZGxlciwgYnVpbGRlciA9IGR1bW15X2J1aWxkZXIsIGRlc2MgfSA9IGNvbmY7XG5cdGxldCB7IGRlc2NyaWJlID0gZGVzYyB9ID0gY29uZjtcblxuXHRsZXQgb3B0czogeWFyZ3MuQ29tbWFuZE1vZHVsZTxJVW5wYWNrTXlZYXJnc0FyZ3YsIFU+ID0ge1xuXHRcdC4uLihjb25mIGFzIHlhcmdzLkNvbW1hbmRNb2R1bGU8SVVucGFja015WWFyZ3NBcmd2LCBVPiksXG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGJ1aWxkZXIsXG5cdFx0aGFuZGxlcixcblx0XHRkZXNjcmliZSxcblx0fTtcblxuXHRsZXQgY29tbWFuZDogcmVhZG9ubHkgc3RyaW5nW10gfCBzdHJpbmc7XG5cblx0aWYgKEFycmF5LmlzQXJyYXkoY29tbWFuZCkpXG5cdHtcblx0XHRsZXQgY21kID0gY29tbWFuZFswXTtcblxuXHRcdGNhY2hlZF9jb21tYW5kW2NtZF0gPSBvcHRzO1xuXG5cdFx0Y29tbWFuZC5zbGljZSgxKS5mb3JFYWNoKGMgPT4gY2FjaGVkX2NvbW1hbmRbY10gPSBjYWNoZWRfY29tbWFuZFtjbWRdKVxuXHR9XG5cdGVsc2Vcblx0e1xuXHRcdGNhY2hlZF9jb21tYW5kW2NvbW1hbmQgYXMgc3RyaW5nXSA9IG9wdHM7XG5cdH1cblxuXHRfZGVsZXRlKG9wdHMgYXMgYW55KTtcblxuXHRmdW5jdGlvbiBfZGVsZXRlKG9wdHM6IHR5cGVvZiBjb25mKVxuXHR7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGRlbGV0ZSBvcHRzLnlhcmc7XG5cdFx0ZGVsZXRlIG9wdHMuZGVzYztcblx0fVxuXG5cdHJldHVybiBvcHRzO1xufVxuIl19