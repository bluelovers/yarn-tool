"use strict";
/**
 * Created by user on 2019/5/17.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const yargs = require("yargs");
const cached_command = {};
exports.cli = yargs
    .option('cwd', {
    desc: `current working directory or package directory`,
    normalize: true,
    default: process.cwd(),
})
    .option('skipCheckWorkspace', {
    desc: `this options is for search yarn.lock, pkg root, workspace root, not same as --ignore-workspace-root-check`,
    boolean: true,
})
    .help(true)
    .showHelpOnFail(true)
    .strict()
    /*
    .command('help', 'Show help', (yarg) =>
    {
        yarg.showHelp('log');
        return yarg;
    })
    */
    .command(create_command2({
    command: 'help',
    describe: 'Show help',
    builder(yarg) {
        yarg.showHelp('log');
        return yarg;
    },
}));
function getYargs() {
    // @ts-ignore
    return exports.cli;
}
exports.getYargs = getYargs;
exports.default = exports.cli;
function dummy_builder(yarg) {
    return yarg;
}
function dummy_handler(args) {
    return args;
}
function create_command(yarg, command, handler, builder) {
    // @ts-ignore
    builder = builder || dummy_builder;
    cached_command[command] = {
        // @ts-ignore
        builder,
        // @ts-ignore
        handler,
    };
    return [builder, handler];
}
exports.create_command = create_command;
function call_commond(yarg, commond, argv) {
    return cached_command[commond].handler(argv == null ? yarg.argv : argv);
}
exports.call_commond = call_commond;
function create_command2(conf) {
    let { handler = dummy_handler, builder = dummy_builder, desc } = conf;
    let { describe = desc } = conf;
    let opts = {
        ...conf,
        // @ts-ignore
        builder,
        handler,
        describe,
    };
    let command;
    if (Array.isArray(command)) {
        let cmd = command[0];
        cached_command[cmd] = opts;
        command.slice(1).forEach(c => cached_command[c] = cached_command[cmd]);
    }
    else {
        cached_command[command] = opts;
    }
    _delete(opts);
    function _delete(opts) {
        delete opts.yarg;
        delete opts.desc;
    }
    return opts;
}
exports.create_command2 = create_command2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2xpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7QUFFSCwrQkFBZ0M7QUFHaEMsTUFBTSxjQUFjLEdBQW1CLEVBQUUsQ0FBQztBQUU3QixRQUFBLEdBQUcsR0FBRyxLQUFLO0tBQ3RCLE1BQU0sQ0FBQyxLQUFLLEVBQUU7SUFDZCxJQUFJLEVBQUUsZ0RBQWdEO0lBQ3RELFNBQVMsRUFBRSxJQUFJO0lBQ2YsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUU7Q0FDdEIsQ0FBQztLQUNELE1BQU0sQ0FBQyxvQkFBb0IsRUFBRTtJQUM3QixJQUFJLEVBQUUsMkdBQTJHO0lBQ2pILE9BQU8sRUFBRSxJQUFJO0NBQ2IsQ0FBQztLQUNELElBQUksQ0FBQyxJQUFJLENBQUM7S0FDVixjQUFjLENBQUMsSUFBSSxDQUFDO0tBQ3BCLE1BQU0sRUFBRTtJQUNUOzs7Ozs7TUFNRTtLQUNELE9BQU8sQ0FBQyxlQUFlLENBQUM7SUFDeEIsT0FBTyxFQUFFLE1BQU07SUFDZixRQUFRLEVBQUUsV0FBVztJQUNyQixPQUFPLENBQUMsSUFBSTtRQUVYLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckIsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0NBQ0QsQ0FBQyxDQUFDLENBQ0g7QUFJRCxTQUFnQixRQUFRO0lBRXZCLGFBQWE7SUFDYixPQUFPLFdBQUcsQ0FBQztBQUNaLENBQUM7QUFKRCw0QkFJQztBQUVELGtCQUFlLFdBQUcsQ0FBQTtBQVNsQixTQUFTLGFBQWEsQ0FBSSxJQUFtQjtJQUU1QyxPQUFPLElBQUksQ0FBQTtBQUNaLENBQUM7QUFFRCxTQUFTLGFBQWEsQ0FBSSxJQUF3QjtJQUVqRCxPQUFPLElBQUksQ0FBQTtBQUNaLENBQUM7QUFFRCxTQUFnQixjQUFjLENBQWlCLElBQW1CLEVBQ2pFLE9BQWUsRUFDZixPQUEyQyxFQUMzQyxPQUFnRDtJQUdoRCxhQUFhO0lBQ2IsT0FBTyxHQUFHLE9BQU8sSUFBSSxhQUFhLENBQUM7SUFFbkMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxHQUFHO1FBQ3pCLGFBQWE7UUFDYixPQUFPO1FBQ1AsYUFBYTtRQUNiLE9BQU87S0FDUCxDQUFDO0lBRUYsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQVUsQ0FBQTtBQUNuQyxDQUFDO0FBakJELHdDQWlCQztBQUVELFNBQWdCLFlBQVksQ0FBTyxJQUFtQixFQUFFLE9BQWUsRUFBRSxJQUF5QjtJQUVqRyxPQUFPLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDeEUsQ0FBQztBQUhELG9DQUdDO0FBVUQsU0FBZ0IsZUFBZSxDQUFxQixJQUduRDtJQUVBLElBQUksRUFBRSxPQUFPLEdBQUcsYUFBYSxFQUFFLE9BQU8sR0FBRyxhQUFhLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDO0lBQ3RFLElBQUksRUFBRSxRQUFRLEdBQUcsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDO0lBRS9CLElBQUksSUFBSSxHQUE4QjtRQUNyQyxHQUFJLElBQWtDO1FBQ3RDLGFBQWE7UUFDYixPQUFPO1FBQ1AsT0FBTztRQUNQLFFBQVE7S0FDUixDQUFDO0lBRUYsSUFBSSxPQUFtQyxDQUFDO0lBRXhDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFDMUI7UUFDQyxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFckIsY0FBYyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUUzQixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtLQUN0RTtTQUVEO1FBQ0MsY0FBYyxDQUFDLE9BQWlCLENBQUMsR0FBRyxJQUFJLENBQUM7S0FDekM7SUFFRCxPQUFPLENBQUMsSUFBVyxDQUFDLENBQUM7SUFFckIsU0FBUyxPQUFPLENBQUMsSUFBaUI7UUFFakMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNsQixDQUFDO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDYixDQUFDO0FBeENELDBDQXdDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSB1c2VyIG9uIDIwMTkvNS8xNy5cbiAqL1xuXG5pbXBvcnQgeWFyZ3MgPSByZXF1aXJlKCd5YXJncycpO1xuaW1wb3J0IHsgQXJndiB9IGZyb20gJ3lhcmdzJztcblxuY29uc3QgY2FjaGVkX2NvbW1hbmQ6IElDYWNoZWRDb21tb25kID0ge307XG5cbmV4cG9ydCBjb25zdCBjbGkgPSB5YXJnc1xuXHQub3B0aW9uKCdjd2QnLCB7XG5cdFx0ZGVzYzogYGN1cnJlbnQgd29ya2luZyBkaXJlY3Rvcnkgb3IgcGFja2FnZSBkaXJlY3RvcnlgLFxuXHRcdG5vcm1hbGl6ZTogdHJ1ZSxcblx0XHRkZWZhdWx0OiBwcm9jZXNzLmN3ZCgpLFxuXHR9KVxuXHQub3B0aW9uKCdza2lwQ2hlY2tXb3Jrc3BhY2UnLCB7XG5cdFx0ZGVzYzogYHRoaXMgb3B0aW9ucyBpcyBmb3Igc2VhcmNoIHlhcm4ubG9jaywgcGtnIHJvb3QsIHdvcmtzcGFjZSByb290LCBub3Qgc2FtZSBhcyAtLWlnbm9yZS13b3Jrc3BhY2Utcm9vdC1jaGVja2AsXG5cdFx0Ym9vbGVhbjogdHJ1ZSxcblx0fSlcblx0LmhlbHAodHJ1ZSlcblx0LnNob3dIZWxwT25GYWlsKHRydWUpXG5cdC5zdHJpY3QoKVxuXHQvKlxuXHQuY29tbWFuZCgnaGVscCcsICdTaG93IGhlbHAnLCAoeWFyZykgPT5cblx0e1xuXHRcdHlhcmcuc2hvd0hlbHAoJ2xvZycpO1xuXHRcdHJldHVybiB5YXJnO1xuXHR9KVxuXHQqL1xuXHQuY29tbWFuZChjcmVhdGVfY29tbWFuZDIoe1xuXHRcdGNvbW1hbmQ6ICdoZWxwJyxcblx0XHRkZXNjcmliZTogJ1Nob3cgaGVscCcsXG5cdFx0YnVpbGRlcih5YXJnKVxuXHRcdHtcblx0XHRcdHlhcmcuc2hvd0hlbHAoJ2xvZycpO1xuXHRcdFx0cmV0dXJuIHlhcmc7XG5cdFx0fSxcblx0fSkpXG47XG5cbmV4cG9ydCB0eXBlIElNeVlhcmdzQXJndiA9IHR5cGVvZiBjbGk7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRZYXJnczxUID0gIElVbnBhY2tZYXJnc0FyZ3Y8SU15WWFyZ3NBcmd2Pj4oKTogeWFyZ3MuQXJndjxUPlxue1xuXHQvLyBAdHMtaWdub3JlXG5cdHJldHVybiBjbGk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsaVxuXG5leHBvcnQgdHlwZSBJVW5wYWNrWWFyZ3NBcmd2PFQgZXh0ZW5kcyB5YXJncy5Bcmd2PiA9IFQgZXh0ZW5kcyB5YXJncy5Bcmd2PGluZmVyIFU+ID8gVSA6IG5ldmVyO1xuXG5leHBvcnQgaW50ZXJmYWNlIElDYWNoZWRDb21tb25kXG57XG5cdFtjbWQ6IHN0cmluZ106IHlhcmdzLkNvbW1hbmRNb2R1bGVcbn1cblxuZnVuY3Rpb24gZHVtbXlfYnVpbGRlcjxUPih5YXJnOiB5YXJncy5Bcmd2PFQ+KVxue1xuXHRyZXR1cm4geWFyZ1xufVxuXG5mdW5jdGlvbiBkdW1teV9oYW5kbGVyPFQ+KGFyZ3M6IHlhcmdzLkFyZ3VtZW50czxUPik6IGFueVxue1xuXHRyZXR1cm4gYXJnc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlX2NvbW1hbmQ8VCwgVSBleHRlbmRzIFQ+KHlhcmc6IHlhcmdzLkFyZ3Y8VD4sXG5cdGNvbW1hbmQ6IHN0cmluZyxcblx0aGFuZGxlcjogKGFyZ3M6IHlhcmdzLkFyZ3VtZW50czxVPikgPT4gdm9pZCxcblx0YnVpbGRlcj86ICh5YXJnOiB5YXJncy5Bcmd2PFQ+KSA9PiB5YXJncy5Bcmd2PFU+LFxuKVxue1xuXHQvLyBAdHMtaWdub3JlXG5cdGJ1aWxkZXIgPSBidWlsZGVyIHx8IGR1bW15X2J1aWxkZXI7XG5cblx0Y2FjaGVkX2NvbW1hbmRbY29tbWFuZF0gPSB7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGJ1aWxkZXIsXG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGhhbmRsZXIsXG5cdH07XG5cblx0cmV0dXJuIFtidWlsZGVyLCBoYW5kbGVyXSBhcyBjb25zdFxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsbF9jb21tb25kPFQsIFU+KHlhcmc6IHlhcmdzLkFyZ3Y8VD4sIGNvbW1vbmQ6IHN0cmluZywgYXJndj86IHlhcmdzLkFyZ3VtZW50czxVPilcbntcblx0cmV0dXJuIGNhY2hlZF9jb21tYW5kW2NvbW1vbmRdLmhhbmRsZXIoYXJndiA9PSBudWxsID8geWFyZy5hcmd2IDogYXJndilcbn1cblxuZXhwb3J0IHR5cGUgSUNvbW1hbmRNb2R1bGU8VCwgVT4gPSBPbWl0PHlhcmdzLkNvbW1hbmRNb2R1bGU8VCwgVT4sICdoYW5kbGVyJyB8ICdidWlsZGVyJz4gJiAoe1xuXHRoYW5kbGVyPzogeWFyZ3MuQ29tbWFuZE1vZHVsZTxULCBVPltcImhhbmRsZXJcIl0sXG5cdGJ1aWxkZXIoYXJnczogQXJndjxUPik6IEFyZ3Y8VT4sXG59IHwge1xuXHRoYW5kbGVyOiB5YXJncy5Db21tYW5kTW9kdWxlPFQsIFU+W1wiaGFuZGxlclwiXSxcblx0YnVpbGRlcj86IHlhcmdzLkNvbW1hbmRNb2R1bGU8VCwgVT5bXCJidWlsZGVyXCJdLFxufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVfY29tbWFuZDI8VCwgVSBleHRlbmRzIFQgPSBUPihjb25mOiBJQ29tbWFuZE1vZHVsZTxULCBVIHwgVD4gJiB7XG5cdHlhcmc/OiB5YXJncy5Bcmd2PFQ+LFxuXHRkZXNjPzogeWFyZ3MuQ29tbWFuZE1vZHVsZTxULCBVPltcImRlc2NyaWJlXCJdLFxufSk6IHlhcmdzLkNvbW1hbmRNb2R1bGU8VCwgVT5cbntcblx0bGV0IHsgaGFuZGxlciA9IGR1bW15X2hhbmRsZXIsIGJ1aWxkZXIgPSBkdW1teV9idWlsZGVyLCBkZXNjIH0gPSBjb25mO1xuXHRsZXQgeyBkZXNjcmliZSA9IGRlc2MgfSA9IGNvbmY7XG5cblx0bGV0IG9wdHM6IHlhcmdzLkNvbW1hbmRNb2R1bGU8VCwgVT4gPSB7XG5cdFx0Li4uKGNvbmYgYXMgeWFyZ3MuQ29tbWFuZE1vZHVsZTxULCBVPiksXG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGJ1aWxkZXIsXG5cdFx0aGFuZGxlcixcblx0XHRkZXNjcmliZSxcblx0fTtcblxuXHRsZXQgY29tbWFuZDogcmVhZG9ubHkgc3RyaW5nW10gfCBzdHJpbmc7XG5cblx0aWYgKEFycmF5LmlzQXJyYXkoY29tbWFuZCkpXG5cdHtcblx0XHRsZXQgY21kID0gY29tbWFuZFswXTtcblxuXHRcdGNhY2hlZF9jb21tYW5kW2NtZF0gPSBvcHRzO1xuXG5cdFx0Y29tbWFuZC5zbGljZSgxKS5mb3JFYWNoKGMgPT4gY2FjaGVkX2NvbW1hbmRbY10gPSBjYWNoZWRfY29tbWFuZFtjbWRdKVxuXHR9XG5cdGVsc2Vcblx0e1xuXHRcdGNhY2hlZF9jb21tYW5kW2NvbW1hbmQgYXMgc3RyaW5nXSA9IG9wdHM7XG5cdH1cblxuXHRfZGVsZXRlKG9wdHMgYXMgYW55KTtcblxuXHRmdW5jdGlvbiBfZGVsZXRlKG9wdHM6IHR5cGVvZiBjb25mKVxuXHR7XG5cdFx0ZGVsZXRlIG9wdHMueWFyZztcblx0XHRkZWxldGUgb3B0cy5kZXNjO1xuXHR9XG5cblx0cmV0dXJuIG9wdHM7XG59XG4iXX0=