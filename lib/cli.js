"use strict";
/**
 * Created by user on 2019/5/17.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const cached_command = {};
function dummy_builder(yarg) {
    return yarg;
}
exports.dummy_builder = dummy_builder;
function dummy_handler(args) {
    return args;
}
exports.dummy_handler = dummy_handler;
function create_command(yarg, command, handler, builder) {
    // @ts-ignore
    builder = builder || dummy_builder;
    cached_command[command] = {
        // @ts-ignore
        builder,
        // @ts-ignore
        handler,
    };
    return [builder, handler];
}
exports.create_command = create_command;
function call_commond(yarg, commond, argv) {
    return cached_command[commond].handler(argv == null ? yarg.argv : argv);
}
exports.call_commond = call_commond;
function create_command2(conf) {
    // @ts-ignore
    let { handler = dummy_handler, builder = dummy_builder, desc } = conf;
    let { describe = desc } = conf;
    let opts = {
        ...conf,
        // @ts-ignore
        builder,
        handler,
        describe,
    };
    let command;
    if (Array.isArray(command)) {
        let cmd = command[0];
        cached_command[cmd] = opts;
        command.slice(1).forEach(c => cached_command[c] = cached_command[cmd]);
    }
    else {
        cached_command[command] = opts;
    }
    _delete(opts);
    function _delete(opts) {
        // @ts-ignore
        delete opts.yarg;
        delete opts.desc;
    }
    return opts;
}
exports.create_command2 = create_command2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2xpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7QUFNSCxNQUFNLGNBQWMsR0FBbUIsRUFBRSxDQUFDO0FBVzFDLFNBQWdCLGFBQWEsQ0FBZSxJQUFtQjtJQUU5RCxPQUFPLElBQUksQ0FBQTtBQUNaLENBQUM7QUFIRCxzQ0FHQztBQUVELFNBQWdCLGFBQWEsQ0FBZSxJQUF3QjtJQUVuRSxPQUFPLElBQUksQ0FBQTtBQUNaLENBQUM7QUFIRCxzQ0FHQztBQUVELFNBQWdCLGNBQWMsQ0FBaUIsSUFBbUIsRUFDakUsT0FBZSxFQUNmLE9BQTJDLEVBQzNDLE9BQWdEO0lBR2hELGFBQWE7SUFDYixPQUFPLEdBQUcsT0FBTyxJQUFJLGFBQWEsQ0FBQztJQUVuQyxjQUFjLENBQUMsT0FBTyxDQUFDLEdBQUc7UUFDekIsYUFBYTtRQUNiLE9BQU87UUFDUCxhQUFhO1FBQ2IsT0FBTztLQUNQLENBQUM7SUFFRixPQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBVSxDQUFBO0FBQ25DLENBQUM7QUFqQkQsd0NBaUJDO0FBRUQsU0FBZ0IsWUFBWSxDQUFPLElBQW1CLEVBQUUsT0FBZSxFQUFFLElBQXlCO0lBRWpHLE9BQU8sY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUN4RSxDQUFDO0FBSEQsb0NBR0M7QUFjRCxTQUFnQixlQUFlLENBQWUsSUFHN0M7SUFFQSxhQUFhO0lBQ2IsSUFBSSxFQUFFLE9BQU8sR0FBRyxhQUFhLEVBQUUsT0FBTyxHQUFHLGFBQWEsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFDdEUsSUFBSSxFQUFFLFFBQVEsR0FBRyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFFL0IsSUFBSSxJQUFJLEdBQStDO1FBQ3RELEdBQUksSUFBbUQ7UUFDdkQsYUFBYTtRQUNiLE9BQU87UUFDUCxPQUFPO1FBQ1AsUUFBUTtLQUNSLENBQUM7SUFFRixJQUFJLE9BQW1DLENBQUM7SUFFeEMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUMxQjtRQUNDLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVyQixjQUFjLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBRTNCLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0tBQ3RFO1NBRUQ7UUFDQyxjQUFjLENBQUMsT0FBaUIsQ0FBQyxHQUFHLElBQUksQ0FBQztLQUN6QztJQUVELE9BQU8sQ0FBQyxJQUFXLENBQUMsQ0FBQztJQUVyQixTQUFTLE9BQU8sQ0FBQyxJQUFpQjtRQUVqQyxhQUFhO1FBQ2IsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNsQixDQUFDO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDYixDQUFDO0FBMUNELDBDQTBDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSB1c2VyIG9uIDIwMTkvNS8xNy5cbiAqL1xuXG5pbXBvcnQgeWFyZ3MgPSByZXF1aXJlKCd5YXJncycpO1xuaW1wb3J0IHsgQXJndW1lbnRzLCBBcmd2LCBDb21tYW5kQnVpbGRlciwgT21pdCB9IGZyb20gJ3lhcmdzJztcbmltcG9ydCB7IElVbnBhY2tNeVlhcmdzQXJndiB9IGZyb20gJy4vY21kX2Rpcic7XG5cbmNvbnN0IGNhY2hlZF9jb21tYW5kOiBJQ2FjaGVkQ29tbW9uZCA9IHt9O1xuXG5leHBvcnQgeyBJVW5wYWNrTXlZYXJnc0FyZ3YgfVxuXG5leHBvcnQgdHlwZSBJVW5wYWNrWWFyZ3NBcmd2PFQgZXh0ZW5kcyB5YXJncy5Bcmd2PiA9IFQgZXh0ZW5kcyB5YXJncy5Bcmd2PGluZmVyIFU+ID8gVSA6IG5ldmVyO1xuXG5leHBvcnQgaW50ZXJmYWNlIElDYWNoZWRDb21tb25kXG57XG5cdFtjbWQ6IHN0cmluZ106IHlhcmdzLkNvbW1hbmRNb2R1bGVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGR1bW15X2J1aWxkZXI8VCBleHRlbmRzIHt9Pih5YXJnOiB5YXJncy5Bcmd2PFQ+KVxue1xuXHRyZXR1cm4geWFyZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZHVtbXlfaGFuZGxlcjxUIGV4dGVuZHMge30+KGFyZ3M6IHlhcmdzLkFyZ3VtZW50czxUPik6IGFueVxue1xuXHRyZXR1cm4gYXJnc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlX2NvbW1hbmQ8VCwgVSBleHRlbmRzIFQ+KHlhcmc6IHlhcmdzLkFyZ3Y8VD4sXG5cdGNvbW1hbmQ6IHN0cmluZyxcblx0aGFuZGxlcjogKGFyZ3M6IHlhcmdzLkFyZ3VtZW50czxVPikgPT4gdm9pZCxcblx0YnVpbGRlcj86ICh5YXJnOiB5YXJncy5Bcmd2PFQ+KSA9PiB5YXJncy5Bcmd2PFU+LFxuKVxue1xuXHQvLyBAdHMtaWdub3JlXG5cdGJ1aWxkZXIgPSBidWlsZGVyIHx8IGR1bW15X2J1aWxkZXI7XG5cblx0Y2FjaGVkX2NvbW1hbmRbY29tbWFuZF0gPSB7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGJ1aWxkZXIsXG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGhhbmRsZXIsXG5cdH07XG5cblx0cmV0dXJuIFtidWlsZGVyLCBoYW5kbGVyXSBhcyBjb25zdFxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsbF9jb21tb25kPFQsIFU+KHlhcmc6IHlhcmdzLkFyZ3Y8VD4sIGNvbW1vbmQ6IHN0cmluZywgYXJndj86IHlhcmdzLkFyZ3VtZW50czxVPilcbntcblx0cmV0dXJuIGNhY2hlZF9jb21tYW5kW2NvbW1vbmRdLmhhbmRsZXIoYXJndiA9PSBudWxsID8geWFyZy5hcmd2IDogYXJndilcbn1cblxuZXhwb3J0IHR5cGUgSUNvbW1hbmRCdWlsZGVyPFQgZXh0ZW5kcyB7fSwgVSBleHRlbmRzIHt9PiA9IChhcmdzOiB5YXJncy5Bcmd2PFQ+KSA9PiB5YXJncy5Bcmd2PElVbnBhY2tNeVlhcmdzQXJndiAmIFU+O1xuXG5leHBvcnQgdHlwZSBJQ29tbWFuZE1vZHVsZTxUIGV4dGVuZHMge30sIFUgZXh0ZW5kcyB7fSA9IElVbnBhY2tNeVlhcmdzQXJndj4gPVxue1xuXHRjb21tYW5kPzogUmVhZG9ubHlBcnJheTxzdHJpbmc+IHwgc3RyaW5nO1xuXHRhbGlhc2VzPzogUmVhZG9ubHlBcnJheTxzdHJpbmc+IHwgc3RyaW5nO1xuXHRkZXNjcmliZT86IHN0cmluZyB8IGZhbHNlO1xuXG5cdGJ1aWxkZXI/OiBJQ29tbWFuZEJ1aWxkZXI8VCwgVT4sXG5cdGhhbmRsZXIoYXJnczogeWFyZ3MuQXJndW1lbnRzPElVbnBhY2tNeVlhcmdzQXJndiAmIFU+KTogYW55LFxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlX2NvbW1hbmQyPFUgZXh0ZW5kcyB7fT4oY29uZjogSUNvbW1hbmRNb2R1bGU8SVVucGFja015WWFyZ3NBcmd2LCBVPiAmIHtcblx0Ly95YXJnPzogeWFyZ3MuQXJndjxUPixcblx0ZGVzYz86IElDb21tYW5kTW9kdWxlPElVbnBhY2tNeVlhcmdzQXJndiwgVT5bXCJkZXNjcmliZVwiXSxcbn0pOiB5YXJncy5Db21tYW5kTW9kdWxlPElVbnBhY2tNeVlhcmdzQXJndiwgVT5cbntcblx0Ly8gQHRzLWlnbm9yZVxuXHRsZXQgeyBoYW5kbGVyID0gZHVtbXlfaGFuZGxlciwgYnVpbGRlciA9IGR1bW15X2J1aWxkZXIsIGRlc2MgfSA9IGNvbmY7XG5cdGxldCB7IGRlc2NyaWJlID0gZGVzYyB9ID0gY29uZjtcblxuXHRsZXQgb3B0czogeWFyZ3MuQ29tbWFuZE1vZHVsZTxJVW5wYWNrTXlZYXJnc0FyZ3YsIFU+ID0ge1xuXHRcdC4uLihjb25mIGFzIHlhcmdzLkNvbW1hbmRNb2R1bGU8SVVucGFja015WWFyZ3NBcmd2LCBVPiksXG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGJ1aWxkZXIsXG5cdFx0aGFuZGxlcixcblx0XHRkZXNjcmliZSxcblx0fTtcblxuXHRsZXQgY29tbWFuZDogcmVhZG9ubHkgc3RyaW5nW10gfCBzdHJpbmc7XG5cblx0aWYgKEFycmF5LmlzQXJyYXkoY29tbWFuZCkpXG5cdHtcblx0XHRsZXQgY21kID0gY29tbWFuZFswXTtcblxuXHRcdGNhY2hlZF9jb21tYW5kW2NtZF0gPSBvcHRzO1xuXG5cdFx0Y29tbWFuZC5zbGljZSgxKS5mb3JFYWNoKGMgPT4gY2FjaGVkX2NvbW1hbmRbY10gPSBjYWNoZWRfY29tbWFuZFtjbWRdKVxuXHR9XG5cdGVsc2Vcblx0e1xuXHRcdGNhY2hlZF9jb21tYW5kW2NvbW1hbmQgYXMgc3RyaW5nXSA9IG9wdHM7XG5cdH1cblxuXHRfZGVsZXRlKG9wdHMgYXMgYW55KTtcblxuXHRmdW5jdGlvbiBfZGVsZXRlKG9wdHM6IHR5cGVvZiBjb25mKVxuXHR7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGRlbGV0ZSBvcHRzLnlhcmc7XG5cdFx0ZGVsZXRlIG9wdHMuZGVzYztcblx0fVxuXG5cdHJldHVybiBvcHRzO1xufVxuIl19