"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sortDeps = exports.fixNpmLock = void 0;
/**
 * Created by user on 2020/3/31.
 */
const naturalCompare = require("string-natural-compare");
function fixNpmLock(npmLock) {
    if (npmLock.dependencies && typeof npmLock.dependencies === 'object') {
        let keys = sortDeps(npmLock.dependencies);
        for (let key of keys) {
            if (key === 'dependencies') {
                delete npmLock.dependencies[key];
                continue;
            }
            let entry = npmLock.dependencies[key];
            fixNpmLock(entry);
        }
    }
    if (npmLock.requires && typeof npmLock.requires === 'object') {
        sortDeps(npmLock.requires);
    }
    // @ts-ignore
    //delete npmLock.resolved;
    // @ts-ignore
    //delete npmLock.integrity;
    return npmLock;
}
exports.fixNpmLock = fixNpmLock;
function sortDeps(record) {
    let keys = Object.keys(record)
        .sort((a, b) => {
        let at1 = a.startsWith('@') ? 1 : 0;
        let at2 = b.startsWith('@') ? 1 : 0;
        let c = (at2 - at1);
        return c || naturalCompare(a, b);
    });
    for (let key of keys) {
        let old = record[key];
        delete record[key];
        record[key] = old;
    }
    return keys;
}
exports.sortDeps = sortDeps;
exports.default = fixNpmLock;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZml4TnBtTG9jay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZpeE5wbUxvY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7O0dBRUc7QUFDSCx5REFBMEQ7QUF3QjFELFNBQWdCLFVBQVUsQ0FBQyxPQUFpQztJQUUzRCxJQUFJLE9BQU8sQ0FBQyxZQUFZLElBQUksT0FBTyxPQUFPLENBQUMsWUFBWSxLQUFLLFFBQVEsRUFDcEU7UUFDQyxJQUFJLElBQUksR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRTFDLEtBQUssSUFBSSxHQUFHLElBQUksSUFBSSxFQUNwQjtZQUNDLElBQUksR0FBRyxLQUFLLGNBQWMsRUFDMUI7Z0JBQ0MsT0FBTyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNqQyxTQUFTO2FBQ1Q7WUFFRCxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRXRDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNsQjtLQUNEO0lBRUQsSUFBSSxPQUFPLENBQUMsUUFBUSxJQUFJLE9BQU8sT0FBTyxDQUFDLFFBQVEsS0FBSyxRQUFRLEVBQzVEO1FBQ0MsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUMzQjtJQUVELGFBQWE7SUFDYiwwQkFBMEI7SUFDMUIsYUFBYTtJQUNiLDJCQUEyQjtJQUUzQixPQUFPLE9BQU8sQ0FBQTtBQUNmLENBQUM7QUEvQkQsZ0NBK0JDO0FBRUQsU0FBZ0IsUUFBUSxDQUFJLE1BQXlCO0lBRXBELElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBQzVCLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUdkLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXBDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFBO1FBRW5CLE9BQU8sQ0FBQyxJQUFJLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDakMsQ0FBQyxDQUFDLENBQ0Y7SUFFRCxLQUFLLElBQUksR0FBRyxJQUFJLElBQUksRUFDcEI7UUFDQyxJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFdEIsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDbEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztLQUNsQjtJQUVELE9BQU8sSUFBSSxDQUFBO0FBQ1osQ0FBQztBQXhCRCw0QkF3QkM7QUFFRCxrQkFBZSxVQUFVLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgdXNlciBvbiAyMDIwLzMvMzEuXG4gKi9cbmltcG9ydCBuYXR1cmFsQ29tcGFyZSA9IHJlcXVpcmUoJ3N0cmluZy1uYXR1cmFsLWNvbXBhcmUnKTtcblxuZXhwb3J0IGludGVyZmFjZSBJTnBtTG9ja1xue1xuXHRcIm5hbWVcIjogc3RyaW5nLFxuXHRcInZlcnNpb25cIjogc3RyaW5nLFxuXHRcImxvY2tmaWxlVmVyc2lvblwiOiBudW1iZXIsXG5cdFwicmVxdWlyZXNcIjogYm9vbGVhbixcblx0XCJkZXBlbmRlbmNpZXNcIjoge1xuXHRcdFtuYW1lOiBzdHJpbmddOiBJTnBtTG9ja0VudHJ5XG5cdH0sXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU5wbUxvY2tFbnRyeVxue1xuXHRcInZlcnNpb25cIjogc3RyaW5nLFxuXHRcInJlcXVpcmVzXCI/OiB7XG5cdFx0W25hbWU6IHN0cmluZ106IHN0cmluZ1xuXHR9LFxuXHRkZXBlbmRlbmNpZXM/OiB7XG5cdFx0W25hbWU6IHN0cmluZ106IElOcG1Mb2NrRW50cnlcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZml4TnBtTG9jayhucG1Mb2NrOiBJTnBtTG9jayB8IElOcG1Mb2NrRW50cnkpXG57XG5cdGlmIChucG1Mb2NrLmRlcGVuZGVuY2llcyAmJiB0eXBlb2YgbnBtTG9jay5kZXBlbmRlbmNpZXMgPT09ICdvYmplY3QnKVxuXHR7XG5cdFx0bGV0IGtleXMgPSBzb3J0RGVwcyhucG1Mb2NrLmRlcGVuZGVuY2llcyk7XG5cblx0XHRmb3IgKGxldCBrZXkgb2Yga2V5cylcblx0XHR7XG5cdFx0XHRpZiAoa2V5ID09PSAnZGVwZW5kZW5jaWVzJylcblx0XHRcdHtcblx0XHRcdFx0ZGVsZXRlIG5wbUxvY2suZGVwZW5kZW5jaWVzW2tleV07XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRsZXQgZW50cnkgPSBucG1Mb2NrLmRlcGVuZGVuY2llc1trZXldO1xuXG5cdFx0XHRmaXhOcG1Mb2NrKGVudHJ5KTtcblx0XHR9XG5cdH1cblxuXHRpZiAobnBtTG9jay5yZXF1aXJlcyAmJiB0eXBlb2YgbnBtTG9jay5yZXF1aXJlcyA9PT0gJ29iamVjdCcpXG5cdHtcblx0XHRzb3J0RGVwcyhucG1Mb2NrLnJlcXVpcmVzKTtcblx0fVxuXG5cdC8vIEB0cy1pZ25vcmVcblx0Ly9kZWxldGUgbnBtTG9jay5yZXNvbHZlZDtcblx0Ly8gQHRzLWlnbm9yZVxuXHQvL2RlbGV0ZSBucG1Mb2NrLmludGVncml0eTtcblxuXHRyZXR1cm4gbnBtTG9ja1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc29ydERlcHM8VD4ocmVjb3JkOiBSZWNvcmQ8c3RyaW5nLCBUPilcbntcblx0bGV0IGtleXMgPSBPYmplY3Qua2V5cyhyZWNvcmQpXG5cdFx0LnNvcnQoKGEsIGIpID0+XG5cdFx0e1xuXG5cdFx0XHRsZXQgYXQxID0gYS5zdGFydHNXaXRoKCdAJykgPyAxIDogMDtcblx0XHRcdGxldCBhdDIgPSBiLnN0YXJ0c1dpdGgoJ0AnKSA/IDEgOiAwO1xuXG5cdFx0XHRsZXQgYyA9IChhdDIgLSBhdDEpXG5cblx0XHRcdHJldHVybiBjIHx8IG5hdHVyYWxDb21wYXJlKGEsIGIpXG5cdFx0fSlcblx0O1xuXG5cdGZvciAobGV0IGtleSBvZiBrZXlzKVxuXHR7XG5cdFx0bGV0IG9sZCA9IHJlY29yZFtrZXldO1xuXG5cdFx0ZGVsZXRlIHJlY29yZFtrZXldXG5cdFx0cmVjb3JkW2tleV0gPSBvbGQ7XG5cdH1cblxuXHRyZXR1cm4ga2V5c1xufVxuXG5leHBvcnQgZGVmYXVsdCBmaXhOcG1Mb2NrXG4iXX0=