{"version":3,"file":"dedupe.js","sourceRoot":"","sources":["dedupe.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by user on 2019/4/30.\n */\n\nimport yargs = require('yargs');\nimport { fixDuplicates } from 'yarn-deduplicate';\nimport { console, consoleDebug, findRoot, fsYarnLock, yarnLockDiff } from '../index';\nimport fs = require('fs-extra');\nimport { Console2 } from 'debug-color2';\nimport path = require('path');\n\nexport function Dedupe(yarnlock_old: string)\n{\n\tlet yarnlock_new: string = fixDuplicates(yarnlock_old);\n\n\treturn {\n\t\t/**\n\t\t * 執行前的 yarn.lock\n\t\t */\n\t\tyarnlock_old,\n\t\t/**\n\t\t * 執行後的 yarn.lock\n\t\t */\n\t\tyarnlock_new,\n\t\t/**\n\t\t * yarn.lock 是否有變動\n\t\t */\n\t\tyarnlock_changed: yarnlock_old !== yarnlock_new,\n\t}\n}\n\nexport interface IWrapDedupeCache\n{\n\t/**\n\t * 如果不存在則等於 argv.cwd\n\t */\n\treadonly cwd?: string,\n\n\treadonly rootData?: ReturnType<typeof findRoot>,\n\n\t/**\n\t * 目前的 yarn.lock 狀態(隨步驟更動狀態)\n\t */\n\tyarnlock_cache?: ReturnType<typeof fsYarnLock>\n\n\t/**\n\t * 執行前的 yarn.lock\n\t */\n\treadonly yarnlock_old?: string,\n\t/**\n\t * 執行前的 yarn.lock 是否存在\n\t */\n\treadonly yarnlock_old_exists?: string,\n\t/**\n\t * yarn.lock 是否有變動\n\t */\n\tyarnlock_changed?: boolean,\n\n\t/**\n\t * 最後一次的 yarn.lock diff 訊息\n\t */\n\tyarnlock_msg?: string,\n\n\t/**\n\t * 每個步驟的狀態 true 代表中斷所有步驟\n\t * null 代表此步驟不存在\n\t * void/undefined 代表此步驟未執行\n\t */\n\treadonly ret: {\n\t\treadonly init: boolean | void | null,\n\t\treadonly before: boolean | void | null,\n\t\treadonly main: boolean | void | null,\n\t\treadonly after: boolean | void | null,\n\t},\n\n\treadonly consoleDebug?: Console2,\n\treadonly console?: Console2,\n\n\t[k: string]: unknown\n}\n\nexport function wrapDedupe<T extends {\n\tcwd?: string,\n\t[k: string]: unknown,\n}, U extends T | {\n\tcwd: string,\n\t[k: string]: unknown,\n}, C extends IWrapDedupeCache>(yarg: yargs.Argv<T>, argv: yargs.Arguments<U>, options: {\n\n\t/**\n\t * 如果初始化沒有發生錯誤 此步驟必定執行\n\t */\n\tinit?(yarg: yargs.Argv<T>, argv: yargs.Arguments<U>, cache: C): boolean | void,\n\n\t/**\n\t * 於 第一次 Dedupe 前的步驟\n\t */\n\tbefore?(yarg: yargs.Argv<T>, argv: yargs.Arguments<U>, cache: C): boolean | void,\n\n\t/**\n\t * 此步驟為必要選項\n\t */\n\tmain(yarg: yargs.Argv<T>, argv: yargs.Arguments<U>, cache: C): boolean | void,\n\n\t/**\n\t * 於 第二次 Dedupe 後的步驟\n\t */\n\tafter?(yarg: yargs.Argv<T>, argv: yargs.Arguments<U>, cache: C): boolean | void,\n\n\t/**\n\t * 於 第二次 Dedupe 後的步驟\n\t */\n\tafter?(yarg: yargs.Argv<T>, argv: yargs.Arguments<U>, cache: C): boolean | void,\n\n\t/**\n\t * 如果結束前沒有發生錯誤 此步驟必定執行\n\t */\n\tend?(yarg: yargs.Argv<T>, argv: yargs.Arguments<U>, cache: C): boolean | void,\n\n\t/**\n\t * 步驟間共享的緩存資訊並且會影響部分行為\n\t */\n\tcache?: Partial<C>\n})\n{\n\t// @ts-ignore\n\tlet cache: C = options.cache || {};\n\n\t// @ts-ignore\n\tcache.cwd = cache.cwd || argv.cwd;\n\n\n\n\tif (!cache.cwd)\n\t{\n\t\tthrow new TypeError(`cache.cwd is '${cache.cwd}'`)\n\t}\n\n\t// @ts-ignore\n\tcache.cwd = path.resolve(cache.cwd);\n\n\t// @ts-ignore\n\tcache.ret = {};\n\n\tcache.yarnlock_msg = undefined;\n\n\t// @ts-ignore\n\tcache.console = cache.console || console;\n\t// @ts-ignore\n\tcache.consoleDebug = cache.consoleDebug || consoleDebug;\n\n\tlet { init, before, main, after, end } = options;\n\n\t// @ts-ignore\n\tcache.rootData = cache.rootData || findRoot({\n\t\t...argv,\n\t\tcwd: cache.cwd,\n\t}, true);\n\n\t// @ts-ignore\n\tcache.yarnlock_cache = cache.yarnlock_cache || fsYarnLock(cache.rootData.root);\n\n\t// @ts-ignore\n\tcache.yarnlock_old = cache.yarnlock_cache.yarnlock_old;\n\n\t// @ts-ignore\n\tcache.yarnlock_old_exists = cache.yarnlock_cache.yarnlock_exists;\n\n\tLABEL1: {\n\n\t\t// @ts-ignore\n\t\tcache.ret.init = init ? !!init(yarg, argv, cache) : null;\n\n\t\tif (cache.ret.init)\n\t\t{\n\t\t\tbreak LABEL1;\n\t\t}\n\n\t\t// @ts-ignore\n\t\tcache.ret.before = before ? !!before(yarg, argv, cache) : null;\n\t\tif (cache.ret.before)\n\t\t{\n\t\t\tbreak LABEL1;\n\t\t}\n\n\t\tcache.yarnlock_cache = fsYarnLock(cache.rootData.root);\n\n\t\tif (cache.yarnlock_cache.yarnlock_exists)\n\t\t{\n\t\t\tlet ret1 = Dedupe(cache.yarnlock_cache.yarnlock_old);\n\n\t\t\tif (ret1.yarnlock_changed)\n\t\t\t{\n\t\t\t\tfs.writeFileSync(cache.yarnlock_cache.yarnlock_file, ret1.yarnlock_new);\n\n\t\t\t\tlet msg = yarnLockDiff(ret1.yarnlock_old, ret1.yarnlock_new);\n\n\t\t\t\tif (msg)\n\t\t\t\t{\n\t\t\t\t\tcache.yarnlock_msg = msg;\n\t\t\t\t}\n\n\t\t\t\tcache.yarnlock_changed = true;\n\n\t\t\t\tcache.yarnlock_cache.yarnlock_old = ret1.yarnlock_new;\n\n\t\t\t\tconsoleDebug.info(`Deduplication yarn.lock`);\n\t\t\t\tconsoleDebug.gray.info(`${cache.yarnlock_cache.yarnlock_file}`);\n\t\t\t}\n\t\t}\n\n\t\t// @ts-ignore\n\t\tcache.ret.main = !!main(yarg, argv, cache);\n\t\tif (cache.ret.main)\n\t\t{\n\t\t\tbreak LABEL1;\n\t\t}\n\n\t\tcache.yarnlock_cache = fsYarnLock(cache.rootData.root);\n\n\t\tif (cache.yarnlock_cache.yarnlock_exists)\n\t\t{\n\t\t\tlet ret1 = Dedupe(cache.yarnlock_cache.yarnlock_old);\n\n\t\t\tif (ret1.yarnlock_changed)\n\t\t\t{\n\t\t\t\tfs.writeFileSync(cache.yarnlock_cache.yarnlock_file, ret1.yarnlock_new);\n\n\t\t\t\tlet msg = yarnLockDiff(ret1.yarnlock_old, ret1.yarnlock_new);\n\n\t\t\t\tif (msg)\n\t\t\t\t{\n\t\t\t\t\tcache.yarnlock_msg = msg;\n\t\t\t\t}\n\n\t\t\t\tcache.yarnlock_changed = true;\n\n\t\t\t\tcache.yarnlock_cache.yarnlock_old = ret1.yarnlock_new;\n\n\t\t\t\tconsoleDebug.info(`Deduplication yarn.lock`);\n\t\t\t\tconsoleDebug.gray.info(`${cache.yarnlock_cache.yarnlock_file}`);\n\t\t\t}\n\t\t\telse if (cache.yarnlock_changed == null)\n\t\t\t{\n\t\t\t\tcache.yarnlock_changed = ret1.yarnlock_changed;\n\t\t\t}\n\t\t}\n\n\t\tif (cache.yarnlock_changed)\n\t\t{\n\t\t\tif (!cache.yarnlock_cache.yarnlock_exists || !cache.yarnlock_old || cache.yarnlock_old == cache.yarnlock_cache.yarnlock_old)\n\t\t\t{\n\t\t\t\tcache.yarnlock_changed = false;\n\t\t\t}\n\t\t}\n\n\t\t// @ts-ignore\n\t\tcache.ret.after = after ? !!after(yarg, argv, cache) : null;\n\t\tif (cache.ret.after)\n\t\t{\n\t\t\tbreak LABEL1;\n\t\t}\n\n\t\tif (cache.yarnlock_changed)\n\t\t{\n\t\t\tlet msg = yarnLockDiff(cache.yarnlock_old, cache.yarnlock_cache.yarnlock_old);\n\n\t\t\tif (msg)\n\t\t\t{\n\t\t\t\tcache.yarnlock_msg = msg;\n\t\t\t}\n\t\t}\n\t}\n\n\t// @ts-ignore\n\tcache.ret.end = end ? !!end(yarg, argv, cache) : null;\n\n\treturn {\n\t\tcwd: cache.cwd,\n\t\trootData: cache.rootData,\n\t\tyarg,\n\t\targv,\n\t\tcache,\n\t}\n}\n\nexport function infoFromDedupeCache<C extends IWrapDedupeCache>(cache: C)\n{\n\tlet { yarnlock_changed, yarnlock_old_exists } = cache;\n\n\tlet { yarnlock_file, yarnlock_exists } = cache.yarnlock_cache;\n\n\treturn {\n\t\t...cache.rootData,\n\t\tyarnlock_file,\n\t\tyarnlock_old_exists,\n\t\tyarnlock_exists,\n\t\tyarnlock_changed,\n\t};\n}\n\nexport default Dedupe;\n\n/*\nwrapDedupe(null, null, {\n\tcache: {\n\t\tcwd: '.',\n\t},\n\tmain(yarg, argv, cache)\n\t{\n\t\tconsole.log(yarg, argv, cache);\n\n\t\treturn true;\n\t}\n});\n*/\n"]}