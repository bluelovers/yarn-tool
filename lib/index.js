"use strict";
/**
 * Created by user on 2019/4/30.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const findYarnWorkspaceRoot = require("find-yarn-workspace-root2");
const pkgDir = require("pkg-dir");
const path = require("upath2");
const fs = require("fs-extra");
const debug_color2_1 = require("debug-color2");
const util_1 = require("debug-color2/lib/util");
const package_dts_1 = require("@ts-type/package-dts");
exports.console = new debug_color2_1.Console2();
exports.consoleDebug = new debug_color2_1.Console2(null, {
    label: true,
    time: true,
});
function pathNormalize(input) {
    return path.normalize(input);
}
exports.pathNormalize = pathNormalize;
function pathEqual(a, b) {
    return path.normalize(a) === path.normalize(b);
}
exports.pathEqual = pathEqual;
function findRoot(options, throwError) {
    if (!options.cwd) {
        throw new TypeError(`options.cwd is '${options.cwd}'`);
    }
    let ws;
    if (!options.skipCheckWorkspace) {
        ws = findYarnWorkspaceRoot(options.cwd);
    }
    let pkg = pkgDir.sync(options.cwd);
    if (pkg == null && (options.throwError || (options.throwError == null && throwError))) {
        let err = new TypeError(`can't found package root from target directory '${options.cwd}'`);
        throw err;
    }
    let hasWorkspace = ws && ws != null;
    let isWorkspace = hasWorkspace && pathEqual(ws, pkg);
    let root = hasWorkspace ? ws : pkg;
    return {
        pkg,
        ws,
        hasWorkspace,
        isWorkspace,
        root,
    };
}
exports.findRoot = findRoot;
function fsYarnLock(root) {
    let yarnlock_file = path.join(root, 'yarn.lock');
    let yarnlock_exists = fs.existsSync(yarnlock_file);
    let yarnlock_old = yarnlock_exists && fs.readFileSync(yarnlock_file, 'utf8') || null;
    return {
        yarnlock_file,
        yarnlock_exists,
        yarnlock_old,
    };
}
exports.fsYarnLock = fsYarnLock;
function filterYargsArguments(argv, list) {
    let ls = Object.entries(argv);
    if (Array.isArray(list)) {
        ls = ls
            .filter(([key, value]) => {
            return list.includes(key);
        });
    }
    else {
        ls = ls
            .filter(([key, value]) => {
            return list(key, value);
        });
    }
    return ls.reduce((a, [key, value]) => {
        // @ts-ignore
        a[key] = value;
        return a;
    }, {});
}
exports.filterYargsArguments = filterYargsArguments;
function lazyFlags(keys, argv) {
    return keys.map(key => argv[key] && '--' + key);
}
exports.lazyFlags = lazyFlags;
exports.chalkByConsole = util_1.createFnChalkByConsole(exports.console);
function printRootData(rootData, argv) {
    let doWorkspace = !rootData.isWorkspace && rootData.hasWorkspace;
    let pkg_file = path.join(rootData.pkg, 'package.json');
    let pkg_data = package_dts_1.readPackageJson(pkg_file);
    exports.consoleDebug.info(`${pkg_data.name}@${pkg_data.version}`, path.relative(doWorkspace ? rootData.ws : argv.cwd, rootData.pkg));
}
exports.printRootData = printRootData;
function yargsProcessExit(msg, code = 1) {
    if (!(msg instanceof Error)) {
        msg = new Error(msg);
        // @ts-ignore
        msg.code = code;
    }
    exports.console.error(msg.message);
    require('yargs').exit(code, msg);
    process.exit(code);
}
exports.yargsProcessExit = yargsProcessExit;
exports.default = exports;
//# sourceMappingURL=data:application/json;base64,