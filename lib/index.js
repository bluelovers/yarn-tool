"use strict";
/**
 * Created by user on 2019/4/30.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("upath2");
const fs = require("fs-extra");
const debug_color2_1 = require("debug-color2");
const util_1 = require("debug-color2/lib/util");
const package_dts_1 = require("@ts-type/package-dts");
const find_root_1 = require("@yarn-tool/find-root");
exports.findRoot = find_root_1.findRoot;
exports.console = new debug_color2_1.Console2();
exports.consoleDebug = new debug_color2_1.Console2(null, {
    label: true,
    time: true,
});
function pathNormalize(input) {
    return path.normalize(input);
}
exports.pathNormalize = pathNormalize;
function pathEqual(a, b) {
    return path.normalize(a) === path.normalize(b);
}
exports.pathEqual = pathEqual;
function fsYarnLock(root) {
    let yarnlock_file = path.join(root, 'yarn.lock');
    let yarnlock_exists = fs.existsSync(yarnlock_file);
    let yarnlock_old = yarnlock_exists && fs.readFileSync(yarnlock_file, 'utf8') || null;
    return {
        yarnlock_file,
        yarnlock_exists,
        yarnlock_old,
    };
}
exports.fsYarnLock = fsYarnLock;
function filterYargsArguments(argv, list) {
    let ls = Object.entries(argv);
    if (Array.isArray(list)) {
        ls = ls
            .filter(([key, value]) => {
            return list.includes(key);
        });
    }
    else {
        ls = ls
            .filter(([key, value]) => {
            return list(key, value);
        });
    }
    return ls.reduce((a, [key, value]) => {
        // @ts-ignore
        a[key] = value;
        return a;
    }, {});
}
exports.filterYargsArguments = filterYargsArguments;
function lazyFlags(keys, argv) {
    return keys.reduce((a, key) => {
        if (argv[key]) {
            a.push('--' + key);
        }
        return a;
    }, []);
}
exports.lazyFlags = lazyFlags;
exports.chalkByConsole = util_1.createFnChalkByConsole(exports.console);
function printRootData(rootData, argv) {
    let doWorkspace = !rootData.isWorkspace && rootData.hasWorkspace;
    let pkg_file = path.join(rootData.pkg, 'package.json');
    let pkg_data = package_dts_1.readPackageJson(pkg_file);
    exports.consoleDebug.info(`${pkg_data.name}@${pkg_data.version}`, path.relative(doWorkspace ? rootData.ws : argv.cwd, rootData.pkg));
}
exports.printRootData = printRootData;
function yargsProcessExit(msg, code = 1) {
    if (!(msg instanceof Error)) {
        msg = new Error(msg);
        // @ts-ignore
        msg.code = code;
    }
    exports.console.error(msg.message);
    require('yargs').exit(code, msg);
    process.exit(code);
}
exports.yargsProcessExit = yargsProcessExit;
exports.default = exports;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBSUgsK0JBQWdDO0FBQ2hDLCtCQUFnQztBQUNoQywrQ0FBd0M7QUFDeEMsZ0RBQStEO0FBQy9ELHNEQUF1RDtBQUd2RCxvREFBZ0Q7QUFTdkMsbUJBVEEsb0JBQVEsQ0FTQTtBQVBKLFFBQUEsT0FBTyxHQUFHLElBQUksdUJBQVEsRUFBRSxDQUFDO0FBRXpCLFFBQUEsWUFBWSxHQUFHLElBQUksdUJBQVEsQ0FBQyxJQUFJLEVBQUU7SUFDOUMsS0FBSyxFQUFFLElBQUk7SUFDWCxJQUFJLEVBQUUsSUFBSTtDQUNWLENBQUMsQ0FBQztBQUlILFNBQWdCLGFBQWEsQ0FBQyxLQUFhO0lBRTFDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUM3QixDQUFDO0FBSEQsc0NBR0M7QUFFRCxTQUFnQixTQUFTLENBQUMsQ0FBUyxFQUFFLENBQVM7SUFFN0MsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDL0MsQ0FBQztBQUhELDhCQUdDO0FBRUQsU0FBZ0IsVUFBVSxDQUFDLElBQVk7SUFFdEMsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFakQsSUFBSSxlQUFlLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUVuRCxJQUFJLFlBQVksR0FBRyxlQUFlLElBQUksRUFBRSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDO0lBRXJGLE9BQU87UUFDTixhQUFhO1FBQ2IsZUFBZTtRQUNmLFlBQVk7S0FDWixDQUFBO0FBQ0YsQ0FBQztBQWJELGdDQWFDO0FBRUQsU0FBZ0Is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LyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAxOS80LzMwLlxuICovXG5cbmltcG9ydCBmaW5kWWFybldvcmtzcGFjZVJvb3QgPSByZXF1aXJlKCdmaW5kLXlhcm4td29ya3NwYWNlLXJvb3QyJyk7XG5pbXBvcnQgcGtnRGlyID0gcmVxdWlyZSgncGtnLWRpcicpO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKCd1cGF0aDInKTtcbmltcG9ydCBmcyA9IHJlcXVpcmUoJ2ZzLWV4dHJhJyk7XG5pbXBvcnQgeyBDb25zb2xlMiB9IGZyb20gJ2RlYnVnLWNvbG9yMic7XG5pbXBvcnQgeyBjcmVhdGVGbkNoYWxrQnlDb25zb2xlIH0gZnJvbSAnZGVidWctY29sb3IyL2xpYi91dGlsJztcbmltcG9ydCB7IHJlYWRQYWNrYWdlSnNvbiB9IGZyb20gJ0B0cy10eXBlL3BhY2thZ2UtZHRzJztcbmltcG9ydCB7IEFyZ3VtZW50cyB9IGZyb20gJ3lhcmdzJztcbmltcG9ydCB7IElVbnBhY2tNeVlhcmdzQXJndiB9IGZyb20gJy4vY21kX2Rpcic7XG5pbXBvcnQgeyBmaW5kUm9vdCB9IGZyb20gJ0B5YXJuLXRvb2wvZmluZC1yb290JztcblxuZXhwb3J0IGNvbnN0IGNvbnNvbGUgPSBuZXcgQ29uc29sZTIoKTtcblxuZXhwb3J0IGNvbnN0IGNvbnNvbGVEZWJ1ZyA9IG5ldyBDb25zb2xlMihudWxsLCB7XG5cdGxhYmVsOiB0cnVlLFxuXHR0aW1lOiB0cnVlLFxufSk7XG5cbmV4cG9ydCB7IGZpbmRSb290IH1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhdGhOb3JtYWxpemUoaW5wdXQ6IHN0cmluZylcbntcblx0cmV0dXJuIHBhdGgubm9ybWFsaXplKGlucHV0KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGF0aEVxdWFsKGE6IHN0cmluZywgYjogc3RyaW5nKVxue1xuXHRyZXR1cm4gcGF0aC5ub3JtYWxpemUoYSkgPT09IHBhdGgubm9ybWFsaXplKGIpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmc1lhcm5Mb2NrKHJvb3Q6IHN0cmluZylcbntcblx0bGV0IHlhcm5sb2NrX2ZpbGUgPSBwYXRoLmpvaW4ocm9vdCwgJ3lhcm4ubG9jaycpO1xuXG5cdGxldCB5YXJubG9ja19leGlzdHMgPSBmcy5leGlzdHNTeW5jKHlhcm5sb2NrX2ZpbGUpO1xuXG5cdGxldCB5YXJubG9ja19vbGQgPSB5YXJubG9ja19leGlzdHMgJiYgZnMucmVhZEZpbGVTeW5jKHlhcm5sb2NrX2ZpbGUsICd1dGY4JykgfHwgbnVsbDtcblxuXHRyZXR1cm4ge1xuXHRcdHlhcm5sb2NrX2ZpbGUsXG5cdFx0eWFybmxvY2tfZXhpc3RzLFxuXHRcdHlhcm5sb2NrX29sZCxcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyWWFyZ3NBcmd1bWVudHM8VCBleHRlbmRzIEFyZ3VtZW50cz4oYXJndjogVCwgbGlzdDogc3RyaW5nW10gfCAoKGtleToga2V5b2YgVCwgdmFsdWU6IFRba2V5b2YgVF0pID0+IGJvb2xlYW4pKTogUGFydGlhbDxUPlxue1xuXHRsZXQgbHMgPSBPYmplY3QuZW50cmllcyhhcmd2KTtcblxuXHRpZiAoQXJyYXkuaXNBcnJheShsaXN0KSlcblx0e1xuXHRcdGxzID0gbHNcblx0XHRcdC5maWx0ZXIoKFtrZXksIHZhbHVlXSkgPT4ge1xuXHRcdFx0XHRyZXR1cm4gbGlzdC5pbmNsdWRlcyhrZXkpXG5cdFx0XHR9KVxuXHRcdDtcblx0fVxuXHRlbHNlXG5cdHtcblx0XHRscyA9IGxzXG5cdFx0XHQuZmlsdGVyKChba2V5LCB2YWx1ZV0pID0+IHtcblx0XHRcdFx0cmV0dXJuIGxpc3Qoa2V5LCB2YWx1ZSBhcyBhbnkpXG5cdFx0XHR9KVxuXHRcdDtcblx0fVxuXG5cdHJldHVybiBscy5yZWR1Y2UoKGEsIFtrZXksIHZhbHVlXSkgPT4ge1xuXG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGFba2V5XSA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIGFcblx0fSwge30gYXMgUGFydGlhbDxUPilcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxhenlGbGFncyhrZXlzOiBzdHJpbmdbXSwgYXJndjoge1xuXHRbazogc3RyaW5nXTogYm9vbGVhbixcbn0pOiBzdHJpbmdbXVxue1xuXHRyZXR1cm4ga2V5cy5yZWR1Y2UoKGEsIGtleSkgPT4ge1xuXHRcdGlmIChhcmd2W2tleV0pXG5cdFx0e1xuXHRcdFx0YS5wdXNoKCctLScgKyBrZXkpO1xuXHRcdH1cblx0XHRyZXR1cm4gYTtcblx0fSwgW10gYXMgc3RyaW5nW10pXG59XG5cbmV4cG9ydCBjb25zdCBjaGFsa0J5Q29uc29sZSA9IGNyZWF0ZUZuQ2hhbGtCeUNvbnNvbGUoY29uc29sZSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmludFJvb3REYXRhKHJvb3REYXRhOiBSZXR1cm5UeXBlPHR5cGVvZiBmaW5kUm9vdD4sIGFyZ3Y6IEFyZ3VtZW50czxJVW5wYWNrTXlZYXJnc0FyZ3Y+KVxue1xuXHRsZXQgZG9Xb3Jrc3BhY2UgPSAhcm9vdERhdGEuaXNXb3Jrc3BhY2UgJiYgcm9vdERhdGEuaGFzV29ya3NwYWNlO1xuXG5cdGxldCBwa2dfZmlsZSA9IHBhdGguam9pbihyb290RGF0YS5wa2csICdwYWNrYWdlLmpzb24nKTtcblx0bGV0IHBrZ19kYXRhID0gcmVhZFBhY2thZ2VKc29uKHBrZ19maWxlKTtcblxuXHRjb25zb2xlRGVidWcuaW5mbyhgJHtwa2dfZGF0YS5uYW1lfUAke3BrZ19kYXRhLnZlcnNpb259YCwgcGF0aC5yZWxhdGl2ZShkb1dvcmtzcGFjZSA/IHJvb3REYXRhLndzIDogYXJndi5jd2QsIHJvb3REYXRhLnBrZykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24geWFyZ3NQcm9jZXNzRXhpdChtc2c6IHN0cmluZyB8IEVycm9yLCBjb2RlOiBudW1iZXIgPSAxKVxue1xuXHRpZiAoIShtc2cgaW5zdGFuY2VvZiBFcnJvcikpXG5cdHtcblx0XHRtc2cgPSBuZXcgRXJyb3IobXNnKTtcblxuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRtc2cuY29kZSA9IGNvZGVcblx0fVxuXG5cdGNvbnNvbGUuZXJyb3IobXNnLm1lc3NhZ2UpO1xuXHRyZXF1aXJlKCd5YXJncycpLmV4aXQoY29kZSwgbXNnKTtcblx0cHJvY2Vzcy5leGl0KGNvZGUpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGV4cG9ydHMgYXMgdHlwZW9mIGltcG9ydCgnLi9pbmRleCcpO1xuIl19