"use strict";
/**
 * Created by user on 2019/4/30.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const findYarnWorkspaceRoot = require("find-yarn-workspace-root2");
const pkgDir = require("pkg-dir");
const diff_service_1 = require("yarn-lock-diff/lib/diff-service");
const formatter_1 = require("yarn-lock-diff/lib/formatter");
const debug_color2_1 = require("debug-color2");
const path = require("path");
const fs = require("fs-extra");
const util_1 = require("debug-color2/lib/util");
exports.console = new debug_color2_1.Console2();
exports.consoleDebug = new debug_color2_1.Console2(null, {
    label: true,
    time: true,
});
function findRoot(options, throwError) {
    if (!options.cwd) {
        throw new TypeError(`options.cwd is '${options.cwd}'`);
    }
    let hasWorkspace;
    if (!options.skipCheckWorkspace) {
        hasWorkspace = findYarnWorkspaceRoot(options.cwd);
    }
    let pkg = pkgDir.sync(options.cwd);
    if (pkg == null && (options.throwError || (options.throwError == null && throwError))) {
        let err = new TypeError(`can't found package root from target directory '${options.cwd}'`);
        throw err;
    }
    return {
        pkg,
        ws: hasWorkspace,
        root: hasWorkspace == null ? pkg : hasWorkspace,
    };
}
exports.findRoot = findRoot;
function yarnLockDiff(yarnlock_old, yarnlock_new) {
    let r2 = [];
    let r = diff_service_1.DiffService.buildDiff([yarnlock_old], [yarnlock_new])
        .map(formatter_1.FormatterService.buildDiffTable)
        .map(r => r2.push(r));
    return r2[0];
}
exports.yarnLockDiff = yarnLockDiff;
function fsYarnLock(root) {
    let yarnlock_file = path.join(root, 'yarn.lock');
    let yarnlock_exists = fs.existsSync(yarnlock_file);
    let yarnlock_old = yarnlock_exists && fs.readFileSync(yarnlock_file, 'utf8') || null;
    return {
        yarnlock_file,
        yarnlock_exists,
        yarnlock_old,
    };
}
exports.fsYarnLock = fsYarnLock;
function lazyFlags(keys, argv) {
    return keys.map(key => argv[key] && '--' + key);
}
exports.lazyFlags = lazyFlags;
exports.chalkByConsole = util_1.createFnChalkByConsole(exports.console);
exports.default = exports;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBRUgsbUVBQW9FO0FBQ3BFLGtDQUFtQztBQUNuQyxrRUFBOEQ7QUFDOUQsNERBQWdFO0FBQ2hFLCtDQUF3QztBQUN4Qyw2QkFBOEI7QUFDOUIsK0JBQWdDO0FBQ2hDLGdEQUErRDtBQUVsRCxRQUFBLE9BQU8sR0FBRyxJQUFJLHVCQUFRLEVBQUUsQ0FBQztBQUV6QixRQUFBLFlBQVksR0FBRyxJQUFJLHVCQUFRLENBQUMsSUFBSSxFQUFFO0lBQzlDLEtBQUssRUFBRSxJQUFJO0lBQ1gsSUFBSSxFQUFFLElBQUk7Q0FDVixDQUFDLENBQUM7QUFFSCxTQUFnQixRQUFRLENBQUMsT0FJeEIsRUFBRSxVQUFvQjtJQUV0QixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFDaEI7UUFDQyxNQUFNLElBQUksU0FBUyxDQUFDLG1CQUFtQixPQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQTtLQUN0RDtJQUVELElBQUksWUFBb0IsQ0FBQztJQUV6QixJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUMvQjtRQUNDLFlBQVksR0FBRyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDbEQ7SUFFRCxJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVuQyxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBSSxJQUFJLElBQUksVUFBVSxDQUFDLENBQUMsRUFDckY7UUFDQyxJQUFJLEdBQUcsR0FBRyxJQUFJLFNBQVMsQ0FBQyxtREFBbUQsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0YsTUFBTSxHQUFHLENBQUM7S0FDVjtJQUVELE9BQU87UUFDTixHQUFHO1FBQ0gsRUFBRSxFQUFFLFlBQVk7UUFDaEIsSUFBSSxFQUFFLFlBQVksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsWUFBWTtLQUMvQyxDQUFBO0FBQ0YsQ0FBQztBQS9CRCw0QkErQkM7QUFFRCxTQUFnQixZQUFZLENBQUMsWUFBb0IsRUFBRSxZQUFvQjtJQUV0RSxJQUFJLEVBQUUsR0FBYSxFQUFFLENBQUM7SUFFdEIsSUFBSSxDQUFDLEdBQUcsMEJBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQzNELEdBQUcsQ0FBQyw0QkFBZ0IsQ0FBQyxjQUFjLENBQUM7U0FDcEMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNyQjtJQUVELE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2QsQ0FBQztBQVZELG9DQVVDO0FBRUQsU0FBZ0IsVUFBVSxDQUFDLElBQVk7SUFFdEMsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFakQsSUFBSSxlQUFlLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUVuRCxJQUFJLFlBQVksR0FBRyxlQUFlLElBQUksRUFBRSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDO0lBRXJGLE9BQU87UUFDTixhQUFhO1FBQ2IsZUFBZTtRQUNmLFlBQVk7S0FDWixDQUFBO0FBQ0YsQ0FBQztBQWJELGdDQWFDO0FBRUQsU0FBZ0IsU0FBUyxDQUFDLElBQWMsRUFBRSxJQUV6QztJQUVBLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7QUFDaEQsQ0FBQztBQUxELDhCQUtDO0FBRVksUUFBQSxjQUFjLEdBQUcsNkJBQXNCLENBQUMsZUFBTyxDQUFDLENBQUM7QUFFOUQsa0JBQWUsT0FBbUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSB1c2VyIG9uIDIwMTkvNC8zMC5cbiAqL1xuXG5pbXBvcnQgZmluZFlhcm5Xb3Jrc3BhY2VSb290ID0gcmVxdWlyZSgnZmluZC15YXJuLXdvcmtzcGFjZS1yb290MicpO1xuaW1wb3J0IHBrZ0RpciA9IHJlcXVpcmUoJ3BrZy1kaXInKTtcbmltcG9ydCB7IERpZmZTZXJ2aWNlIH0gZnJvbSAneWFybi1sb2NrLWRpZmYvbGliL2RpZmYtc2VydmljZSc7XG5pbXBvcnQgeyBGb3JtYXR0ZXJTZXJ2aWNlIH0gZnJvbSAneWFybi1sb2NrLWRpZmYvbGliL2Zvcm1hdHRlcic7XG5pbXBvcnQgeyBDb25zb2xlMiB9IGZyb20gJ2RlYnVnLWNvbG9yMic7XG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmltcG9ydCBmcyA9IHJlcXVpcmUoJ2ZzLWV4dHJhJyk7XG5pbXBvcnQgeyBjcmVhdGVGbkNoYWxrQnlDb25zb2xlIH0gZnJvbSAnZGVidWctY29sb3IyL2xpYi91dGlsJztcblxuZXhwb3J0IGNvbnN0IGNvbnNvbGUgPSBuZXcgQ29uc29sZTIoKTtcblxuZXhwb3J0IGNvbnN0IGNvbnNvbGVEZWJ1ZyA9IG5ldyBDb25zb2xlMihudWxsLCB7XG5cdGxhYmVsOiB0cnVlLFxuXHR0aW1lOiB0cnVlLFxufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kUm9vdChvcHRpb25zOiB7XG5cdGN3ZDogc3RyaW5nLFxuXHRza2lwQ2hlY2tXb3Jrc3BhY2U/OiBib29sZWFuIHwgc3RyaW5nLFxuXHR0aHJvd0Vycm9yPzogYm9vbGVhbixcbn0sIHRocm93RXJyb3I/OiBib29sZWFuKVxue1xuXHRpZiAoIW9wdGlvbnMuY3dkKVxuXHR7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgb3B0aW9ucy5jd2QgaXMgJyR7b3B0aW9ucy5jd2R9J2ApXG5cdH1cblxuXHRsZXQgaGFzV29ya3NwYWNlOiBzdHJpbmc7XG5cblx0aWYgKCFvcHRpb25zLnNraXBDaGVja1dvcmtzcGFjZSlcblx0e1xuXHRcdGhhc1dvcmtzcGFjZSA9IGZpbmRZYXJuV29ya3NwYWNlUm9vdChvcHRpb25zLmN3ZCk7XG5cdH1cblxuXHRsZXQgcGtnID0gcGtnRGlyLnN5bmMob3B0aW9ucy5jd2QpO1xuXG5cdGlmIChwa2cgPT0gbnVsbCAmJiAob3B0aW9ucy50aHJvd0Vycm9yIHx8IChvcHRpb25zLnRocm93RXJyb3IgPT0gbnVsbCAmJiB0aHJvd0Vycm9yKSkpXG5cdHtcblx0XHRsZXQgZXJyID0gbmV3IFR5cGVFcnJvcihgY2FuJ3QgZm91bmQgcGFja2FnZSByb290IGZyb20gdGFyZ2V0IGRpcmVjdG9yeSAnJHtvcHRpb25zLmN3ZH0nYCk7XG5cdFx0dGhyb3cgZXJyO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRwa2csXG5cdFx0d3M6IGhhc1dvcmtzcGFjZSxcblx0XHRyb290OiBoYXNXb3Jrc3BhY2UgPT0gbnVsbCA/IHBrZyA6IGhhc1dvcmtzcGFjZSxcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24geWFybkxvY2tEaWZmKHlhcm5sb2NrX29sZDogc3RyaW5nLCB5YXJubG9ja19uZXc6IHN0cmluZyk6IHN0cmluZ1xue1xuXHRsZXQgcjI6IHN0cmluZ1tdID0gW107XG5cblx0bGV0IHIgPSBEaWZmU2VydmljZS5idWlsZERpZmYoW3lhcm5sb2NrX29sZF0sIFt5YXJubG9ja19uZXddKVxuXHRcdC5tYXAoRm9ybWF0dGVyU2VydmljZS5idWlsZERpZmZUYWJsZSlcblx0XHQubWFwKHIgPT4gcjIucHVzaChyKSlcblx0O1xuXG5cdHJldHVybiByMlswXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZzWWFybkxvY2socm9vdDogc3RyaW5nKVxue1xuXHRsZXQgeWFybmxvY2tfZmlsZSA9IHBhdGguam9pbihyb290LCAneWFybi5sb2NrJyk7XG5cblx0bGV0IHlhcm5sb2NrX2V4aXN0cyA9IGZzLmV4aXN0c1N5bmMoeWFybmxvY2tfZmlsZSk7XG5cblx0bGV0IHlhcm5sb2NrX29sZCA9IHlhcm5sb2NrX2V4aXN0cyAmJiBmcy5yZWFkRmlsZVN5bmMoeWFybmxvY2tfZmlsZSwgJ3V0ZjgnKSB8fCBudWxsO1xuXG5cdHJldHVybiB7XG5cdFx0eWFybmxvY2tfZmlsZSxcblx0XHR5YXJubG9ja19leGlzdHMsXG5cdFx0eWFybmxvY2tfb2xkLFxuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsYXp5RmxhZ3Moa2V5czogc3RyaW5nW10sIGFyZ3Y6IHtcblx0W2s6IHN0cmluZ106IGJvb2xlYW4sXG59KVxue1xuXHRyZXR1cm4ga2V5cy5tYXAoa2V5ID0+IGFyZ3Zba2V5XSAmJiAnLS0nICsga2V5KVxufVxuXG5leHBvcnQgY29uc3QgY2hhbGtCeUNvbnNvbGUgPSBjcmVhdGVGbkNoYWxrQnlDb25zb2xlKGNvbnNvbGUpO1xuXG5leHBvcnQgZGVmYXVsdCBleHBvcnRzIGFzIHR5cGVvZiBpbXBvcnQoJy4vaW5kZXgnKTtcbiJdfQ==