"use strict";
/**
 * Created by user on 2019/4/30.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.yargsProcessExit = exports.printRootData = exports.chalkByConsole = exports.lazyFlags = exports.filterYargsArguments = exports.fsYarnLock = exports.pathEqual = exports.pathNormalize = exports.findRoot = exports.consoleDebug = exports.console = void 0;
const path = require("upath2");
const fs = require("fs-extra");
const debug_color2_1 = require("debug-color2");
const util_1 = require("debug-color2/lib/util");
const package_dts_1 = require("@ts-type/package-dts");
const find_root_1 = require("@yarn-tool/find-root");
Object.defineProperty(exports, "findRoot", { enumerable: true, get: function () { return find_root_1.findRoot; } });
exports.console = new debug_color2_1.Console2();
exports.consoleDebug = new debug_color2_1.Console2(null, {
    label: true,
    time: true,
});
function pathNormalize(input) {
    return path.normalize(input);
}
exports.pathNormalize = pathNormalize;
function pathEqual(a, b) {
    return path.normalize(a) === path.normalize(b);
}
exports.pathEqual = pathEqual;
function fsYarnLock(root) {
    let yarnlock_file = path.join(root, 'yarn.lock');
    let yarnlock_exists = fs.existsSync(yarnlock_file);
    let yarnlock_old = yarnlock_exists && fs.readFileSync(yarnlock_file, 'utf8') || null;
    return {
        yarnlock_file,
        yarnlock_exists,
        yarnlock_old,
    };
}
exports.fsYarnLock = fsYarnLock;
function filterYargsArguments(argv, list) {
    let ls = Object.entries(argv);
    if (Array.isArray(list)) {
        ls = ls
            .filter(([key, value]) => {
            return list.includes(key);
        });
    }
    else {
        ls = ls
            .filter(([key, value]) => {
            return list(key, value);
        });
    }
    return ls.reduce((a, [key, value]) => {
        // @ts-ignore
        a[key] = value;
        return a;
    }, {});
}
exports.filterYargsArguments = filterYargsArguments;
function lazyFlags(keys, argv) {
    return keys.reduce((a, key) => {
        if (argv[key]) {
            a.push('--' + key);
        }
        return a;
    }, []);
}
exports.lazyFlags = lazyFlags;
exports.chalkByConsole = util_1.createFnChalkByConsole(exports.console);
function printRootData(rootData, argv) {
    let doWorkspace = !rootData.isWorkspace && rootData.hasWorkspace;
    let pkg_file = path.join(rootData.pkg, 'package.json');
    let pkg_data = package_dts_1.readPackageJson(pkg_file);
    exports.consoleDebug.info(`${pkg_data.name}@${pkg_data.version}`, path.relative(doWorkspace ? rootData.ws : argv.cwd, rootData.pkg));
}
exports.printRootData = printRootData;
function yargsProcessExit(msg, code = 1) {
    if (!(msg instanceof Error)) {
        msg = new Error(msg);
        // @ts-ignore
        msg.code = code;
    }
    exports.console.error(msg.message);
    require('yargs').exit(code, msg);
    process.exit(code);
}
exports.yargsProcessExit = yargsProcessExit;
exports.default = exports;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7OztBQUlILCtCQUFnQztBQUNoQywrQkFBZ0M7QUFDaEMsK0NBQXdDO0FBQ3hDLGdEQUErRDtBQUMvRCxzREFBdUQ7QUFHdkQsb0RBQWdEO0FBU3ZDLHlGQVRBLG9CQUFRLE9BU0E7QUFQSixRQUFBLE9BQU8sR0FBRyxJQUFJLHVCQUFRLEVBQUUsQ0FBQztBQUV6QixRQUFBLFlBQVksR0FBRyxJQUFJLHVCQUFRLENBQUMsSUFBSSxFQUFFO0lBQzlDLEtBQUssRUFBRSxJQUFJO0lBQ1gsSUFBSSxFQUFFLElBQUk7Q0FDVixDQUFDLENBQUM7QUFJSCxTQUFnQixhQUFhLENBQUMsS0FBYTtJQUUxQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDN0IsQ0FBQztBQUhELHNDQUdDO0FBRUQsU0FBZ0IsU0FBUyxDQUFDLENBQVMsRUFBRSxDQUFTO0lBRTdDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQy9DLENBQUM7QUFIRCw4QkFHQztBQUVELFNBQWdCLFVBQVUsQ0FBQyxJQUFZO0lBRXRDLElBQUksYUFBYSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBRWpELElBQUksZUFBZSxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7SUFFbkQsSUFBSSxZQUFZLEdBQUcsZUFBZSxJQUFJLEVBQUUsQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQztJQUVyRixPQUFPO1FBQ04sYUFBYTtRQUNiLGVBQWU7UUFDZixZQUFZO0tBQ1osQ0FBQTtBQUNGLENBQUM7QUFiRCxnQ0FhQztBQUVELFNBQWdC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Ii8qKlxuICogQ3JlYXRlZCBieSB1c2VyIG9uIDIwMTkvNC8zMC5cbiAqL1xuXG5pbXBvcnQgZmluZFlhcm5Xb3Jrc3BhY2VSb290ID0gcmVxdWlyZSgnZmluZC15YXJuLXdvcmtzcGFjZS1yb290MicpO1xuaW1wb3J0IHBrZ0RpciA9IHJlcXVpcmUoJ3BrZy1kaXInKTtcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgndXBhdGgyJyk7XG5pbXBvcnQgZnMgPSByZXF1aXJlKCdmcy1leHRyYScpO1xuaW1wb3J0IHsgQ29uc29sZTIgfSBmcm9tICdkZWJ1Zy1jb2xvcjInO1xuaW1wb3J0IHsgY3JlYXRlRm5DaGFsa0J5Q29uc29sZSB9IGZyb20gJ2RlYnVnLWNvbG9yMi9saWIvdXRpbCc7XG5pbXBvcnQgeyByZWFkUGFja2FnZUpzb24gfSBmcm9tICdAdHMtdHlwZS9wYWNrYWdlLWR0cyc7XG5pbXBvcnQgeyBBcmd1bWVudHMgfSBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBJVW5wYWNrTXlZYXJnc0FyZ3YgfSBmcm9tICcuL2NtZF9kaXInO1xuaW1wb3J0IHsgZmluZFJvb3QgfSBmcm9tICdAeWFybi10b29sL2ZpbmQtcm9vdCc7XG5cbmV4cG9ydCBjb25zdCBjb25zb2xlID0gbmV3IENvbnNvbGUyKCk7XG5cbmV4cG9ydCBjb25zdCBjb25zb2xlRGVidWcgPSBuZXcgQ29uc29sZTIobnVsbCwge1xuXHRsYWJlbDogdHJ1ZSxcblx0dGltZTogdHJ1ZSxcbn0pO1xuXG5leHBvcnQgeyBmaW5kUm9vdCB9XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXRoTm9ybWFsaXplKGlucHV0OiBzdHJpbmcpXG57XG5cdHJldHVybiBwYXRoLm5vcm1hbGl6ZShpbnB1dClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhdGhFcXVhbChhOiBzdHJpbmcsIGI6IHN0cmluZylcbntcblx0cmV0dXJuIHBhdGgubm9ybWFsaXplKGEpID09PSBwYXRoLm5vcm1hbGl6ZShiKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZnNZYXJuTG9jayhyb290OiBzdHJpbmcpXG57XG5cdGxldCB5YXJubG9ja19maWxlID0gcGF0aC5qb2luKHJvb3QsICd5YXJuLmxvY2snKTtcblxuXHRsZXQgeWFybmxvY2tfZXhpc3RzID0gZnMuZXhpc3RzU3luYyh5YXJubG9ja19maWxlKTtcblxuXHRsZXQgeWFybmxvY2tfb2xkID0geWFybmxvY2tfZXhpc3RzICYmIGZzLnJlYWRGaWxlU3luYyh5YXJubG9ja19maWxlLCAndXRmOCcpIHx8IG51bGw7XG5cblx0cmV0dXJuIHtcblx0XHR5YXJubG9ja19maWxlLFxuXHRcdHlhcm5sb2NrX2V4aXN0cyxcblx0XHR5YXJubG9ja19vbGQsXG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlcllhcmdzQXJndW1lbnRzPFQgZXh0ZW5kcyBBcmd1bWVudHM+KGFyZ3Y6IFQsIGxpc3Q6IHN0cmluZ1tdIHwgKChrZXk6IGtleW9mIFQsIHZhbHVlOiBUW2tleW9mIFRdKSA9PiBib29sZWFuKSk6IFBhcnRpYWw8VD5cbntcblx0bGV0IGxzID0gT2JqZWN0LmVudHJpZXMoYXJndik7XG5cblx0aWYgKEFycmF5LmlzQXJyYXkobGlzdCkpXG5cdHtcblx0XHRscyA9IGxzXG5cdFx0XHQuZmlsdGVyKChba2V5LCB2YWx1ZV0pID0+IHtcblx0XHRcdFx0cmV0dXJuIGxpc3QuaW5jbHVkZXMoa2V5KVxuXHRcdFx0fSlcblx0XHQ7XG5cdH1cblx0ZWxzZVxuXHR7XG5cdFx0bHMgPSBsc1xuXHRcdFx0LmZpbHRlcigoW2tleSwgdmFsdWVdKSA9PiB7XG5cdFx0XHRcdHJldHVybiBsaXN0KGtleSwgdmFsdWUgYXMgYW55KVxuXHRcdFx0fSlcblx0XHQ7XG5cdH1cblxuXHRyZXR1cm4gbHMucmVkdWNlKChhLCBba2V5LCB2YWx1ZV0pID0+IHtcblxuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRhW2tleV0gPSB2YWx1ZTtcblxuXHRcdHJldHVybiBhXG5cdH0sIHt9IGFzIFBhcnRpYWw8VD4pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsYXp5RmxhZ3Moa2V5czogc3RyaW5nW10sIGFyZ3Y6IHtcblx0W2s6IHN0cmluZ106IGJvb2xlYW4sXG59KTogc3RyaW5nW11cbntcblx0cmV0dXJuIGtleXMucmVkdWNlKChhLCBrZXkpID0+IHtcblx0XHRpZiAoYXJndltrZXldKVxuXHRcdHtcblx0XHRcdGEucHVzaCgnLS0nICsga2V5KTtcblx0XHR9XG5cdFx0cmV0dXJuIGE7XG5cdH0sIFtdIGFzIHN0cmluZ1tdKVxufVxuXG5leHBvcnQgY29uc3QgY2hhbGtCeUNvbnNvbGUgPSBjcmVhdGVGbkNoYWxrQnlDb25zb2xlKGNvbnNvbGUpO1xuXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRSb290RGF0YShyb290RGF0YTogUmV0dXJuVHlwZTx0eXBlb2YgZmluZFJvb3Q+LCBhcmd2OiBBcmd1bWVudHM8SVVucGFja015WWFyZ3NBcmd2Pilcbntcblx0bGV0IGRvV29ya3NwYWNlID0gIXJvb3REYXRhLmlzV29ya3NwYWNlICYmIHJvb3REYXRhLmhhc1dvcmtzcGFjZTtcblxuXHRsZXQgcGtnX2ZpbGUgPSBwYXRoLmpvaW4ocm9vdERhdGEucGtnLCAncGFja2FnZS5qc29uJyk7XG5cdGxldCBwa2dfZGF0YSA9IHJlYWRQYWNrYWdlSnNvbihwa2dfZmlsZSk7XG5cblx0Y29uc29sZURlYnVnLmluZm8oYCR7cGtnX2RhdGEubmFtZX1AJHtwa2dfZGF0YS52ZXJzaW9ufWAsIHBhdGgucmVsYXRpdmUoZG9Xb3Jrc3BhY2UgPyByb290RGF0YS53cyA6IGFyZ3YuY3dkLCByb290RGF0YS5wa2cpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHlhcmdzUHJvY2Vzc0V4aXQobXNnOiBzdHJpbmcgfCBFcnJvciwgY29kZTogbnVtYmVyID0gMSlcbntcblx0aWYgKCEobXNnIGluc3RhbmNlb2YgRXJyb3IpKVxuXHR7XG5cdFx0bXNnID0gbmV3IEVycm9yKG1zZyk7XG5cblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0bXNnLmNvZGUgPSBjb2RlXG5cdH1cblxuXHRjb25zb2xlLmVycm9yKG1zZy5tZXNzYWdlKTtcblx0cmVxdWlyZSgneWFyZ3MnKS5leGl0KGNvZGUsIG1zZyk7XG5cdHByb2Nlc3MuZXhpdChjb2RlKVxufVxuXG5leHBvcnQgZGVmYXVsdCBleHBvcnRzIGFzIHR5cGVvZiBpbXBvcnQoJy4vaW5kZXgnKTtcbiJdfQ==