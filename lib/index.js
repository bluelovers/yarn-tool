"use strict";
/**
 * Created by user on 2019/4/30.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const findYarnWorkspaceRoot = require("find-yarn-workspace-root2");
const pkgDir = require("pkg-dir");
const path = require("upath2");
const fs = require("fs-extra");
const debug_color2_1 = require("debug-color2");
const util_1 = require("debug-color2/lib/util");
const package_dts_1 = require("@ts-type/package-dts");
exports.console = new debug_color2_1.Console2();
exports.consoleDebug = new debug_color2_1.Console2(null, {
    label: true,
    time: true,
});
function pathNormalize(input) {
    return path.normalize(input);
}
exports.pathNormalize = pathNormalize;
function pathEqual(a, b) {
    return path.normalize(a) === path.normalize(b);
}
exports.pathEqual = pathEqual;
function findRoot(options, throwError) {
    if (!options.cwd) {
        throw new TypeError(`options.cwd is '${options.cwd}'`);
    }
    let ws;
    if (!options.skipCheckWorkspace) {
        ws = findYarnWorkspaceRoot(options.cwd);
    }
    let pkg = pkgDir.sync(options.cwd);
    if (pkg == null && (options.throwError || (options.throwError == null && throwError))) {
        let err = new TypeError(`can't found package root from target directory '${options.cwd}'`);
        throw err;
    }
    let hasWorkspace = ws && ws != null;
    let isWorkspace = hasWorkspace && pathEqual(ws, pkg);
    let root = hasWorkspace ? ws : pkg;
    return {
        pkg,
        ws,
        hasWorkspace,
        isWorkspace,
        root,
    };
}
exports.findRoot = findRoot;
function fsYarnLock(root) {
    let yarnlock_file = path.join(root, 'yarn.lock');
    let yarnlock_exists = fs.existsSync(yarnlock_file);
    let yarnlock_old = yarnlock_exists && fs.readFileSync(yarnlock_file, 'utf8') || null;
    return {
        yarnlock_file,
        yarnlock_exists,
        yarnlock_old,
    };
}
exports.fsYarnLock = fsYarnLock;
function lazyFlags(keys, argv) {
    return keys.map(key => argv[key] && '--' + key);
}
exports.lazyFlags = lazyFlags;
exports.chalkByConsole = util_1.createFnChalkByConsole(exports.console);
function printRootData(rootData, argv) {
    let doWorkspace = !rootData.isWorkspace && rootData.hasWorkspace;
    let pkg_file = path.join(rootData.pkg, 'package.json');
    let pkg_data = package_dts_1.readPackageJson(pkg_file);
    exports.consoleDebug.info(`${pkg_data.name}@${pkg_data.version}`, path.relative(doWorkspace ? rootData.ws : argv.cwd, rootData.pkg));
}
exports.printRootData = printRootData;
function yarnProcessExit(msg, code = 1) {
    exports.console.error(msg);
    process.exit(code);
}
exports.yarnProcessExit = yarnProcessExit;
exports.default = exports;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBRUgsbUVBQW9FO0FBQ3BFLGtDQUFtQztBQUNuQywrQkFBZ0M7QUFDaEMsK0JBQWdDO0FBQ2hDLCtDQUF3QztBQUN4QyxnREFBK0Q7QUFDL0Qsc0RBQXVEO0FBSTFDLFFBQUEsT0FBTyxHQUFHLElBQUksdUJBQVEsRUFBRSxDQUFDO0FBRXpCLFFBQUEsWUFBWSxHQUFHLElBQUksdUJBQVEsQ0FBQyxJQUFJLEVBQUU7SUFDOUMsS0FBSyxFQUFFLElBQUk7SUFDWCxJQUFJLEVBQUUsSUFBSTtDQUNWLENBQUMsQ0FBQztBQUVILFNBQWdCLGFBQWEsQ0FBQyxLQUFhO0lBRTFDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUM3QixDQUFDO0FBSEQsc0NBR0M7QUFFRCxTQUFnQixTQUFTLENBQUMsQ0FBUyxFQUFFLENBQVM7SUFFN0MsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDL0MsQ0FBQztBQUhELDhCQUdDO0FBRUQsU0FBZ0IsUUFBUSxDQUFDLE9BSXhCLEVBQUUsVUFBb0I7SUFFdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQ2hCO1FBQ0MsTUFBTSxJQUFJLFNBQVMsQ0FBQyxtQkFBbUIsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUE7S0FDdEQ7SUFFRCxJQUFJLEVBQVUsQ0FBQztJQUVmLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEVBQy9CO1FBQ0MsRUFBRSxHQUFHLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUN4QztJQUVELElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRW5DLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxJQUFJLElBQUksSUFBSSxVQUFVLENBQUMsQ0FBQyxFQUNyRjtRQUNDLElBQUksR0FBRyxHQUFHLElBQUksU0FBUyxDQUFDLG1EQUFtRCxPQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUMzRixNQUFNLEdBQUcsQ0FBQztLQUNWO0lBRUQsSUFBSSxZQUFZLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxJQUFJLENBQUM7SUFDcEMsSUFBSSxXQUFXLEdBQUcsWUFBWSxJQUFJLFNBQVMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDckQsSUFBSSxJQUFJLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUVuQyxPQUFPO1FBQ04sR0FBRztRQUNILEVBQUU7UUFDRixZQUFZO1FBQ1osV0FBVztRQUNYLElBQUk7S0FDSixDQUFBO0FBQ0YsQ0FBQztBQXJDRCw0QkFxQ0M7QUFFRCxTQUFnQixVQUFVLENBQUMsSUFBWTtJQUV0QyxJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztJQUVqRCxJQUFJLGVBQWUsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRW5ELElBQUksWUFBWSxHQUFHLGVBQWUsSUFBSSxFQUFFLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUM7SUFFckYsT0FBTztRQUNOLGFBQWE7UUFDYixlQUFlO1FBQ2YsWUFBWTtLQUNaLENBQUE7QUFDRixDQUFDO0FBYkQsZ0NBYUM7QUFFRCxTQUFnQixTQUFTLENBQUMsSUFBYyxFQUFFLElBRXpDO0lBRUEsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQTtBQUNoRCxDQUFDO0FBTEQsOEJBS0M7QUFFWSxRQUFBLGNBQWMsR0FBRyw2QkFBc0IsQ0FBQyxlQUFPLENBQUMsQ0FBQztBQUU5RCxTQUFnQixhQUFhLENBQUMsUUFBcUMsRUFBRSxJQUFtQztJQUV2RyxJQUFJLFdBQVcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxXQUFXLElBQUksUUFBUSxDQUFDLFlBQVksQ0FBQztJQUVqRSxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDdkQsSUFBSSxRQUFRLEdBQUcsNkJBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUV6QyxvQkFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxJQUFJLElBQUksUUFBUSxDQUFDLE9BQU8sRUFBRSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzlILENBQUM7QUFSRCxzQ0FRQztBQUVELFNBQWdCLGVBQWUsQ0FBQyxHQUFXLEVBQUUsT0FBZSxDQUFDO0lBRTVELGVBQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbkIsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNuQixDQUFDO0FBSkQsMENBSUM7QUFFRCxrQkFBZSxPQUFtQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAxOS80LzMwLlxuICovXG5cbmltcG9ydCBmaW5kWWFybldvcmtzcGFjZVJvb3QgPSByZXF1aXJlKCdmaW5kLXlhcm4td29ya3NwYWNlLXJvb3QyJyk7XG5pbXBvcnQgcGtnRGlyID0gcmVxdWlyZSgncGtnLWRpcicpO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKCd1cGF0aDInKTtcbmltcG9ydCBmcyA9IHJlcXVpcmUoJ2ZzLWV4dHJhJyk7XG5pbXBvcnQgeyBDb25zb2xlMiB9IGZyb20gJ2RlYnVnLWNvbG9yMic7XG5pbXBvcnQgeyBjcmVhdGVGbkNoYWxrQnlDb25zb2xlIH0gZnJvbSAnZGVidWctY29sb3IyL2xpYi91dGlsJztcbmltcG9ydCB7IHJlYWRQYWNrYWdlSnNvbiB9IGZyb20gJ0B0cy10eXBlL3BhY2thZ2UtZHRzJztcbmltcG9ydCB7IEFyZ3VtZW50cyB9IGZyb20gJ3lhcmdzJztcbmltcG9ydCB7IElVbnBhY2tNeVlhcmdzQXJndiB9IGZyb20gJy4vY21kX2Rpcic7XG5cbmV4cG9ydCBjb25zdCBjb25zb2xlID0gbmV3IENvbnNvbGUyKCk7XG5cbmV4cG9ydCBjb25zdCBjb25zb2xlRGVidWcgPSBuZXcgQ29uc29sZTIobnVsbCwge1xuXHRsYWJlbDogdHJ1ZSxcblx0dGltZTogdHJ1ZSxcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gcGF0aE5vcm1hbGl6ZShpbnB1dDogc3RyaW5nKVxue1xuXHRyZXR1cm4gcGF0aC5ub3JtYWxpemUoaW5wdXQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXRoRXF1YWwoYTogc3RyaW5nLCBiOiBzdHJpbmcpXG57XG5cdHJldHVybiBwYXRoLm5vcm1hbGl6ZShhKSA9PT0gcGF0aC5ub3JtYWxpemUoYilcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRSb290KG9wdGlvbnM6IHtcblx0Y3dkOiBzdHJpbmcsXG5cdHNraXBDaGVja1dvcmtzcGFjZT86IGJvb2xlYW4gfCBzdHJpbmcsXG5cdHRocm93RXJyb3I/OiBib29sZWFuLFxufSwgdGhyb3dFcnJvcj86IGJvb2xlYW4pXG57XG5cdGlmICghb3B0aW9ucy5jd2QpXG5cdHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGBvcHRpb25zLmN3ZCBpcyAnJHtvcHRpb25zLmN3ZH0nYClcblx0fVxuXG5cdGxldCB3czogc3RyaW5nO1xuXG5cdGlmICghb3B0aW9ucy5za2lwQ2hlY2tXb3Jrc3BhY2UpXG5cdHtcblx0XHR3cyA9IGZpbmRZYXJuV29ya3NwYWNlUm9vdChvcHRpb25zLmN3ZCk7XG5cdH1cblxuXHRsZXQgcGtnID0gcGtnRGlyLnN5bmMob3B0aW9ucy5jd2QpO1xuXG5cdGlmIChwa2cgPT0gbnVsbCAmJiAob3B0aW9ucy50aHJvd0Vycm9yIHx8IChvcHRpb25zLnRocm93RXJyb3IgPT0gbnVsbCAmJiB0aHJvd0Vycm9yKSkpXG5cdHtcblx0XHRsZXQgZXJyID0gbmV3IFR5cGVFcnJvcihgY2FuJ3QgZm91bmQgcGFja2FnZSByb290IGZyb20gdGFyZ2V0IGRpcmVjdG9yeSAnJHtvcHRpb25zLmN3ZH0nYCk7XG5cdFx0dGhyb3cgZXJyO1xuXHR9XG5cblx0bGV0IGhhc1dvcmtzcGFjZSA9IHdzICYmIHdzICE9IG51bGw7XG5cdGxldCBpc1dvcmtzcGFjZSA9IGhhc1dvcmtzcGFjZSAmJiBwYXRoRXF1YWwod3MsIHBrZyk7XG5cdGxldCByb290ID0gaGFzV29ya3NwYWNlID8gd3MgOiBwa2c7XG5cblx0cmV0dXJuIHtcblx0XHRwa2csXG5cdFx0d3MsXG5cdFx0aGFzV29ya3NwYWNlLFxuXHRcdGlzV29ya3NwYWNlLFxuXHRcdHJvb3QsXG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZzWWFybkxvY2socm9vdDogc3RyaW5nKVxue1xuXHRsZXQgeWFybmxvY2tfZmlsZSA9IHBhdGguam9pbihyb290LCAneWFybi5sb2NrJyk7XG5cblx0bGV0IHlhcm5sb2NrX2V4aXN0cyA9IGZzLmV4aXN0c1N5bmMoeWFybmxvY2tfZmlsZSk7XG5cblx0bGV0IHlhcm5sb2NrX29sZCA9IHlhcm5sb2NrX2V4aXN0cyAmJiBmcy5yZWFkRmlsZVN5bmMoeWFybmxvY2tfZmlsZSwgJ3V0ZjgnKSB8fCBudWxsO1xuXG5cdHJldHVybiB7XG5cdFx0eWFybmxvY2tfZmlsZSxcblx0XHR5YXJubG9ja19leGlzdHMsXG5cdFx0eWFybmxvY2tfb2xkLFxuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsYXp5RmxhZ3Moa2V5czogc3RyaW5nW10sIGFyZ3Y6IHtcblx0W2s6IHN0cmluZ106IGJvb2xlYW4sXG59KVxue1xuXHRyZXR1cm4ga2V5cy5tYXAoa2V5ID0+IGFyZ3Zba2V5XSAmJiAnLS0nICsga2V5KVxufVxuXG5leHBvcnQgY29uc3QgY2hhbGtCeUNvbnNvbGUgPSBjcmVhdGVGbkNoYWxrQnlDb25zb2xlKGNvbnNvbGUpO1xuXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRSb290RGF0YShyb290RGF0YTogUmV0dXJuVHlwZTx0eXBlb2YgZmluZFJvb3Q+LCBhcmd2OiBBcmd1bWVudHM8SVVucGFja015WWFyZ3NBcmd2Pilcbntcblx0bGV0IGRvV29ya3NwYWNlID0gIXJvb3REYXRhLmlzV29ya3NwYWNlICYmIHJvb3REYXRhLmhhc1dvcmtzcGFjZTtcblxuXHRsZXQgcGtnX2ZpbGUgPSBwYXRoLmpvaW4ocm9vdERhdGEucGtnLCAncGFja2FnZS5qc29uJyk7XG5cdGxldCBwa2dfZGF0YSA9IHJlYWRQYWNrYWdlSnNvbihwa2dfZmlsZSk7XG5cblx0Y29uc29sZURlYnVnLmluZm8oYCR7cGtnX2RhdGEubmFtZX1AJHtwa2dfZGF0YS52ZXJzaW9ufWAsIHBhdGgucmVsYXRpdmUoZG9Xb3Jrc3BhY2UgPyByb290RGF0YS53cyA6IGFyZ3YuY3dkLCByb290RGF0YS5wa2cpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHlhcm5Qcm9jZXNzRXhpdChtc2c6IHN0cmluZywgY29kZTogbnVtYmVyID0gMSlcbntcblx0Y29uc29sZS5lcnJvcihtc2cpO1xuXHRwcm9jZXNzLmV4aXQoY29kZSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXhwb3J0cyBhcyB0eXBlb2YgaW1wb3J0KCcuL2luZGV4Jyk7XG4iXX0=