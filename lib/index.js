"use strict";
/**
 * Created by user on 2019/4/30.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const findYarnWorkspaceRoot = require("find-yarn-workspace-root2");
const pkgDir = require("pkg-dir");
const path = require("path");
const fs = require("fs-extra");
const debug_color2_1 = require("debug-color2");
const util_1 = require("debug-color2/lib/util");
exports.console = new debug_color2_1.Console2();
exports.consoleDebug = new debug_color2_1.Console2(null, {
    label: true,
    time: true,
});
function findRoot(options, throwError) {
    if (!options.cwd) {
        throw new TypeError(`options.cwd is '${options.cwd}'`);
    }
    let ws;
    if (!options.skipCheckWorkspace) {
        ws = findYarnWorkspaceRoot(options.cwd);
    }
    let pkg = pkgDir.sync(options.cwd);
    if (pkg == null && (options.throwError || (options.throwError == null && throwError))) {
        let err = new TypeError(`can't found package root from target directory '${options.cwd}'`);
        throw err;
    }
    let hasWorkspace = ws && ws != null;
    let isWorkspace = hasWorkspace && ws === pkg;
    let root = hasWorkspace ? ws : pkg;
    return {
        pkg,
        ws,
        hasWorkspace,
        isWorkspace,
        root,
    };
}
exports.findRoot = findRoot;
function fsYarnLock(root) {
    let yarnlock_file = path.join(root, 'yarn.lock');
    let yarnlock_exists = fs.existsSync(yarnlock_file);
    let yarnlock_old = yarnlock_exists && fs.readFileSync(yarnlock_file, 'utf8') || null;
    return {
        yarnlock_file,
        yarnlock_exists,
        yarnlock_old,
    };
}
exports.fsYarnLock = fsYarnLock;
function lazyFlags(keys, argv) {
    return keys.map(key => argv[key] && '--' + key);
}
exports.lazyFlags = lazyFlags;
exports.chalkByConsole = util_1.createFnChalkByConsole(exports.console);
exports.default = exports;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBRUgsbUVBQW9FO0FBQ3BFLGtDQUFtQztBQUNuQyw2QkFBOEI7QUFDOUIsK0JBQWdDO0FBQ2hDLCtDQUF3QztBQUN4QyxnREFBK0Q7QUFFbEQsUUFBQSxPQUFPLEdBQUcsSUFBSSx1QkFBUSxFQUFFLENBQUM7QUFFekIsUUFBQSxZQUFZLEdBQUcsSUFBSSx1QkFBUSxDQUFDLElBQUksRUFBRTtJQUM5QyxLQUFLLEVBQUUsSUFBSTtJQUNYLElBQUksRUFBRSxJQUFJO0NBQ1YsQ0FBQyxDQUFDO0FBRUgsU0FBZ0IsUUFBUSxDQUFDLE9BSXhCLEVBQUUsVUFBb0I7SUFFdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQ2hCO1FBQ0MsTUFBTSxJQUFJLFNBQVMsQ0FBQyxtQkFBbUIsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUE7S0FDdEQ7SUFFRCxJQUFJLEVBQVUsQ0FBQztJQUVmLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEVBQy9CO1FBQ0MsRUFBRSxHQUFHLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUN4QztJQUVELElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRW5DLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxJQUFJLElBQUksSUFBSSxVQUFVLENBQUMsQ0FBQyxFQUNyRjtRQUNDLElBQUksR0FBRyxHQUFHLElBQUksU0FBUyxDQUFDLG1EQUFtRCxPQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUMzRixNQUFNLEdBQUcsQ0FBQztLQUNWO0lBRUQsSUFBSSxZQUFZLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxJQUFJLENBQUM7SUFDcEMsSUFBSSxXQUFXLEdBQUcsWUFBWSxJQUFJLEVBQUUsS0FBSyxHQUFHLENBQUM7SUFDN0MsSUFBSSxJQUFJLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUVuQyxPQUFPO1FBQ04sR0FBRztRQUNILEVBQUU7UUFDRixZQUFZO1FBQ1osV0FBVztRQUNYLElBQUk7S0FDSixDQUFBO0FBQ0YsQ0FBQztBQXJDRCw0QkFxQ0M7QUFFRCxTQUFnQixVQUFVLENBQUMsSUFBWTtJQUV0QyxJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztJQUVqRCxJQUFJLGVBQWUsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRW5ELElBQUksWUFBWSxHQUFHLGVBQWUsSUFBSSxFQUFFLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUM7SUFFckYsT0FBTztRQUNOLGFBQWE7UUFDYixlQUFlO1FBQ2YsWUFBWTtLQUNaLENBQUE7QUFDRixDQUFDO0FBYkQsZ0NBYUM7QUFFRCxTQUFnQixTQUFTLENBQUMsSUFBYyxFQUFFLElBRXpDO0lBRUEsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQTtBQUNoRCxDQUFDO0FBTEQsOEJBS0M7QUFFWSxRQUFBLGNBQWMsR0FBRyw2QkFBc0IsQ0FBQyxlQUFPLENBQUMsQ0FBQztBQUU5RCxrQkFBZSxPQUFtQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAxOS80LzMwLlxuICovXG5cbmltcG9ydCBmaW5kWWFybldvcmtzcGFjZVJvb3QgPSByZXF1aXJlKCdmaW5kLXlhcm4td29ya3NwYWNlLXJvb3QyJyk7XG5pbXBvcnQgcGtnRGlyID0gcmVxdWlyZSgncGtnLWRpcicpO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5pbXBvcnQgZnMgPSByZXF1aXJlKCdmcy1leHRyYScpO1xuaW1wb3J0IHsgQ29uc29sZTIgfSBmcm9tICdkZWJ1Zy1jb2xvcjInO1xuaW1wb3J0IHsgY3JlYXRlRm5DaGFsa0J5Q29uc29sZSB9IGZyb20gJ2RlYnVnLWNvbG9yMi9saWIvdXRpbCc7XG5cbmV4cG9ydCBjb25zdCBjb25zb2xlID0gbmV3IENvbnNvbGUyKCk7XG5cbmV4cG9ydCBjb25zdCBjb25zb2xlRGVidWcgPSBuZXcgQ29uc29sZTIobnVsbCwge1xuXHRsYWJlbDogdHJ1ZSxcblx0dGltZTogdHJ1ZSxcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gZmluZFJvb3Qob3B0aW9uczoge1xuXHRjd2Q6IHN0cmluZyxcblx0c2tpcENoZWNrV29ya3NwYWNlPzogYm9vbGVhbiB8IHN0cmluZyxcblx0dGhyb3dFcnJvcj86IGJvb2xlYW4sXG59LCB0aHJvd0Vycm9yPzogYm9vbGVhbilcbntcblx0aWYgKCFvcHRpb25zLmN3ZClcblx0e1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoYG9wdGlvbnMuY3dkIGlzICcke29wdGlvbnMuY3dkfSdgKVxuXHR9XG5cblx0bGV0IHdzOiBzdHJpbmc7XG5cblx0aWYgKCFvcHRpb25zLnNraXBDaGVja1dvcmtzcGFjZSlcblx0e1xuXHRcdHdzID0gZmluZFlhcm5Xb3Jrc3BhY2VSb290KG9wdGlvbnMuY3dkKTtcblx0fVxuXG5cdGxldCBwa2cgPSBwa2dEaXIuc3luYyhvcHRpb25zLmN3ZCk7XG5cblx0aWYgKHBrZyA9PSBudWxsICYmIChvcHRpb25zLnRocm93RXJyb3IgfHwgKG9wdGlvbnMudGhyb3dFcnJvciA9PSBudWxsICYmIHRocm93RXJyb3IpKSlcblx0e1xuXHRcdGxldCBlcnIgPSBuZXcgVHlwZUVycm9yKGBjYW4ndCBmb3VuZCBwYWNrYWdlIHJvb3QgZnJvbSB0YXJnZXQgZGlyZWN0b3J5ICcke29wdGlvbnMuY3dkfSdgKTtcblx0XHR0aHJvdyBlcnI7XG5cdH1cblxuXHRsZXQgaGFzV29ya3NwYWNlID0gd3MgJiYgd3MgIT0gbnVsbDtcblx0bGV0IGlzV29ya3NwYWNlID0gaGFzV29ya3NwYWNlICYmIHdzID09PSBwa2c7XG5cdGxldCByb290ID0gaGFzV29ya3NwYWNlID8gd3MgOiBwa2c7XG5cblx0cmV0dXJuIHtcblx0XHRwa2csXG5cdFx0d3MsXG5cdFx0aGFzV29ya3NwYWNlLFxuXHRcdGlzV29ya3NwYWNlLFxuXHRcdHJvb3QsXG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZzWWFybkxvY2socm9vdDogc3RyaW5nKVxue1xuXHRsZXQgeWFybmxvY2tfZmlsZSA9IHBhdGguam9pbihyb290LCAneWFybi5sb2NrJyk7XG5cblx0bGV0IHlhcm5sb2NrX2V4aXN0cyA9IGZzLmV4aXN0c1N5bmMoeWFybmxvY2tfZmlsZSk7XG5cblx0bGV0IHlhcm5sb2NrX29sZCA9IHlhcm5sb2NrX2V4aXN0cyAmJiBmcy5yZWFkRmlsZVN5bmMoeWFybmxvY2tfZmlsZSwgJ3V0ZjgnKSB8fCBudWxsO1xuXG5cdHJldHVybiB7XG5cdFx0eWFybmxvY2tfZmlsZSxcblx0XHR5YXJubG9ja19leGlzdHMsXG5cdFx0eWFybmxvY2tfb2xkLFxuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsYXp5RmxhZ3Moa2V5czogc3RyaW5nW10sIGFyZ3Y6IHtcblx0W2s6IHN0cmluZ106IGJvb2xlYW4sXG59KVxue1xuXHRyZXR1cm4ga2V5cy5tYXAoa2V5ID0+IGFyZ3Zba2V5XSAmJiAnLS0nICsga2V5KVxufVxuXG5leHBvcnQgY29uc3QgY2hhbGtCeUNvbnNvbGUgPSBjcmVhdGVGbkNoYWxrQnlDb25zb2xlKGNvbnNvbGUpO1xuXG5leHBvcnQgZGVmYXVsdCBleHBvcnRzIGFzIHR5cGVvZiBpbXBvcnQoJy4vaW5kZXgnKTtcbiJdfQ==