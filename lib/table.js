"use strict";
/**
 * Created by user on 2019/5/18.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const debug_color2_1 = require("debug-color2");
const Table = require("cli-table3");
const _ = require("lodash");
function createDependencyTable() {
    return new Table({
        colAligns: ['left', 'right', 'right', 'right'],
        chars: {
            top: '',
            'top-mid': '',
            'top-left': '',
            'top-right': '',
            bottom: '',
            'bottom-mid': '',
            'bottom-left': '',
            'bottom-right': '',
            left: '',
            'left-mid': '',
            mid: '',
            'mid-mid': '',
            right: '',
            'right-mid': '',
            middle: '',
        },
    });
}
function toDependencyTable(args) {
    const table = createDependencyTable();
    const rows = Object.keys(args.to).map(dep => {
        const from = args.from[dep] || '';
        const to = colorizeDiff(args.from[dep], args.to[dep] || '');
        return [dep, from, 'â†’', to];
    });
    rows.forEach(row => table.push(row));
    return table;
}
exports.toDependencyTable = toDependencyTable;
function colorizeDiff(from, to, con = index_1.console) {
    return debug_color2_1.chalkByConsole(function (chalk) {
        let leadingWildcard = '';
        // separate out leading ^ or ~
        if (/^[~^]/.test(to) && to[0] === from[0]) {
            leadingWildcard = to[0];
            to = to.slice(1);
            from = from.slice(1);
        }
        // split into parts
        const partsToColor = to.split('.');
        const partsToCompare = from.split('.');
        let i = _.findIndex(partsToColor, (part, i) => part !== partsToCompare[i]);
        i = i >= 0 ? i : partsToColor.length;
        // major = red (or any change before 1.0.0)
        // minor = cyan
        // patch = green
        const color = i === 0 || partsToColor[0] === '0' ? 'red' :
            i === 1 ? 'cyan' :
                'green';
        // if we are colorizing only part of the word, add a dot in the middle
        const middot = i > 0 && i < partsToColor.length ? '.' : '';
        return leadingWildcard +
            partsToColor.slice(0, i).join('.') +
            middot +
            chalk[color](partsToColor.slice(i).join('.'));
    }, con);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBRUgsbUNBQWtDO0FBQ2xDLCtDQUE4QztBQUc5QyxvQ0FBcUM7QUFDckMsNEJBQTZCO0FBRTdCLFNBQVMscUJBQXFCO0lBRTdCLE9BQU8sSUFBSSxLQUFLLENBQUM7UUFDaEIsU0FBUyxFQUFFLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDO1FBQzlDLEtBQUssRUFBRTtZQUNOLEdBQUcsRUFBRSxFQUFFO1lBQ1AsU0FBUyxFQUFFLEVBQUU7WUFDYixVQUFVLEVBQUUsRUFBRTtZQUNkLFdBQVcsRUFBRSxFQUFFO1lBQ2YsTUFBTSxFQUFFLEVBQUU7WUFDVixZQUFZLEVBQUUsRUFBRTtZQUNoQixhQUFhLEVBQUUsRUFBRTtZQUNqQixjQUFjLEVBQUUsRUFBRTtZQUNsQixJQUFJLEVBQUUsRUFBRTtZQUNSLFVBQVUsRUFBRSxFQUFFO1lBQ2QsR0FBRyxFQUFFLEVBQUU7WUFDUCxTQUFTLEVBQUUsRUFBRTtZQUNiLEtBQUssRUFBRSxFQUFFO1lBQ1QsV0FBVyxFQUFFLEVBQUU7WUFDZixNQUFNLEVBQUUsRUFBRTtTQUNWO0tBQ0QsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQWdCLGlCQUFpQixDQUFDLElBR2pDO0lBRUEsTUFBTSxLQUFLLEdBQUcscUJBQXFCLEVBQUUsQ0FBQztJQUN0QyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFFM0MsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDbEMsTUFBTSxFQUFFLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUM1RCxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDN0IsQ0FBQyxDQUFDLENBQUM7SUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFVLENBQUMsQ0FBQyxDQUFDO0lBQzVDLE9BQU8sS0FBSyxDQUFDO0FBQ2QsQ0FBQztBQWRELDhDQWNDO0FBRUQsU0FBUyxZQUFZLENBQUMsSUFBWSxFQUFFLEVBQVUsRUFBRSxHQUFHLEdBQUcsZUFBTztJQUU1RCxPQUFPLDZCQUFjLENBQUMsVUFBVSxLQUFLO1FBRXBDLElBQUksZUFBZSxHQUFHLEVBQUUsQ0FBQztRQUV6Qiw4QkFBOEI7UUFDOUIsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ3pDO1lBQ0MsZUFBZSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4QixFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQixJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNyQjtRQUVELG1CQUFtQjtRQUNuQixNQUFNLFlBQVksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25DLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFdkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLEtBQUssY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0UsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztRQUVyQywyQ0FBMkM7UUFDM0MsZUFBZTtRQUNmLGdCQUFnQjtRQUNoQixNQUFNLEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLFlBQVksQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3pELENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNqQixPQUFPLENBQUM7UUFFVixzRUFBc0U7UUFDdEUsTUFBTSxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFM0QsT0FBTyxlQUFlO1lBQ3JCLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7WUFDbEMsTUFBTTtZQUNOLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2hELENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNULENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgdXNlciBvbiAyMDE5LzUvMTguXG4gKi9cblxuaW1wb3J0IHsgY29uc29sZSB9IGZyb20gJy4vaW5kZXgnO1xuaW1wb3J0IHsgY2hhbGtCeUNvbnNvbGUgfSBmcm9tICdkZWJ1Zy1jb2xvcjInO1xuaW1wb3J0IHsgSURlcGVuZGVuY3kgfSBmcm9tICcuL2NsaS9uY3UnO1xuXG5pbXBvcnQgVGFibGUgPSByZXF1aXJlKCdjbGktdGFibGUzJyk7XG5pbXBvcnQgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuXG5mdW5jdGlvbiBjcmVhdGVEZXBlbmRlbmN5VGFibGUoKVxue1xuXHRyZXR1cm4gbmV3IFRhYmxlKHtcblx0XHRjb2xBbGlnbnM6IFsnbGVmdCcsICdyaWdodCcsICdyaWdodCcsICdyaWdodCddLFxuXHRcdGNoYXJzOiB7XG5cdFx0XHR0b3A6ICcnLFxuXHRcdFx0J3RvcC1taWQnOiAnJyxcblx0XHRcdCd0b3AtbGVmdCc6ICcnLFxuXHRcdFx0J3RvcC1yaWdodCc6ICcnLFxuXHRcdFx0Ym90dG9tOiAnJyxcblx0XHRcdCdib3R0b20tbWlkJzogJycsXG5cdFx0XHQnYm90dG9tLWxlZnQnOiAnJyxcblx0XHRcdCdib3R0b20tcmlnaHQnOiAnJyxcblx0XHRcdGxlZnQ6ICcnLFxuXHRcdFx0J2xlZnQtbWlkJzogJycsXG5cdFx0XHRtaWQ6ICcnLFxuXHRcdFx0J21pZC1taWQnOiAnJyxcblx0XHRcdHJpZ2h0OiAnJyxcblx0XHRcdCdyaWdodC1taWQnOiAnJyxcblx0XHRcdG1pZGRsZTogJycsXG5cdFx0fSxcblx0fSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0RlcGVuZGVuY3lUYWJsZShhcmdzOiB7XG5cdGZyb206IElEZXBlbmRlbmN5LFxuXHR0bzogSURlcGVuZGVuY3ksXG59KVxue1xuXHRjb25zdCB0YWJsZSA9IGNyZWF0ZURlcGVuZGVuY3lUYWJsZSgpO1xuXHRjb25zdCByb3dzID0gT2JqZWN0LmtleXMoYXJncy50bykubWFwKGRlcCA9PlxuXHR7XG5cdFx0Y29uc3QgZnJvbSA9IGFyZ3MuZnJvbVtkZXBdIHx8ICcnO1xuXHRcdGNvbnN0IHRvID0gY29sb3JpemVEaWZmKGFyZ3MuZnJvbVtkZXBdLCBhcmdzLnRvW2RlcF0gfHwgJycpO1xuXHRcdHJldHVybiBbZGVwLCBmcm9tLCAn4oaSJywgdG9dO1xuXHR9KTtcblx0cm93cy5mb3JFYWNoKHJvdyA9PiB0YWJsZS5wdXNoKHJvdyBhcyBhbnkpKTtcblx0cmV0dXJuIHRhYmxlO1xufVxuXG5mdW5jdGlvbiBjb2xvcml6ZURpZmYoZnJvbTogc3RyaW5nLCB0bzogc3RyaW5nLCBjb24gPSBjb25zb2xlKVxue1xuXHRyZXR1cm4gY2hhbGtCeUNvbnNvbGUoZnVuY3Rpb24gKGNoYWxrKVxuXHR7XG5cdFx0bGV0IGxlYWRpbmdXaWxkY2FyZCA9ICcnO1xuXG5cdFx0Ly8gc2VwYXJhdGUgb3V0IGxlYWRpbmcgXiBvciB+XG5cdFx0aWYgKC9eW35eXS8udGVzdCh0bykgJiYgdG9bMF0gPT09IGZyb21bMF0pXG5cdFx0e1xuXHRcdFx0bGVhZGluZ1dpbGRjYXJkID0gdG9bMF07XG5cdFx0XHR0byA9IHRvLnNsaWNlKDEpO1xuXHRcdFx0ZnJvbSA9IGZyb20uc2xpY2UoMSk7XG5cdFx0fVxuXG5cdFx0Ly8gc3BsaXQgaW50byBwYXJ0c1xuXHRcdGNvbnN0IHBhcnRzVG9Db2xvciA9IHRvLnNwbGl0KCcuJyk7XG5cdFx0Y29uc3QgcGFydHNUb0NvbXBhcmUgPSBmcm9tLnNwbGl0KCcuJyk7XG5cblx0XHRsZXQgaSA9IF8uZmluZEluZGV4KHBhcnRzVG9Db2xvciwgKHBhcnQsIGkpID0+IHBhcnQgIT09IHBhcnRzVG9Db21wYXJlW2ldKTtcblx0XHRpID0gaSA+PSAwID8gaSA6IHBhcnRzVG9Db2xvci5sZW5ndGg7XG5cblx0XHQvLyBtYWpvciA9IHJlZCAob3IgYW55IGNoYW5nZSBiZWZvcmUgMS4wLjApXG5cdFx0Ly8gbWlub3IgPSBjeWFuXG5cdFx0Ly8gcGF0Y2ggPSBncmVlblxuXHRcdGNvbnN0IGNvbG9yID0gaSA9PT0gMCB8fCBwYXJ0c1RvQ29sb3JbMF0gPT09ICcwJyA/ICdyZWQnIDpcblx0XHRcdGkgPT09IDEgPyAnY3lhbicgOlxuXHRcdFx0XHQnZ3JlZW4nO1xuXG5cdFx0Ly8gaWYgd2UgYXJlIGNvbG9yaXppbmcgb25seSBwYXJ0IG9mIHRoZSB3b3JkLCBhZGQgYSBkb3QgaW4gdGhlIG1pZGRsZVxuXHRcdGNvbnN0IG1pZGRvdCA9IGkgPiAwICYmIGkgPCBwYXJ0c1RvQ29sb3IubGVuZ3RoID8gJy4nIDogJyc7XG5cblx0XHRyZXR1cm4gbGVhZGluZ1dpbGRjYXJkICtcblx0XHRcdHBhcnRzVG9Db2xvci5zbGljZSgwLCBpKS5qb2luKCcuJykgK1xuXHRcdFx0bWlkZG90ICtcblx0XHRcdGNoYWxrW2NvbG9yXShwYXJ0c1RvQ29sb3Iuc2xpY2UoaSkuam9pbignLicpKTtcblx0fSwgY29uKTtcbn1cbiJdfQ==