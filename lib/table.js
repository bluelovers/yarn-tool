"use strict";
/**
 * Created by user on 2019/5/18.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const debug_color2_1 = require("debug-color2");
const Table = require("cli-table3");
const _ = require("lodash");
function createDependencyTable() {
    return new Table({
        colAligns: ['left', 'right', 'right', 'right'],
        chars: {
            top: '',
            'top-mid': '',
            'top-left': '',
            'top-right': '',
            bottom: '',
            'bottom-mid': '',
            'bottom-left': '',
            'bottom-right': '',
            left: '',
            'left-mid': '',
            mid: '',
            'mid-mid': '',
            right: '',
            'right-mid': '',
            middle: '',
        },
    });
}
exports.createDependencyTable = createDependencyTable;
function toDependencyTable(args) {
    const table = createDependencyTable();
    const rows = Object.keys(args.to).map(dep => {
        const from = args.from[dep] || '';
        const to = colorizeDiff(args.from[dep], args.to[dep] || '');
        return [dep, from, 'â†’', to];
    });
    rows.forEach(row => table.push(row));
    return table;
}
exports.toDependencyTable = toDependencyTable;
function colorizeDiff(from, to, _colors = ['red', 'cyan', 'green'], con = index_1.console) {
    return debug_color2_1.chalkByConsole(function (chalk) {
        let leadingWildcard = '';
        // separate out leading ^ or ~
        if (/^[~^]/.test(to) && to[0] === from[0]) {
            leadingWildcard = to[0];
            to = to.slice(1);
            from = from.slice(1);
        }
        // split into parts
        const partsToColor = to.split('.');
        const partsToCompare = from.split('.');
        let i = _.findIndex(partsToColor, (part, i) => part !== partsToCompare[i]);
        i = i >= 0 ? i : partsToColor.length;
        // major = red (or any change before 1.0.0)
        // minor = cyan
        // patch = green
        const color = i === 0 || partsToColor[0] === '0' ? _colors[0] :
            i === 1 ? _colors[1] :
                _colors[2];
        // if we are colorizing only part of the word, add a dot in the middle
        const middot = i > 0 && i < partsToColor.length ? '.' : '';
        return leadingWildcard +
            partsToColor.slice(0, i).join('.') +
            middot +
            chalk[color](partsToColor.slice(i).join('.'));
    }, con);
}
exports.colorizeDiff = colorizeDiff;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBRUgsbUNBQWtDO0FBQ2xDLCtDQUE4QztBQUc5QyxvQ0FBcUM7QUFDckMsNEJBQTZCO0FBRzdCLFNBQWdCLHFCQUFxQjtJQUVwQyxPQUFPLElBQUksS0FBSyxDQUFDO1FBQ2hCLFNBQVMsRUFBRSxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQztRQUM5QyxLQUFLLEVBQUU7WUFDTixHQUFHLEVBQUUsRUFBRTtZQUNQLFNBQVMsRUFBRSxFQUFFO1lBQ2IsVUFBVSxFQUFFLEVBQUU7WUFDZCxXQUFXLEVBQUUsRUFBRTtZQUNmLE1BQU0sRUFBRSxFQUFFO1lBQ1YsWUFBWSxFQUFFLEVBQUU7WUFDaEIsYUFBYSxFQUFFLEVBQUU7WUFDakIsY0FBYyxFQUFFLEVBQUU7WUFDbEIsSUFBSSxFQUFFLEVBQUU7WUFDUixVQUFVLEVBQUUsRUFBRTtZQUNkLEdBQUcsRUFBRSxFQUFFO1lBQ1AsU0FBUyxFQUFFLEVBQUU7WUFDYixLQUFLLEVBQUUsRUFBRTtZQUNULFdBQVcsRUFBRSxFQUFFO1lBQ2YsTUFBTSxFQUFFLEVBQUU7U0FDVjtLQUNELENBQUMsQ0FBQztBQUNKLENBQUM7QUF0QkQsc0RBc0JDO0FBRUQsU0FBZ0IsaUJBQWlCLENBQUMsSUFHakM7SUFFQSxNQUFNLEtBQUssR0FBRyxxQkFBcUIsRUFBRSxDQUFDO0lBQ3RDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUUzQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNsQyxNQUFNLEVBQUUsR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzVELE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM3QixDQUFDLENBQUMsQ0FBQztJQUNILElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQVUsQ0FBQyxDQUFDLENBQUM7SUFDNUMsT0FBTyxLQUFLLENBQUM7QUFDZCxDQUFDO0FBZEQsOENBY0M7QUFFRCxTQUFnQixZQUFZLENBQUMsSUFBWSxFQUFFLEVBQVUsRUFDcEQsVUFFSyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLEVBQUUsR0FBRyxHQUFHLGVBQU87SUFHNUMsT0FBTyw2QkFBYyxDQUFDLFVBQVUsS0FBSztRQUVwQyxJQUFJLGVBQWUsR0FBRyxFQUFFLENBQUM7UUFFekIsOEJBQThCO1FBQzlCLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUN6QztZQUNDLGVBQWUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakIsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDckI7UUFFRCxtQkFBbUI7UUFDbkIsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuQyxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXZDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxLQUFLLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7UUFFckMsMkNBQTJDO1FBQzNDLGVBQWU7UUFDZixnQkFBZ0I7UUFDaEIsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5RCxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckIsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWIsc0VBQXNFO1FBQ3RFLE1BQU0sTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBRTNELE9BQU8sZUFBZTtZQUNyQixZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQ2xDLE1BQU07WUFDTixLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNoRCxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDVCxDQUFDO0FBeENELG9DQXdDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSB1c2VyIG9uIDIwMTkvNS8xOC5cbiAqL1xuXG5pbXBvcnQgeyBjb25zb2xlIH0gZnJvbSAnLi9pbmRleCc7XG5pbXBvcnQgeyBjaGFsa0J5Q29uc29sZSB9IGZyb20gJ2RlYnVnLWNvbG9yMic7XG5pbXBvcnQgeyBJRGVwZW5kZW5jeSB9IGZyb20gJy4vY2xpL25jdSc7XG5cbmltcG9ydCBUYWJsZSA9IHJlcXVpcmUoJ2NsaS10YWJsZTMnKTtcbmltcG9ydCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5pbXBvcnQgeyBJU3R5bGVzQ29sb3JOYW1lcyB9IGZyb20gJ2RlYnVnLWNvbG9yMi9saWIvc3R5bGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURlcGVuZGVuY3lUYWJsZSgpXG57XG5cdHJldHVybiBuZXcgVGFibGUoe1xuXHRcdGNvbEFsaWduczogWydsZWZ0JywgJ3JpZ2h0JywgJ3JpZ2h0JywgJ3JpZ2h0J10sXG5cdFx0Y2hhcnM6IHtcblx0XHRcdHRvcDogJycsXG5cdFx0XHQndG9wLW1pZCc6ICcnLFxuXHRcdFx0J3RvcC1sZWZ0JzogJycsXG5cdFx0XHQndG9wLXJpZ2h0JzogJycsXG5cdFx0XHRib3R0b206ICcnLFxuXHRcdFx0J2JvdHRvbS1taWQnOiAnJyxcblx0XHRcdCdib3R0b20tbGVmdCc6ICcnLFxuXHRcdFx0J2JvdHRvbS1yaWdodCc6ICcnLFxuXHRcdFx0bGVmdDogJycsXG5cdFx0XHQnbGVmdC1taWQnOiAnJyxcblx0XHRcdG1pZDogJycsXG5cdFx0XHQnbWlkLW1pZCc6ICcnLFxuXHRcdFx0cmlnaHQ6ICcnLFxuXHRcdFx0J3JpZ2h0LW1pZCc6ICcnLFxuXHRcdFx0bWlkZGxlOiAnJyxcblx0XHR9LFxuXHR9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvRGVwZW5kZW5jeVRhYmxlKGFyZ3M6IHtcblx0ZnJvbTogSURlcGVuZGVuY3ksXG5cdHRvOiBJRGVwZW5kZW5jeSxcbn0pXG57XG5cdGNvbnN0IHRhYmxlID0gY3JlYXRlRGVwZW5kZW5jeVRhYmxlKCk7XG5cdGNvbnN0IHJvd3MgPSBPYmplY3Qua2V5cyhhcmdzLnRvKS5tYXAoZGVwID0+XG5cdHtcblx0XHRjb25zdCBmcm9tID0gYXJncy5mcm9tW2RlcF0gfHwgJyc7XG5cdFx0Y29uc3QgdG8gPSBjb2xvcml6ZURpZmYoYXJncy5mcm9tW2RlcF0sIGFyZ3MudG9bZGVwXSB8fCAnJyk7XG5cdFx0cmV0dXJuIFtkZXAsIGZyb20sICfihpInLCB0b107XG5cdH0pO1xuXHRyb3dzLmZvckVhY2gocm93ID0+IHRhYmxlLnB1c2gocm93IGFzIGFueSkpO1xuXHRyZXR1cm4gdGFibGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb2xvcml6ZURpZmYoZnJvbTogc3RyaW5nLCB0bzogc3RyaW5nLFxuXHRfY29sb3JzOiBbXG5cdFx0SVN0eWxlc0NvbG9yTmFtZXMsIElTdHlsZXNDb2xvck5hbWVzLCBJU3R5bGVzQ29sb3JOYW1lc1xuXHRcdF0gPSBbJ3JlZCcsICdjeWFuJywgJ2dyZWVuJ10sIGNvbiA9IGNvbnNvbGUsXG4pXG57XG5cdHJldHVybiBjaGFsa0J5Q29uc29sZShmdW5jdGlvbiAoY2hhbGspXG5cdHtcblx0XHRsZXQgbGVhZGluZ1dpbGRjYXJkID0gJyc7XG5cblx0XHQvLyBzZXBhcmF0ZSBvdXQgbGVhZGluZyBeIG9yIH5cblx0XHRpZiAoL15bfl5dLy50ZXN0KHRvKSAmJiB0b1swXSA9PT0gZnJvbVswXSlcblx0XHR7XG5cdFx0XHRsZWFkaW5nV2lsZGNhcmQgPSB0b1swXTtcblx0XHRcdHRvID0gdG8uc2xpY2UoMSk7XG5cdFx0XHRmcm9tID0gZnJvbS5zbGljZSgxKTtcblx0XHR9XG5cblx0XHQvLyBzcGxpdCBpbnRvIHBhcnRzXG5cdFx0Y29uc3QgcGFydHNUb0NvbG9yID0gdG8uc3BsaXQoJy4nKTtcblx0XHRjb25zdCBwYXJ0c1RvQ29tcGFyZSA9IGZyb20uc3BsaXQoJy4nKTtcblxuXHRcdGxldCBpID0gXy5maW5kSW5kZXgocGFydHNUb0NvbG9yLCAocGFydCwgaSkgPT4gcGFydCAhPT0gcGFydHNUb0NvbXBhcmVbaV0pO1xuXHRcdGkgPSBpID49IDAgPyBpIDogcGFydHNUb0NvbG9yLmxlbmd0aDtcblxuXHRcdC8vIG1ham9yID0gcmVkIChvciBhbnkgY2hhbmdlIGJlZm9yZSAxLjAuMClcblx0XHQvLyBtaW5vciA9IGN5YW5cblx0XHQvLyBwYXRjaCA9IGdyZWVuXG5cdFx0Y29uc3QgY29sb3IgPSBpID09PSAwIHx8IHBhcnRzVG9Db2xvclswXSA9PT0gJzAnID8gX2NvbG9yc1swXSA6XG5cdFx0XHRpID09PSAxID8gX2NvbG9yc1sxXSA6XG5cdFx0XHRcdF9jb2xvcnNbMl07XG5cblx0XHQvLyBpZiB3ZSBhcmUgY29sb3JpemluZyBvbmx5IHBhcnQgb2YgdGhlIHdvcmQsIGFkZCBhIGRvdCBpbiB0aGUgbWlkZGxlXG5cdFx0Y29uc3QgbWlkZG90ID0gaSA+IDAgJiYgaSA8IHBhcnRzVG9Db2xvci5sZW5ndGggPyAnLicgOiAnJztcblxuXHRcdHJldHVybiBsZWFkaW5nV2lsZGNhcmQgK1xuXHRcdFx0cGFydHNUb0NvbG9yLnNsaWNlKDAsIGkpLmpvaW4oJy4nKSArXG5cdFx0XHRtaWRkb3QgK1xuXHRcdFx0Y2hhbGtbY29sb3JdKHBhcnRzVG9Db2xvci5zbGljZShpKS5qb2luKCcuJykpO1xuXHR9LCBjb24pO1xufVxuIl19