"use strict";
/**
 * Created by user on 2019/5/18.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const crossSpawn = require("cross-spawn-extra");
const index_1 = require("./index");
function requireResolve(name) {
    try {
        let ret = require.resolve(name);
        if (ret) {
            return ret;
        }
    }
    catch (e) {
    }
    return null;
}
exports.requireResolve = requireResolve;
function checkModileExists(argv) {
    let ret = requireResolve(argv.requireName || argv.name);
    if (!ret) {
        index_1.console.magenta.log(`module '${argv.name}' not exists`);
        index_1.console.log(`please use follow cmd for install`);
        index_1.console.cyan.log(`\n\t${argv.installCmd || 'npm install -g'} ${argv.name}\n`);
        if (argv.msg) {
            index_1.console.log(`${argv.msg}\n`);
        }
        return null;
    }
    return ret;
}
exports.checkModileExists = checkModileExists;
function _crossSpawnOther(cp) {
    // @ts-ignore
    if (cp.error) {
        // @ts-ignore
        throw cp.error;
    }
    // @ts-ignore
    if (cp.signal) {
        // @ts-ignore
        index_1.consoleDebug.error(`cp.signal`, cp.signal);
        process.exit(1);
    }
    return cp;
}
exports._crossSpawnOther = _crossSpawnOther;
function crossSpawnOther(bin, cmd_list, argv) {
    let cp = crossSpawn.sync('npm', cmd_list.filter(v => v != null), {
        stdio: 'inherit',
        cwd: argv.cwd,
    });
    return _crossSpawnOther(cp);
}
exports.crossSpawnOther = crossSpawnOther;
function crossSpawnOtherAsync(bin, cmd_list, argv) {
    return crossSpawn.async('npm', cmd_list.filter(v => v != null), {
        stdio: 'inherit',
        cwd: argv.cwd,
    })
        .tap(_crossSpawnOther);
}
exports.crossSpawnOtherAsync = crossSpawnOtherAsync;
function processArgvSlice(keys_input, argv_input = process.argv, startindex = 2) {
    if (typeof keys_input === 'string') {
        keys_input = [keys_input];
    }
    let argv_before = argv_input.slice(0, startindex);
    let argv_after = argv_input.slice(startindex);
    let idx = keys_input.reduce(function (a, b) {
        let i = argv_after.indexOf(b);
        if (a === -1) {
            return i;
        }
        else if (i !== -1) {
            return Math.min(i, a);
        }
        return a;
    }, -1);
    let argv = (idx > -1) ? argv_after.slice(idx + 1) : null;
    let key = (idx > -1) ? argv_after[idx] : null;
    let idx_rebase = (idx > -1) ? idx + startindex : -1;
    return {
        idx_rebase,
        idx,
        argv_input,
        argv_before,
        argv_after,
        argv,
        keys_input,
        key,
    };
}
exports.processArgvSlice = processArgvSlice;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bhd24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzcGF3bi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBRUgsZ0RBQWlEO0FBR2pELG1DQUFnRDtBQUdoRCxTQUFnQixjQUFjLENBQUMsSUFBWTtJQUUxQyxJQUNBO1FBQ0MsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVoQyxJQUFJLEdBQUcsRUFDUDtZQUNDLE9BQU8sR0FBRyxDQUFBO1NBQ1Y7S0FDRDtJQUNELE9BQU8sQ0FBQyxFQUNSO0tBRUM7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNiLENBQUM7QUFqQkQsd0NBaUJDO0FBRUQsU0FBZ0IsaUJBQWlCLENBQUMsSUFLakM7SUFFQSxJQUFJLEdBQUcsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFeEQsSUFBSSxDQUFDLEdBQUcsRUFDUjtRQUNDLGVBQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxDQUFDLElBQUksY0FBYyxDQUFDLENBQUM7UUFDeEQsZUFBTyxDQUFDLEdBQUcsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1FBQ2pELGVBQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sSUFBSSxDQUFDLFVBQVUsSUFBSSxnQkFBZ0IsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQztRQUU5RSxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQ1o7WUFDQyxlQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDN0I7UUFFRCxPQUFPLElBQUksQ0FBQztLQUNaO0lBRUQsT0FBTyxHQUFHLENBQUM7QUFDWixDQUFDO0FBeEJELDhDQXdCQztBQUVELFNBQWdCLGdCQUFnQixDQUFJLEVBQUs7SUFFeEMsYUFBYTtJQUNiLElB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VUFBVTtRQUNWLEdBQUc7UUFDSCxVQUFVO1FBQ1YsV0FBVztRQUNYLFVBQVU7UUFDVixJQUFJO1FBQ0osVUFBVTtRQUNWLEdBQUc7S0FDSCxDQUFDO0FBQ0gsQ0FBQztBQTFDRCw0Q0EwQ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgdXNlciBvbiAyMDE5LzUvMTguXG4gKi9cblxuaW1wb3J0IGNyb3NzU3Bhd24gPSByZXF1aXJlKCdjcm9zcy1zcGF3bi1leHRyYScpO1xuaW1wb3J0ICogYXMgeWFyZ3MgZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgSVVucGFja015WWFyZ3NBcmd2IH0gZnJvbSAnLi9jbGknO1xuaW1wb3J0IHsgY29uc29sZURlYnVnLCBjb25zb2xlIH0gZnJvbSAnLi9pbmRleCc7XG5pbXBvcnQgQmx1ZWJpcmQgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVxdWlyZVJlc29sdmUobmFtZTogc3RyaW5nKVxue1xuXHR0cnlcblx0e1xuXHRcdGxldCByZXQgPSByZXF1aXJlLnJlc29sdmUobmFtZSk7XG5cblx0XHRpZiAocmV0KVxuXHRcdHtcblx0XHRcdHJldHVybiByZXRcblx0XHR9XG5cdH1cblx0Y2F0Y2ggKGUpXG5cdHtcblxuXHR9XG5cblx0cmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja01vZGlsZUV4aXN0cyhhcmd2OiB7XG5cdG5hbWU6IHN0cmluZyxcblx0bXNnPzogc3RyaW5nLFxuXHRyZXF1aXJlTmFtZT86IHN0cmluZyxcblx0aW5zdGFsbENtZD86IHN0cmluZ1xufSlcbntcblx0bGV0IHJldCA9IHJlcXVpcmVSZXNvbHZlKGFyZ3YucmVxdWlyZU5hbWUgfHwgYXJndi5uYW1lKTtcblxuXHRpZiAoIXJldClcblx0e1xuXHRcdGNvbnNvbGUubWFnZW50YS5sb2coYG1vZHVsZSAnJHthcmd2Lm5hbWV9JyBub3QgZXhpc3RzYCk7XG5cdFx0Y29uc29sZS5sb2coYHBsZWFzZSB1c2UgZm9sbG93IGNtZCBmb3IgaW5zdGFsbGApO1xuXHRcdGNvbnNvbGUuY3lhbi5sb2coYFxcblxcdCR7YXJndi5pbnN0YWxsQ21kIHx8ICducG0gaW5zdGFsbCAtZyd9ICR7YXJndi5uYW1lfVxcbmApO1xuXG5cdFx0aWYgKGFyZ3YubXNnKVxuXHRcdHtcblx0XHRcdGNvbnNvbGUubG9nKGAke2FyZ3YubXNnfVxcbmApO1xuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9jcm9zc1NwYXduT3RoZXI8VD4oY3A6IFQpXG57XG5cdC8vIEB0cy1pZ25vcmVcblx0aWYgKGNwLmVycm9yKVxuXHR7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdHRocm93IGNwLmVycm9yXG5cdH1cblxuXHQvLyBAdHMtaWdub3JlXG5cdGlmIChjcC5zaWduYWwpXG5cdHtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0Y29uc29sZURlYnVnLmVycm9yKGBjcC5zaWduYWxgLCBjcC5zaWduYWwpO1xuXHRcdHByb2Nlc3MuZXhpdCgxKVxuXHR9XG5cblx0cmV0dXJuIGNwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3Jvc3NTcGF3bk90aGVyKGJpbjogc3RyaW5nLCBjbWRfbGlzdDogc3RyaW5nW10sIGFyZ3YpXG57XG5cdGxldCBjcCA9IGNyb3NzU3Bhd24uc3luYygnbnBtJywgY21kX2xpc3QuZmlsdGVyKHYgPT4gdiAhPSBudWxsKSwge1xuXHRcdHN0ZGlvOiAnaW5oZXJpdCcsXG5cdFx0Y3dkOiBhcmd2LmN3ZCxcblx0fSk7XG5cblx0cmV0dXJuIF9jcm9zc1NwYXduT3RoZXIoY3ApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3Jvc3NTcGF3bk90aGVyQXN5bmMoYmluOiBzdHJpbmcsIGNtZF9saXN0OiBzdHJpbmdbXSwgYXJndilcbntcblx0cmV0dXJuIGNyb3NzU3Bhd24uYXN5bmMoJ25wbScsIGNtZF9saXN0LmZpbHRlcih2ID0+IHYgIT0gbnVsbCksIHtcblx0XHRzdGRpbzogJ2luaGVyaXQnLFxuXHRcdGN3ZDogYXJndi5jd2QsXG5cdH0pXG5cdFx0LnRhcChfY3Jvc3NTcGF3bk90aGVyKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc0FyZ3ZTbGljZShrZXlzX2lucHV0OiBzdHJpbmcgfCBzdHJpbmdbXSwgYXJndl9pbnB1dCA9IHByb2Nlc3MuYXJndiwgc3RhcnRpbmRleDogbnVtYmVyID0gMilcbntcblx0aWYgKHR5cGVvZiBrZXlzX2lucHV0ID09PSAnc3RyaW5nJylcblx0e1xuXHRcdGtleXNfaW5wdXQgPSBba2V5c19pbnB1dF07XG5cdH1cblxuXHRsZXQgYXJndl9iZWZvcmUgPSBhcmd2X2lucHV0LnNsaWNlKDAsIHN0YXJ0aW5kZXgpO1xuXHRsZXQgYXJndl9hZnRlciA9IGFyZ3ZfaW5wdXQuc2xpY2Uoc3RhcnRpbmRleCk7XG5cblx0bGV0IGlkeCA9IGtleXNfaW5wdXQucmVkdWNlKGZ1bmN0aW9uIChhLCBiKVxuXHR7XG5cdFx0bGV0IGkgPSBhcmd2X2FmdGVyLmluZGV4T2YoYik7XG5cblx0XHRpZiAoYSA9PT0gLTEpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIGk7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKGkgIT09IC0xKVxuXHRcdHtcblx0XHRcdHJldHVybiBNYXRoLm1pbihpLCBhKVxuXHRcdH1cblxuXHRcdHJldHVybiBhXG5cdH0sIC0xKTtcblxuXG5cdGxldCBhcmd2ID0gKGlkeCA+IC0xKSA/IGFyZ3ZfYWZ0ZXIuc2xpY2UoaWR4ICsgMSkgOiBudWxsO1xuXHRsZXQga2V5ID0gKGlkeCA+IC0xKSA/IGFyZ3ZfYWZ0ZXJbaWR4XSA6IG51bGw7XG5cblx0bGV0IGlkeF9yZWJhc2UgPSAoaWR4ID4gLTEpID8gaWR4ICsgc3RhcnRpbmRleCA6IC0xO1xuXG5cdHJldHVybiB7XG5cdFx0aWR4X3JlYmFzZSxcblx0XHRpZHgsXG5cdFx0YXJndl9pbnB1dCxcblx0XHRhcmd2X2JlZm9yZSxcblx0XHRhcmd2X2FmdGVyLFxuXHRcdGFyZ3YsXG5cdFx0a2V5c19pbnB1dCxcblx0XHRrZXksXG5cdH07XG59XG4iXX0=