"use strict";
/**
 * Created by user on 2019/5/18.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const crossSpawn = require("cross-spawn-extra");
const index_1 = require("./index");
function requireResolve(name) {
    try {
        let ret = require.resolve(name);
        if (ret) {
            return ret;
        }
    }
    catch (e) {
    }
    return null;
}
exports.requireResolve = requireResolve;
function checkModileExists(argv) {
    let ret = requireResolve(argv.requireName || argv.name);
    if (!ret) {
        index_1.console.magenta.log(`module '${argv.name}' not exists`);
        index_1.console.log(`please use follow cmd for install`);
        index_1.console.cyan.log(`\n\t${argv.installCmd || 'npm install -g'} ${argv.name}\n`);
        if (argv.msg) {
            index_1.console.log(`${argv.msg}\n`);
        }
        return null;
    }
    return ret;
}
exports.checkModileExists = checkModileExists;
function _crossSpawnOther(cp) {
    // @ts-ignore
    if (cp.error) {
        // @ts-ignore
        throw cp.error;
    }
    // @ts-ignore
    if (cp.signal) {
        // @ts-ignore
        index_1.consoleDebug.error(`cp.signal`, cp.signal);
        process.exit(1);
    }
    return cp;
}
exports._crossSpawnOther = _crossSpawnOther;
function crossSpawnOther(bin, cmd_list, argv) {
    index_1.consoleDebug.debug(bin, cmd_list);
    let cp = crossSpawn.sync('npm', cmd_list.filter(v => v != null), {
        stdio: 'inherit',
        cwd: argv.cwd,
    });
    return _crossSpawnOther(cp);
}
exports.crossSpawnOther = crossSpawnOther;
function crossSpawnOtherAsync(bin, cmd_list, argv) {
    index_1.consoleDebug.debug(bin, cmd_list);
    return crossSpawn.async('npm', cmd_list.filter(v => v != null), {
        stdio: 'inherit',
        cwd: argv.cwd,
    })
        .tap(_crossSpawnOther);
}
exports.crossSpawnOtherAsync = crossSpawnOtherAsync;
function processArgvSlice(keys_input, argv_input = process.argv, startindex = 2) {
    if (typeof keys_input === 'string') {
        keys_input = [keys_input];
    }
    let argv_before = argv_input.slice(0, startindex);
    let argv_after = argv_input.slice(startindex);
    let idx = keys_input.reduce(function (a, b) {
        let i = argv_after.indexOf(b);
        if (a === -1) {
            return i;
        }
        else if (i !== -1) {
            return Math.min(i, a);
        }
        return a;
    }, -1);
    let argv = (idx > -1) ? argv_after.slice(idx + 1) : null;
    let key = (idx > -1) ? argv_after[idx] : null;
    let idx_rebase = (idx > -1) ? idx + startindex : -1;
    return {
        idx_rebase,
        idx,
        argv_input,
        argv_before,
        argv_after,
        argv,
        keys_input,
        key,
    };
}
exports.processArgvSlice = processArgvSlice;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bhd24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzcGF3bi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBRUgsZ0RBQWlEO0FBR2pELG1DQUFnRDtBQUdoRCxTQUFnQixjQUFjLENBQUMsSUFBWTtJQUUxQyxJQUNBO1FBQ0MsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVoQyxJQUFJLEdBQUcsRUFDUDtZQUNDLE9BQU8sR0FBRyxDQUFBO1NBQ1Y7S0FDRDtJQUNELE9BQU8sQ0FBQyxFQUNSO0tBRUM7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNiLENBQUM7QUFqQkQsd0NBaUJDO0FBRUQsU0FBZ0IsaUJBQWlCLENBQUMsSUFLakM7SUFFQSxJQUFJLEdBQUcsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFeEQsSUFBSSxDQUFDLEdBQUcsRUFDUjtRQUNDLGVBQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxDQUFDLElBQUksY0FBYyxDQUFDLENBQUM7UUFDeEQsZUFBTyxDQUFDLEdBQUcsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1FBQ2pELGVBQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sSUFBSSxDQUFDLFVBQVUsSUFBSSxnQkFBZ0IsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQztRQUU5RSxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQ1o7WUFDQyxlQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDN0I7UUFFRCxPQUFPLElBQUksQ0FBQztLQUNaO0lBRUQsT0FBTyxHQUFHLENBQUM7QUFDWixDQUFDO0FBeEJELDhDQXdCQztBQUVELFNBQWdCLGdCQUFnQixDQUFJLEVBQUs7SUFFeEMsYUFBYTtJQUNiLElB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QUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXBELE9BQU87UUFDTixVQUFVO1FBQ1YsR0FBRztRQUNILFVBQVU7UUFDVixXQUFXO1FBQ1gsVUFBVTtRQUNWLElBQUk7UUFDSixVQUFVO1FBQ1YsR0FBRztLQUNILENBQUM7QUFDSCxDQUFDO0FBMUNELDRDQTBDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSB1c2VyIG9uIDIwMTkvNS8xOC5cbiAqL1xuXG5pbXBvcnQgY3Jvc3NTcGF3biA9IHJlcXVpcmUoJ2Nyb3NzLXNwYXduLWV4dHJhJyk7XG5pbXBvcnQgKiBhcyB5YXJncyBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBJVW5wYWNrTXlZYXJnc0FyZ3YgfSBmcm9tICcuL2NsaSc7XG5pbXBvcnQgeyBjb25zb2xlRGVidWcsIGNvbnNvbGUgfSBmcm9tICcuL2luZGV4JztcbmltcG9ydCBCbHVlYmlyZCA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiByZXF1aXJlUmVzb2x2ZShuYW1lOiBzdHJpbmcpXG57XG5cdHRyeVxuXHR7XG5cdFx0bGV0IHJldCA9IHJlcXVpcmUucmVzb2x2ZShuYW1lKTtcblxuXHRcdGlmIChyZXQpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIHJldFxuXHRcdH1cblx0fVxuXHRjYXRjaCAoZSlcblx0e1xuXG5cdH1cblxuXHRyZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrTW9kaWxlRXhpc3RzKGFyZ3Y6IHtcblx0bmFtZTogc3RyaW5nLFxuXHRtc2c/OiBzdHJpbmcsXG5cdHJlcXVpcmVOYW1lPzogc3RyaW5nLFxuXHRpbnN0YWxsQ21kPzogc3RyaW5nXG59KVxue1xuXHRsZXQgcmV0ID0gcmVxdWlyZVJlc29sdmUoYXJndi5yZXF1aXJlTmFtZSB8fCBhcmd2Lm5hbWUpO1xuXG5cdGlmICghcmV0KVxuXHR7XG5cdFx0Y29uc29sZS5tYWdlbnRhLmxvZyhgbW9kdWxlICcke2FyZ3YubmFtZX0nIG5vdCBleGlzdHNgKTtcblx0XHRjb25zb2xlLmxvZyhgcGxlYXNlIHVzZSBmb2xsb3cgY21kIGZvciBpbnN0YWxsYCk7XG5cdFx0Y29uc29sZS5jeWFuLmxvZyhgXFxuXFx0JHthcmd2Lmluc3RhbGxDbWQgfHwgJ25wbSBpbnN0YWxsIC1nJ30gJHthcmd2Lm5hbWV9XFxuYCk7XG5cblx0XHRpZiAoYXJndi5tc2cpXG5cdFx0e1xuXHRcdFx0Y29uc29sZS5sb2coYCR7YXJndi5tc2d9XFxuYCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2Nyb3NzU3Bhd25PdGhlcjxUPihjcDogVClcbntcblx0Ly8gQHRzLWlnbm9yZVxuXHRpZiAoY3AuZXJyb3IpXG5cdHtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0dGhyb3cgY3AuZXJyb3Jcblx0fVxuXG5cdC8vIEB0cy1pZ25vcmVcblx0aWYgKGNwLnNpZ25hbClcblx0e1xuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRjb25zb2xlRGVidWcuZXJyb3IoYGNwLnNpZ25hbGAsIGNwLnNpZ25hbCk7XG5cdFx0cHJvY2Vzcy5leGl0KDEpXG5cdH1cblxuXHRyZXR1cm4gY3A7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcm9zc1NwYXduT3RoZXIoYmluOiBzdHJpbmcsIGNtZF9saXN0OiBzdHJpbmdbXSwgYXJndilcbntcblx0Y29uc29sZURlYnVnLmRlYnVnKGJpbiwgY21kX2xpc3QpO1xuXG5cdGxldCBjcCA9IGNyb3NzU3Bhd24uc3luYygnbnBtJywgY21kX2xpc3QuZmlsdGVyKHYgPT4gdiAhPSBudWxsKSwge1xuXHRcdHN0ZGlvOiAnaW5oZXJpdCcsXG5cdFx0Y3dkOiBhcmd2LmN3ZCxcblx0fSk7XG5cblx0cmV0dXJuIF9jcm9zc1NwYXduT3RoZXIoY3ApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3Jvc3NTcGF3bk90aGVyQXN5bmMoYmluOiBzdHJpbmcsIGNtZF9saXN0OiBzdHJpbmdbXSwgYXJndilcbntcblxuXHRjb25zb2xlRGVidWcuZGVidWcoYmluLCBjbWRfbGlzdCk7XG5cblx0cmV0dXJuIGNyb3NzU3Bhd24uYXN5bmMoJ25wbScsIGNtZF9saXN0LmZpbHRlcih2ID0+IHYgIT0gbnVsbCksIHtcblx0XHRzdGRpbzogJ2luaGVyaXQnLFxuXHRcdGN3ZDogYXJndi5jd2QsXG5cdH0pXG5cdFx0LnRhcChfY3Jvc3NTcGF3bk90aGVyKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc0FyZ3ZTbGljZShrZXlzX2lucHV0OiBzdHJpbmcgfCBzdHJpbmdbXSwgYXJndl9pbnB1dCA9IHByb2Nlc3MuYXJndiwgc3RhcnRpbmRleDogbnVtYmVyID0gMilcbntcblx0aWYgKHR5cGVvZiBrZXlzX2lucHV0ID09PSAnc3RyaW5nJylcblx0e1xuXHRcdGtleXNfaW5wdXQgPSBba2V5c19pbnB1dF07XG5cdH1cblxuXHRsZXQgYXJndl9iZWZvcmUgPSBhcmd2X2lucHV0LnNsaWNlKDAsIHN0YXJ0aW5kZXgpO1xuXHRsZXQgYXJndl9hZnRlciA9IGFyZ3ZfaW5wdXQuc2xpY2Uoc3RhcnRpbmRleCk7XG5cblx0bGV0IGlkeCA9IGtleXNfaW5wdXQucmVkdWNlKGZ1bmN0aW9uIChhLCBiKVxuXHR7XG5cdFx0bGV0IGkgPSBhcmd2X2FmdGVyLmluZGV4T2YoYik7XG5cblx0XHRpZiAoYSA9PT0gLTEpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIGk7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKGkgIT09IC0xKVxuXHRcdHtcblx0XHRcdHJldHVybiBNYXRoLm1pbihpLCBhKVxuXHRcdH1cblxuXHRcdHJldHVybiBhXG5cdH0sIC0xKTtcblxuXG5cdGxldCBhcmd2ID0gKGlkeCA+IC0xKSA/IGFyZ3ZfYWZ0ZXIuc2xpY2UoaWR4ICsgMSkgOiBudWxsO1xuXHRsZXQga2V5ID0gKGlkeCA+IC0xKSA/IGFyZ3ZfYWZ0ZXJbaWR4XSA6IG51bGw7XG5cblx0bGV0IGlkeF9yZWJhc2UgPSAoaWR4ID4gLTEpID8gaWR4ICsgc3RhcnRpbmRleCA6IC0xO1xuXG5cdHJldHVybiB7XG5cdFx0aWR4X3JlYmFzZSxcblx0XHRpZHgsXG5cdFx0YXJndl9pbnB1dCxcblx0XHRhcmd2X2JlZm9yZSxcblx0XHRhcmd2X2FmdGVyLFxuXHRcdGFyZ3YsXG5cdFx0a2V5c19pbnB1dCxcblx0XHRrZXksXG5cdH07XG59XG4iXX0=