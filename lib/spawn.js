"use strict";
/**
 * Created by user on 2019/5/18.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const crossSpawn = require("cross-spawn-extra");
const index_1 = require("./index");
function requireResolve(name) {
    try {
        let ret = require.resolve(name);
        if (ret) {
            return ret;
        }
    }
    catch (e) {
    }
    return null;
}
exports.requireResolve = requireResolve;
function checkModileExists(argv) {
    let ret = requireResolve(argv.requireName || argv.name);
    if (!ret) {
        index_1.console.magenta.log(`module '${argv.name}' not exists`);
        index_1.console.log(`please use follow cmd for install`);
        index_1.console.cyan.log(`\n\t${argv.installCmd || 'npm install -g'} ${argv.name}\n`);
        if (argv.msg) {
            index_1.console.log(`${argv.msg}\n`);
        }
        if (argv.processExit) {
            process.exit(argv.processExit | 0);
        }
        return null;
    }
    return ret;
}
exports.checkModileExists = checkModileExists;
function _crossSpawnOther(cp) {
    // @ts-ignore
    if (cp.error) {
        // @ts-ignore
        throw cp.error;
    }
    // @ts-ignore
    if (cp.signal) {
        // @ts-ignore
        index_1.consoleDebug.error(`cp.signal`, cp.signal);
        process.exit(1);
    }
    return cp;
}
exports._crossSpawnOther = _crossSpawnOther;
function crossSpawnOther(bin, cmd_list, argv) {
    //consoleDebug.debug(bin, cmd_list);
    let cp = crossSpawn.sync(bin, cmd_list.filter(v => v != null), {
        stdio: 'inherit',
        cwd: argv.cwd,
    });
    return _crossSpawnOther(cp);
}
exports.crossSpawnOther = crossSpawnOther;
function crossSpawnOtherAsync(bin, cmd_list, argv) {
    //consoleDebug.debug(bin, cmd_list);
    return crossSpawn.async(bin, cmd_list.filter(v => v != null), {
        stdio: 'inherit',
        cwd: argv.cwd,
    })
        .tap(_crossSpawnOther);
}
exports.crossSpawnOtherAsync = crossSpawnOtherAsync;
function processArgvSlice(keys_input, argv_input = process.argv, startindex = 2) {
    if (typeof keys_input === 'string') {
        keys_input = [keys_input];
    }
    let argv_before = argv_input.slice(0, startindex);
    let argv_after = argv_input.slice(startindex);
    let idx = keys_input.reduce(function (a, b) {
        let i = argv_after.indexOf(b);
        if (a === -1) {
            return i;
        }
        else if (i !== -1) {
            return Math.min(i, a);
        }
        return a;
    }, -1);
    let argv = (idx > -1) ? argv_after.slice(idx + 1) : null;
    let key = (idx > -1) ? argv_after[idx] : null;
    let idx_rebase = (idx > -1) ? idx + startindex : -1;
    return {
        idx_rebase,
        idx,
        argv_input,
        argv_before,
        argv_after,
        argv,
        keys_input,
        key,
    };
}
exports.processArgvSlice = processArgvSlice;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bhd24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzcGF3bi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBRUgsZ0RBQWlEO0FBR2pELG1DQUFnRDtBQUdoRCxTQUFnQixjQUFjLENBQUMsSUFBWTtJQUUxQyxJQUNBO1FBQ0MsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVoQyxJQUFJLEdBQUcsRUFDUDtZQUNDLE9BQU8sR0FBRyxDQUFBO1NBQ1Y7S0FDRDtJQUNELE9BQU8sQ0FBQyxFQUNSO0tBRUM7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNiLENBQUM7QUFqQkQsd0NBaUJDO0FBRUQsU0FBZ0IsaUJBQWlCLENBQUMsSUFNakM7SUFFQSxJQUFJLEdBQUcsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFeEQsSUFBSSxDQUFDLEdBQUcsRUFDUjtRQUNDLGVBQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxDQUFDLElBQUksY0FBYyxDQUFDLENBQUM7UUFDeEQsZUFBTyxDQUFDLEdBQUcsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1FBQ2pELGVBQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sSUFBSSxDQUFDLFVBQVUsSUFBSSxnQkFBZ0IsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQztRQUU5RSxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQ1o7WUFDQyxlQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDN0I7UUFFRCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQ3BCO1lBQ0MsT0FBTyxDQUFDLElBQUksQ0FBRSxJQUFJLENBQUMsV0FBc0IsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUMvQztRQUVELE9BQU8sSUFBSSxDQUFDO0tBQ1o7SUFFRCxPQUFPLEdBQUcsQ0FBQztBQUNaLENBQUM7QUE5QkQsOENBOEJDO0FBRUQsU0FBZ0IsZ0JBQWdCLENBQUksRUFBSztJQUV4QyxhQUFhO0lBQ2IsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUNaO1FBQ0MsYUFBYTtRQUNiLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQTtLQUNkO0lBRUQsYUFBYTtJQUNiLElBQUksRUFBRSxDQUFDLE1BQU0sRUFDYjtRQUNDLGFBQWE7UUFDYixvQkFBWSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzNDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDZjtJQUVELE9BQU8sRUFBRSxDQUFDO0FBQ1gsQ0FBQztBQWxCRCw0Q0FrQkM7QUFFRCxTQUFnQixlQUFlLENBQUMsR0FBVyxFQUFFLFFBQWtCLEVBQUUsSUFBSTtJQUVwRSxvQ0FBb0M7SUFFcEMsSUFBSSxFQUFFLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRTtRQUM5RCxLQUFLLEVBQUUsU0FBUztRQUNoQixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7S0FDYixDQUFDLENBQUM7SUFFSCxPQUFPLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzdCLENBQUM7QUFWRCwwQ0FVQztBQUVELFNBQWdCLG9CQUFvQixDQUFDLEdBQVcsRUFBRSxRQUFrQixFQUFFLElBQUk7SUFFekUsb0NBQW9DO0lBRXBDLE9BQU8sVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRTtRQUM3RCxLQUFLLEVBQUUsU0FBUztRQUNoQixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7S0FDYixDQUFDO1NBQ0EsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUE7QUFDeEIsQ0FBQztBQVRELG9EQVNDO0FBRUQsU0FBZ0IsZ0JBQWdCLENBQUMsVUFBNkIsRUFBRSxVQUFVLEdBQUcsT0FBTyxDQUFDLElBQUksRUFBRSxhQUFxQixDQUFDO0lBRWhILElBQUksT0FBTyxVQUFVLEtBQUssUUFBUSxFQUNsQztRQUNDLFVBQVUsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQzFCO0lBRUQsSUFBSSxXQUFXLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDbEQsSUFBSSxVQUFVLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUU5QyxJQUFJLEdBQUcsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7UUFFekMsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFDWjtZQUNDLE9BQU8sQ0FBQyxDQUFDO1NBQ1Q7YUFDSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFDakI7WUFDQyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1NBQ3JCO1FBRUQsT0FBTyxDQUFDLENBQUE7SUFDVCxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUdQLElBQUksSUFBSSxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDekQsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFFOUMsSUFBSSxVQUFVLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFcEQsT0FBTztRQUNOLFVBQVU7UUFDVixHQUFHO1FBQ0gsVUFBVTtRQUNWLFdBQVc7UUFDWCxVQUFVO1FBQ1YsSUFBSTtRQUNKLFVBQVU7UUFDVixHQUFHO0tBQ0gsQ0FBQztBQUNILENBQUM7QUExQ0QsNENBMENDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAxOS81LzE4LlxuICovXG5cbmltcG9ydCBjcm9zc1NwYXduID0gcmVxdWlyZSgnY3Jvc3Mtc3Bhd24tZXh0cmEnKTtcbmltcG9ydCAqIGFzIHlhcmdzIGZyb20gJ3lhcmdzJztcbmltcG9ydCB7IElVbnBhY2tNeVlhcmdzQXJndiB9IGZyb20gJy4vY2xpJztcbmltcG9ydCB7IGNvbnNvbGVEZWJ1ZywgY29uc29sZSB9IGZyb20gJy4vaW5kZXgnO1xuaW1wb3J0IEJsdWViaXJkID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlcXVpcmVSZXNvbHZlKG5hbWU6IHN0cmluZylcbntcblx0dHJ5XG5cdHtcblx0XHRsZXQgcmV0ID0gcmVxdWlyZS5yZXNvbHZlKG5hbWUpO1xuXG5cdFx0aWYgKHJldClcblx0XHR7XG5cdFx0XHRyZXR1cm4gcmV0XG5cdFx0fVxuXHR9XG5cdGNhdGNoIChlKVxuXHR7XG5cblx0fVxuXG5cdHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tNb2RpbGVFeGlzdHMoYXJndjoge1xuXHRuYW1lOiBzdHJpbmcsXG5cdG1zZz86IHN0cmluZyxcblx0cmVxdWlyZU5hbWU/OiBzdHJpbmcsXG5cdGluc3RhbGxDbWQ/OiBzdHJpbmdcblx0cHJvY2Vzc0V4aXQ/OiBib29sZWFuIHwgbnVtYmVyLFxufSlcbntcblx0bGV0IHJldCA9IHJlcXVpcmVSZXNvbHZlKGFyZ3YucmVxdWlyZU5hbWUgfHwgYXJndi5uYW1lKTtcblxuXHRpZiAoIXJldClcblx0e1xuXHRcdGNvbnNvbGUubWFnZW50YS5sb2coYG1vZHVsZSAnJHthcmd2Lm5hbWV9JyBub3QgZXhpc3RzYCk7XG5cdFx0Y29uc29sZS5sb2coYHBsZWFzZSB1c2UgZm9sbG93IGNtZCBmb3IgaW5zdGFsbGApO1xuXHRcdGNvbnNvbGUuY3lhbi5sb2coYFxcblxcdCR7YXJndi5pbnN0YWxsQ21kIHx8ICducG0gaW5zdGFsbCAtZyd9ICR7YXJndi5uYW1lfVxcbmApO1xuXG5cdFx0aWYgKGFyZ3YubXNnKVxuXHRcdHtcblx0XHRcdGNvbnNvbGUubG9nKGAke2FyZ3YubXNnfVxcbmApO1xuXHRcdH1cblxuXHRcdGlmIChhcmd2LnByb2Nlc3NFeGl0KVxuXHRcdHtcblx0XHRcdHByb2Nlc3MuZXhpdCgoYXJndi5wcm9jZXNzRXhpdCBhcyBudW1iZXIpIHwgMCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2Nyb3NzU3Bhd25PdGhlcjxUPihjcDogVClcbntcblx0Ly8gQHRzLWlnbm9yZVxuXHRpZiAoY3AuZXJyb3IpXG5cdHtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0dGhyb3cgY3AuZXJyb3Jcblx0fVxuXG5cdC8vIEB0cy1pZ25vcmVcblx0aWYgKGNwLnNpZ25hbClcblx0e1xuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRjb25zb2xlRGVidWcuZXJyb3IoYGNwLnNpZ25hbGAsIGNwLnNpZ25hbCk7XG5cdFx0cHJvY2Vzcy5leGl0KDEpXG5cdH1cblxuXHRyZXR1cm4gY3A7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcm9zc1NwYXduT3RoZXIoYmluOiBzdHJpbmcsIGNtZF9saXN0OiBzdHJpbmdbXSwgYXJndilcbntcblx0Ly9jb25zb2xlRGVidWcuZGVidWcoYmluLCBjbWRfbGlzdCk7XG5cblx0bGV0IGNwID0gY3Jvc3NTcGF3bi5zeW5jKGJpbiwgY21kX2xpc3QuZmlsdGVyKHYgPT4gdiAhPSBudWxsKSwge1xuXHRcdHN0ZGlvOiAnaW5oZXJpdCcsXG5cdFx0Y3dkOiBhcmd2LmN3ZCxcblx0fSk7XG5cblx0cmV0dXJuIF9jcm9zc1NwYXduT3RoZXIoY3ApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3Jvc3NTcGF3bk90aGVyQXN5bmMoYmluOiBzdHJpbmcsIGNtZF9saXN0OiBzdHJpbmdbXSwgYXJndilcbntcblx0Ly9jb25zb2xlRGVidWcuZGVidWcoYmluLCBjbWRfbGlzdCk7XG5cblx0cmV0dXJuIGNyb3NzU3Bhd24uYXN5bmMoYmluLCBjbWRfbGlzdC5maWx0ZXIodiA9PiB2ICE9IG51bGwpLCB7XG5cdFx0c3RkaW86ICdpbmhlcml0Jyxcblx0XHRjd2Q6IGFyZ3YuY3dkLFxuXHR9KVxuXHRcdC50YXAoX2Nyb3NzU3Bhd25PdGhlcilcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NBcmd2U2xpY2Uoa2V5c19pbnB1dDogc3RyaW5nIHwgc3RyaW5nW10sIGFyZ3ZfaW5wdXQgPSBwcm9jZXNzLmFyZ3YsIHN0YXJ0aW5kZXg6IG51bWJlciA9IDIpXG57XG5cdGlmICh0eXBlb2Yga2V5c19pbnB1dCA9PT0gJ3N0cmluZycpXG5cdHtcblx0XHRrZXlzX2lucHV0ID0gW2tleXNfaW5wdXRdO1xuXHR9XG5cblx0bGV0IGFyZ3ZfYmVmb3JlID0gYXJndl9pbnB1dC5zbGljZSgwLCBzdGFydGluZGV4KTtcblx0bGV0IGFyZ3ZfYWZ0ZXIgPSBhcmd2X2lucHV0LnNsaWNlKHN0YXJ0aW5kZXgpO1xuXG5cdGxldCBpZHggPSBrZXlzX2lucHV0LnJlZHVjZShmdW5jdGlvbiAoYSwgYilcblx0e1xuXHRcdGxldCBpID0gYXJndl9hZnRlci5pbmRleE9mKGIpO1xuXG5cdFx0aWYgKGEgPT09IC0xKVxuXHRcdHtcblx0XHRcdHJldHVybiBpO1xuXHRcdH1cblx0XHRlbHNlIGlmIChpICE9PSAtMSlcblx0XHR7XG5cdFx0XHRyZXR1cm4gTWF0aC5taW4oaSwgYSlcblx0XHR9XG5cblx0XHRyZXR1cm4gYVxuXHR9LCAtMSk7XG5cblxuXHRsZXQgYXJndiA9IChpZHggPiAtMSkgPyBhcmd2X2FmdGVyLnNsaWNlKGlkeCArIDEpIDogbnVsbDtcblx0bGV0IGtleSA9IChpZHggPiAtMSkgPyBhcmd2X2FmdGVyW2lkeF0gOiBudWxsO1xuXG5cdGxldCBpZHhfcmViYXNlID0gKGlkeCA+IC0xKSA/IGlkeCArIHN0YXJ0aW5kZXggOiAtMTtcblxuXHRyZXR1cm4ge1xuXHRcdGlkeF9yZWJhc2UsXG5cdFx0aWR4LFxuXHRcdGFyZ3ZfaW5wdXQsXG5cdFx0YXJndl9iZWZvcmUsXG5cdFx0YXJndl9hZnRlcixcblx0XHRhcmd2LFxuXHRcdGtleXNfaW5wdXQsXG5cdFx0a2V5LFxuXHR9O1xufVxuIl19