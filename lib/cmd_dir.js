"use strict";
/**
 * 因為 ./cli.ts 似乎寫出BUG 所以只好打掉重練一個
 *
 * 但是依然BUG...
 * 放棄修正
 */
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("upath2");
const spawn_1 = require("./spawn");
function createCommandModuleExports(module) {
    // @ts-ignore
    if (module.builder == null && module.handler == null) {
        // @ts-ignore
        throw new TypeError(`'builder' or 'handler' must exists, but got\nbuilder: ${module.builder}\nhandler: ${module.handler}`);
    }
    // @ts-ignore
    let { builder = _dummyBuilder, handler = _dummyHandler } = module;
    return {
        ...module,
        builder,
        handler,
    };
}
exports.createCommandModuleExports = createCommandModuleExports;
function _dummyBuilder(yarg) {
    return yarg;
}
exports._dummyBuilder = _dummyBuilder;
function _dummyHandler(args) {
    return args;
}
exports._dummyHandler = _dummyHandler;
function basenameStrip(name) {
    return path.basename(name, path.extname(name));
}
exports.basenameStrip = basenameStrip;
function commandDirStrip(name, suffix = '_cmds') {
    return basenameStrip(name) + suffix;
}
exports.commandDirStrip = commandDirStrip;
function commandDirJoin(root, name, suffix = '_cmds') {
    return path.join(root, commandDirStrip(name));
}
exports.commandDirJoin = commandDirJoin;
function lazySpawnArgvSlice(options) {
    let cmd_list = spawn_1.processArgvSlice(options.command).argv;
    return spawn_1.crossSpawnOther(options.bin, [
        ...(Array.isArray(options.cmd) ? options.cmd : [options.cmd]),
        ...cmd_list,
    ], options.argv);
}
exports.lazySpawnArgvSlice = lazySpawnArgvSlice;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY21kX2Rpci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNtZF9kaXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7OztHQUtHOztBQUtILCtCQUFnQztBQUNoQyxtQ0FBK0U7QUFvQy9FLFNBQWdCLDBCQUEwQixDQUFxSCxNQUFtQztJQUVqTSxhQUFhO0lBQ2IsSUFBSSxNQUFNLENBQUMsT0FBTyxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsT0FBTyxJQUFJLElBQUksRUFDcEQ7UUFDQyxhQUFhO1FBQ2IsTUFBTSxJQUFJLFNBQVMsQ0FBQyx5REFBeUQsTUFBTSxDQUFDLE9BQU8sY0FBYyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtLQUMxSDtJQUVELGFBQWE7SUFDYixJQUFJLEVBQUUsT0FBTyxHQUFHLGFBQWEsRUFBRSxPQUFPLEdBQUcsYUFBYSxFQUFFLEdBQUcsTUFBTSxDQUFDO0lBRWxFLE9BQU87UUFDTixHQUFHLE1BQU07UUFDVCxPQUFPO1FBQ1AsT0FBTztLQUNnQixDQUFBO0FBQ3pCLENBQUM7QUFqQkQsZ0VBaUJDO0FBRUQsU0FBZ0IsYUFBYSxDQUFlLElBQWE7SUFFeEQsT0FBTyxJQUFJLENBQUE7QUFDWixDQUFDO0FBSEQsc0NBR0M7QUFFRCxTQUFnQixhQUFhLENBQWUsSUFBa0I7SUFFN0QsT0FBTyxJQUFJLENBQUE7QUFDWixDQUFDO0FBSEQsc0NBR0M7QUFFRCxTQUFnQixhQUFhLENBQUMsSUFBWTtJQUV6QyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtBQUMvQyxDQUFDO0FBSEQsc0NBR0M7QUFFRCxTQUFnQixlQUFlLENBQUMsSUFBWSxFQUFFLE1BQU0sR0FBRyxPQUFPO0lBRTdELE9BQU8sYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQTtBQUNwQyxDQUFDO0FBSEQsMENBR0M7QUFFRCxTQUFnQixjQUFjLENBQUMsSUFBWSxFQUFFLElBQVksRUFBRSxNQUFNLEdBQUcsT0FBTztJQUUxRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0FBQzlDLENBQUM7QUFIRCx3Q0FHQztBQUVELFNBQWdCLGtCQUFrQixDQUF5QixPQUsxRDtJQUVBLElBQUksUUFBUSxHQUFHLHdCQUFnQixDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFFdEQsT0FBTyx1QkFBZSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUU7UUFFbkMsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU3RCxHQUFHLFFBQVE7S0FDWCxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsQixDQUFDO0FBZkQsZ0RBZUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIOWboOeCuiAuL2NsaS50cyDkvLzkuY7lr6vlh7pCVUcg5omA5Lul5Y+q5aW95omT5o6J6YeN57e05LiA5YCLXG4gKlxuICog5L2G5piv5L6d54S2QlVHLi4uXG4gKiDmlL7mo4Tkv67mraNcbiAqL1xuXG5pbXBvcnQgeWFyZ3MgPSByZXF1aXJlKCd5YXJncycpO1xuaW1wb3J0IHsgQ29tbWFuZE1vZHVsZSwgQXJndW1lbnRzLCBBcmd2LCBDb21tYW5kQnVpbGRlciwgT3B0aW9ucyB9IGZyb20gJ3lhcmdzJztcbmltcG9ydCB7IElUU092ZXJ3cml0ZSB9IGZyb20gJ3RzLXR5cGUvbGliL2hlbHBlcic7XG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3VwYXRoMicpO1xuaW1wb3J0IHsgY2hlY2tNb2RpbGVFeGlzdHMsIGNyb3NzU3Bhd25PdGhlciwgcHJvY2Vzc0FyZ3ZTbGljZSB9IGZyb20gJy4vc3Bhd24nO1xuXG5leHBvcnQgaW50ZXJmYWNlIElVbnBhY2tNeVlhcmdzQXJndlxue1xuXHRjd2Q6IHN0cmluZztcblx0c2tpcENoZWNrV29ya3NwYWNlOiBib29sZWFuO1xuXHR5dERlYnVnTW9kZTogYm9vbGVhbjtcbn1cblxuZXhwb3J0IHR5cGUgSVVucGFja015WWFyZ3NBcmd2UGFydGlhbCA9IFBhcnRpYWw8SVVucGFja015WWFyZ3NBcmd2PjtcblxuZXhwb3J0IHR5cGUgSVVucGFja1lhcmdzQXJndjxUIGV4dGVuZHMgQXJndiwgRCA9IGFueT4gPSBUIGV4dGVuZHMgQXJndjxpbmZlciBVPiA/IFUgOiBEO1xuXG5leHBvcnQgdHlwZSBJQ29tbWFuZEJ1aWxkZXJGbjxUID0gb2JqZWN0LCBVID0gb2JqZWN0PiA9IChhcmdzOiBBcmd2PFQ+KSA9PiBBcmd2PFU+O1xuXG5leHBvcnQgaW50ZXJmYWNlIElDb21tYW5kQnVpbGRlck9iamVjdDxUID0gb2JqZWN0LCBVID0gb2JqZWN0Plxue1xuXHRba2V5OiBzdHJpbmddOiBPcHRpb25zXG59XG5cbmV4cG9ydCB0eXBlIElDb21tYW5kTW9kdWxlT21pdDxUIGV4dGVuZHMgSVVucGFja015WWFyZ3NBcmd2UGFydGlhbCA9IElVbnBhY2tNeVlhcmdzQXJndiwgVSBleHRlbmRzIHt9ID0gSVVucGFja015WWFyZ3NBcmd2UGFydGlhbD4gPSBPbWl0PENvbW1hbmRNb2R1bGUsICdoYW5kbGVyJyB8ICdidWlsZGVyJz47XG5cbmV4cG9ydCB0eXBlIElDb21tYW5kTW9kdWxlRXhwb3J0czxUIGV4dGVuZHMgSVVucGFja015WWFyZ3NBcmd2UGFydGlhbCA9IElVbnBhY2tNeVlhcmdzQXJndiwgVSBleHRlbmRzIElVbnBhY2tNeVlhcmdzQXJndlBhcnRpYWwgPSBJVW5wYWNrTXlZYXJnc0FyZ3Y+ID1cblx0SUNvbW1hbmRNb2R1bGVPbWl0XG5cdCYgKHtcblx0YnVpbGRlcihhcmdzOiBBcmd2PFQ+KTogQXJndjxVPjtcblx0aGFuZGxlcjogKGFyZ3M6IEFyZ3VtZW50czxVPikgPT4gYW55O1xufSB8IHtcblx0YnVpbGRlcjogSUNvbW1hbmRCdWlsZGVyT2JqZWN0O1xuXHRoYW5kbGVyOiAoYXJnczogQXJndW1lbnRzPFU+KSA9PiBhbnk7XG59IHwge1xuXHRoYW5kbGVyOiAoYXJnczogQXJndW1lbnRzPFQ+KSA9PiBhbnk7XG59IHwge1xuXHRidWlsZGVyKGFyZ3M6IEFyZ3Y8VD4pOiBBcmd2PFU+O1xufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb21tYW5kTW9kdWxlRXhwb3J0czxUIGV4dGVuZHMgSVVucGFja015WWFyZ3NBcmd2UGFydGlhbCA9IElVbnBhY2tNeVlhcmdzQXJndiwgVSBleHRlbmRzIElVbnBhY2tNeVlhcmdzQXJndlBhcnRpYWwgPSBJVW5wYWNrTXlZYXJnc0FyZ3Y+KG1vZHVsZTogSUNvbW1hbmRNb2R1bGVFeHBvcnRzPFQsIFU+KTogQ29tbWFuZE1vZHVsZTxULCBVPlxue1xuXHQvLyBAdHMtaWdub3JlXG5cdGlmIChtb2R1bGUuYnVpbGRlciA9PSBudWxsICYmIG1vZHVsZS5oYW5kbGVyID09IG51bGwpXG5cdHtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgJ2J1aWxkZXInIG9yICdoYW5kbGVyJyBtdXN0IGV4aXN0cywgYnV0IGdvdFxcbmJ1aWxkZXI6ICR7bW9kdWxlLmJ1aWxkZXJ9XFxuaGFuZGxlcjogJHttb2R1bGUuaGFuZGxlcn1gKVxuXHR9XG5cblx0Ly8gQHRzLWlnbm9yZVxuXHRsZXQgeyBidWlsZGVyID0gX2R1bW15QnVpbGRlciwgaGFuZGxlciA9IF9kdW1teUhhbmRsZXIgfSA9IG1vZHVsZTtcblxuXHRyZXR1cm4ge1xuXHRcdC4uLm1vZHVsZSxcblx0XHRidWlsZGVyLFxuXHRcdGhhbmRsZXIsXG5cdH0gYXMgQ29tbWFuZE1vZHVsZTxULCBVPlxufVxuXG5leHBvcnQgZnVuY3Rpb24gX2R1bW15QnVpbGRlcjxUIGV4dGVuZHMge30+KHlhcmc6IEFyZ3Y8VD4pXG57XG5cdHJldHVybiB5YXJnXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfZHVtbXlIYW5kbGVyPFQgZXh0ZW5kcyB7fT4oYXJnczogQXJndW1lbnRzPFQ+KTogYW55XG57XG5cdHJldHVybiBhcmdzXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBiYXNlbmFtZVN0cmlwKG5hbWU6IHN0cmluZylcbntcblx0cmV0dXJuIHBhdGguYmFzZW5hbWUobmFtZSwgcGF0aC5leHRuYW1lKG5hbWUpKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tbWFuZERpclN0cmlwKG5hbWU6IHN0cmluZywgc3VmZml4ID0gJ19jbWRzJylcbntcblx0cmV0dXJuIGJhc2VuYW1lU3RyaXAobmFtZSkgKyBzdWZmaXhcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbW1hbmREaXJKb2luKHJvb3Q6IHN0cmluZywgbmFtZTogc3RyaW5nLCBzdWZmaXggPSAnX2NtZHMnKVxue1xuXHRyZXR1cm4gcGF0aC5qb2luKHJvb3QsIGNvbW1hbmREaXJTdHJpcChuYW1lKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxhenlTcGF3bkFyZ3ZTbGljZTxUID0gSVVucGFja015WWFyZ3NBcmd2PihvcHRpb25zOiB7XG5cdGJpbjogc3RyaW5nLFxuXHRjb21tYW5kOiBzdHJpbmcgfCBzdHJpbmdbXSxcblx0Y21kPzogc3RyaW5nIHwgc3RyaW5nW10sXG5cdGFyZ3Y6IEFyZ3VtZW50czxUPixcbn0pXG57XG5cdGxldCBjbWRfbGlzdCA9IHByb2Nlc3NBcmd2U2xpY2Uob3B0aW9ucy5jb21tYW5kKS5hcmd2O1xuXG5cdHJldHVybiBjcm9zc1NwYXduT3RoZXIob3B0aW9ucy5iaW4sIFtcblxuXHRcdC4uLihBcnJheS5pc0FycmF5KG9wdGlvbnMuY21kKSA/IG9wdGlvbnMuY21kIDogW29wdGlvbnMuY21kXSksXG5cblx0XHQuLi5jbWRfbGlzdCxcblx0XSwgb3B0aW9ucy5hcmd2KTtcbn1cbiJdfQ==