"use strict";
/**
 * 因為 ./cli.ts 似乎寫出BUG 所以只好打掉重練一個
 *
 * 但是依然BUG...
 * 放棄修正
 */
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("upath2");
const spawn_1 = require("./spawn");
function createCommandModuleExports(module) {
    // @ts-ignore
    if (module.builder == null && module.handler == null) {
        // @ts-ignore
        throw new TypeError(`'builder' or 'handler' must exists, but got\nbuilder: ${module.builder}\nhandler: ${module.handler}`);
    }
    // @ts-ignore
    let { builder = _dummyBuilder, handler = _dummyHandler } = module;
    return {
        ...module,
        builder,
        handler,
    };
}
exports.createCommandModuleExports = createCommandModuleExports;
function _dummyBuilder(yarg) {
    return yarg;
}
exports._dummyBuilder = _dummyBuilder;
function _dummyHandler(args) {
    return args;
}
exports._dummyHandler = _dummyHandler;
function basenameStrip(name) {
    return path.basename(name, path.extname(name));
}
exports.basenameStrip = basenameStrip;
function commandDirStrip(name, suffix = '_cmds') {
    return basenameStrip(name) + suffix;
}
exports.commandDirStrip = commandDirStrip;
function commandDirJoin(root, name, suffix = '_cmds') {
    return path.join(root, commandDirStrip(name));
}
exports.commandDirJoin = commandDirJoin;
function lazySpawnArgvSlice(options) {
    let cmd_list = spawn_1.processArgvSlice(options.command).argv;
    return spawn_1.crossSpawnOther(options.bin, [
        ...(Array.isArray(options.cmd) ? options.cmd : [options.cmd]),
        ...cmd_list,
    ], options.argv, options.crossSpawnOptions);
}
exports.lazySpawnArgvSlice = lazySpawnArgvSlice;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY21kX2Rpci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNtZF9kaXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7OztHQUtHOztBQUtILCtCQUFnQztBQUNoQyxtQ0FBK0U7QUFxQy9FLFNBQWdCLDBCQUEwQixDQUFxSCxNQUFtQztJQUVqTSxhQUFhO0lBQ2IsSUFBSSxNQUFNLENBQUMsT0FBTyxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsT0FBTyxJQUFJLElBQUksRUFDcEQ7UUFDQyxhQUFhO1FBQ2IsTUFBTSxJQUFJLFNBQVMsQ0FBQyx5REFBeUQsTUFBTSxDQUFDLE9BQU8sY0FBYyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtLQUMxSDtJQUVELGFBQWE7SUFDYixJQUFJLEVBQUUsT0FBTyxHQUFHLGFBQWEsRUFBRSxPQUFPLEdBQUcsYUFBYSxFQUFFLEdBQUcsTUFBTSxDQUFDO0lBRWxFLE9BQU87UUFDTixHQUFHLE1BQU07UUFDVCxPQUFPO1FBQ1AsT0FBTztLQUNnQixDQUFBO0FBQ3pCLENBQUM7QUFqQkQsZ0VBaUJDO0FBRUQsU0FBZ0IsYUFBYSxDQUFlLElBQWE7SUFFeEQsT0FBTyxJQUFJLENBQUE7QUFDWixDQUFDO0FBSEQsc0NBR0M7QUFFRCxTQUFnQixhQUFhLENBQWUsSUFBa0I7SUFFN0QsT0FBTyxJQUFJLENBQUE7QUFDWixDQUFDO0FBSEQsc0NBR0M7QUFFRCxTQUFnQixhQUFhLENBQUMsSUFBWTtJQUV6QyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtBQUMvQyxDQUFDO0FBSEQsc0NBR0M7QUFFRCxTQUFnQixlQUFlLENBQUMsSUFBWSxFQUFFLE1BQU0sR0FBRyxPQUFPO0lBRTdELE9BQU8sYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQTtBQUNwQyxDQUFDO0FBSEQsMENBR0M7QUFFRCxTQUFnQixjQUFjLENBQUMsSUFBWSxFQUFFLElBQVksRUFBRSxNQUFNLEdBQUcsT0FBTztJQUUxRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0FBQzlDLENBQUM7QUFIRCx3Q0FHQztBQUVELFNBQWdCLGtCQUFrQixDQUFDLE9BUWxDO0lBRUEsSUFBSSxRQUFRLEdBQUcsd0JBQWdCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQztJQUV0RCxPQUFPLHVCQUFlLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRTtRQUVuQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTdELEdBQUcsUUFBUTtLQUNYLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUM3QyxDQUFDO0FBbEJELGdEQWtCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICog5Zug54K6IC4vY2xpLnRzIOS8vOS5juWvq+WHukJVRyDmiYDku6Xlj6rlpb3miZPmjonph43nt7TkuIDlgItcbiAqXG4gKiDkvYbmmK/kvp3nhLZCVUcuLi5cbiAqIOaUvuajhOS/ruato1xuICovXG5cbmltcG9ydCB5YXJncyA9IHJlcXVpcmUoJ3lhcmdzJyk7XG5pbXBvcnQgeyBDb21tYW5kTW9kdWxlLCBBcmd1bWVudHMsIEFyZ3YsIENvbW1hbmRCdWlsZGVyLCBPcHRpb25zIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgSVRTT3ZlcndyaXRlIH0gZnJvbSAndHMtdHlwZSc7XG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3VwYXRoMicpO1xuaW1wb3J0IHsgY2hlY2tNb2RpbGVFeGlzdHMsIGNyb3NzU3Bhd25PdGhlciwgcHJvY2Vzc0FyZ3ZTbGljZSB9IGZyb20gJy4vc3Bhd24nO1xuaW1wb3J0IHsgU3Bhd25TeW5jT3B0aW9ucyB9IGZyb20gJ2Nyb3NzLXNwYXduLWV4dHJhL3R5cGUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElVbnBhY2tNeVlhcmdzQXJndlxue1xuXHRjd2Q6IHN0cmluZztcblx0c2tpcENoZWNrV29ya3NwYWNlPzogYm9vbGVhbjtcblx0eXREZWJ1Z01vZGU/OiBib29sZWFuO1xufVxuXG5leHBvcnQgdHlwZSBJVW5wYWNrTXlZYXJnc0FyZ3ZQYXJ0aWFsID0gUGFydGlhbDxJVW5wYWNrTXlZYXJnc0FyZ3Y+O1xuXG5leHBvcnQgdHlwZSBJVW5wYWNrWWFyZ3NBcmd2PFQgZXh0ZW5kcyBBcmd2LCBEID0gYW55PiA9IFQgZXh0ZW5kcyBBcmd2PGluZmVyIFU+ID8gVSA6IEQ7XG5cbmV4cG9ydCB0eXBlIElDb21tYW5kQnVpbGRlckZuPFQgPSBvYmplY3QsIFUgPSBvYmplY3Q+ID0gKGFyZ3M6IEFyZ3Y8VD4pID0+IEFyZ3Y8VT47XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbW1hbmRCdWlsZGVyT2JqZWN0PFQgPSBvYmplY3QsIFUgPSBvYmplY3Q+XG57XG5cdFtrZXk6IHN0cmluZ106IE9wdGlvbnNcbn1cblxuZXhwb3J0IHR5cGUgSUNvbW1hbmRNb2R1bGVPbWl0PFQgZXh0ZW5kcyBJVW5wYWNrTXlZYXJnc0FyZ3ZQYXJ0aWFsID0gSVVucGFja015WWFyZ3NBcmd2LCBVIGV4dGVuZHMge30gPSBJVW5wYWNrTXlZYXJnc0FyZ3ZQYXJ0aWFsPiA9IE9taXQ8Q29tbWFuZE1vZHVsZSwgJ2hhbmRsZXInIHwgJ2J1aWxkZXInPjtcblxuZXhwb3J0IHR5cGUgSUNvbW1hbmRNb2R1bGVFeHBvcnRzPFQgZXh0ZW5kcyBJVW5wYWNrTXlZYXJnc0FyZ3ZQYXJ0aWFsID0gSVVucGFja015WWFyZ3NBcmd2LCBVIGV4dGVuZHMgSVVucGFja015WWFyZ3NBcmd2UGFydGlhbCA9IElVbnBhY2tNeVlhcmdzQXJndj4gPVxuXHRJQ29tbWFuZE1vZHVsZU9taXRcblx0JiAoe1xuXHRidWlsZGVyKGFyZ3M6IEFyZ3Y8VD4pOiBBcmd2PFU+O1xuXHRoYW5kbGVyOiAoYXJnczogQXJndW1lbnRzPFU+KSA9PiBhbnk7XG59IHwge1xuXHRidWlsZGVyOiBJQ29tbWFuZEJ1aWxkZXJPYmplY3Q7XG5cdGhhbmRsZXI6IChhcmdzOiBBcmd1bWVudHM8VT4pID0+IGFueTtcbn0gfCB7XG5cdGhhbmRsZXI6IChhcmdzOiBBcmd1bWVudHM8VD4pID0+IGFueTtcbn0gfCB7XG5cdGJ1aWxkZXIoYXJnczogQXJndjxUPik6IEFyZ3Y8VT47XG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbW1hbmRNb2R1bGVFeHBvcnRzPFQgZXh0ZW5kcyBJVW5wYWNrTXlZYXJnc0FyZ3ZQYXJ0aWFsID0gSVVucGFja015WWFyZ3NBcmd2LCBVIGV4dGVuZHMgSVVucGFja015WWFyZ3NBcmd2UGFydGlhbCA9IElVbnBhY2tNeVlhcmdzQXJndj4obW9kdWxlOiBJQ29tbWFuZE1vZHVsZUV4cG9ydHM8VCwgVT4pOiBDb21tYW5kTW9kdWxlPFQsIFU+XG57XG5cdC8vIEB0cy1pZ25vcmVcblx0aWYgKG1vZHVsZS5idWlsZGVyID09IG51bGwgJiYgbW9kdWxlLmhhbmRsZXIgPT0gbnVsbClcblx0e1xuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGAnYnVpbGRlcicgb3IgJ2hhbmRsZXInIG11c3QgZXhpc3RzLCBidXQgZ290XFxuYnVpbGRlcjogJHttb2R1bGUuYnVpbGRlcn1cXG5oYW5kbGVyOiAke21vZHVsZS5oYW5kbGVyfWApXG5cdH1cblxuXHQvLyBAdHMtaWdub3JlXG5cdGxldCB7IGJ1aWxkZXIgPSBfZHVtbXlCdWlsZGVyLCBoYW5kbGVyID0gX2R1bW15SGFuZGxlciB9ID0gbW9kdWxlO1xuXG5cdHJldHVybiB7XG5cdFx0Li4ubW9kdWxlLFxuXHRcdGJ1aWxkZXIsXG5cdFx0aGFuZGxlcixcblx0fSBhcyBDb21tYW5kTW9kdWxlPFQsIFU+XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfZHVtbXlCdWlsZGVyPFQgZXh0ZW5kcyB7fT4oeWFyZzogQXJndjxUPilcbntcblx0cmV0dXJuIHlhcmdcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9kdW1teUhhbmRsZXI8VCBleHRlbmRzIHt9PihhcmdzOiBBcmd1bWVudHM8VD4pOiBhbnlcbntcblx0cmV0dXJuIGFyZ3Ncbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJhc2VuYW1lU3RyaXAobmFtZTogc3RyaW5nKVxue1xuXHRyZXR1cm4gcGF0aC5iYXNlbmFtZShuYW1lLCBwYXRoLmV4dG5hbWUobmFtZSkpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21tYW5kRGlyU3RyaXAobmFtZTogc3RyaW5nLCBzdWZmaXggPSAnX2NtZHMnKVxue1xuXHRyZXR1cm4gYmFzZW5hbWVTdHJpcChuYW1lKSArIHN1ZmZpeFxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tbWFuZERpckpvaW4ocm9vdDogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIHN1ZmZpeCA9ICdfY21kcycpXG57XG5cdHJldHVybiBwYXRoLmpvaW4ocm9vdCwgY29tbWFuZERpclN0cmlwKG5hbWUpKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbGF6eVNwYXduQXJndlNsaWNlKG9wdGlvbnM6IHtcblx0YmluOiBzdHJpbmcsXG5cdGNvbW1hbmQ6IHN0cmluZyB8IHN0cmluZ1tdLFxuXHRjbWQ/OiBzdHJpbmcgfCBzdHJpbmdbXSxcblx0YXJndjoge1xuXHRcdGN3ZDogc3RyaW5nXG5cdH0sXG5cdGNyb3NzU3Bhd25PcHRpb25zPzogU3Bhd25TeW5jT3B0aW9uc1xufSlcbntcblx0bGV0IGNtZF9saXN0ID0gcHJvY2Vzc0FyZ3ZTbGljZShvcHRpb25zLmNvbW1hbmQpLmFyZ3Y7XG5cblx0cmV0dXJuIGNyb3NzU3Bhd25PdGhlcihvcHRpb25zLmJpbiwgW1xuXG5cdFx0Li4uKEFycmF5LmlzQXJyYXkob3B0aW9ucy5jbWQpID8gb3B0aW9ucy5jbWQgOiBbb3B0aW9ucy5jbWRdKSxcblxuXHRcdC4uLmNtZF9saXN0LFxuXHRdLCBvcHRpb25zLmFyZ3YsIG9wdGlvbnMuY3Jvc3NTcGF3bk9wdGlvbnMpO1xufVxuIl19