"use strict";
/**
 * 因為 ./cli.ts 似乎寫出BUG 所以只好打掉重練一個
 *
 * 但是依然BUG...
 * 放棄修正
 */
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("upath2");
const spawn_1 = require("./spawn");
function createCommandModuleExports(module) {
    // @ts-ignore
    if (module.builder == null && module.handler == null) {
        // @ts-ignore
        throw new TypeError(`'builder' or 'handler' must exists, but got\nbuilder: ${module.builder}\nhandler: ${module.handler}`);
    }
    // @ts-ignore
    let { builder = _dummyBuilder, handler = _dummyHandler } = module;
    return {
        ...module,
        builder,
        handler,
    };
}
exports.createCommandModuleExports = createCommandModuleExports;
function _dummyBuilder(yarg) {
    return yarg;
}
exports._dummyBuilder = _dummyBuilder;
function _dummyHandler(args) {
    return args;
}
exports._dummyHandler = _dummyHandler;
function basenameStrip(name) {
    return path.basename(name, path.extname(name));
}
exports.basenameStrip = basenameStrip;
function commandDirStrip(name, suffix = '_cmds') {
    return basenameStrip(name) + suffix;
}
exports.commandDirStrip = commandDirStrip;
function commandDirJoin(root, name, suffix = '_cmds') {
    return path.join(root, commandDirStrip(name));
}
exports.commandDirJoin = commandDirJoin;
function lazySpawnArgvSlice(options) {
    let cmd_list = spawn_1.processArgvSlice(options.command).argv;
    return spawn_1.crossSpawnOther(options.bin, [
        ...(Array.isArray(options.cmd) ? options.cmd : [options.cmd]),
        ...cmd_list,
    ], options.argv, options.crossSpawnOptions);
}
exports.lazySpawnArgvSlice = lazySpawnArgvSlice;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY21kX2Rpci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNtZF9kaXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7OztHQUtHOztBQUtILCtCQUFnQztBQUNoQyxtQ0FBK0U7QUFxQy9FLFNBQWdCLDBCQUEwQixDQUFxSCxNQUFtQztJQUVqTSxhQUFhO0lBQ2IsSUFBSSxNQUFNLENBQUMsT0FBTyxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsT0FBTyxJQUFJLElBQUksRUFDcEQ7UUFDQyxhQUFhO1FBQ2IsTUFBTSxJQUFJLFNBQVMsQ0FBQyx5REFBeUQsTUFBTSxDQUFDLE9BQU8sY0FBYyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtLQUMxSDtJQUVELGFBQWE7SUFDYixJQUFJLEVBQUUsT0FBTyxHQUFHLGFBQWEsRUFBRSxPQUFPLEdBQUcsYUFBYSxFQUFFLEdBQUcsTUFBTSxDQUFDO0lBRWxFLE9BQU87UUFDTixHQUFHLE1BQU07UUFDVCxPQUFPO1FBQ1AsT0FBTztLQUNnQixDQUFBO0FBQ3pCLENBQUM7QUFqQkQsZ0VBaUJDO0FBRUQsU0FBZ0IsYUFBYSxDQUFlLElBQWE7SUFFeEQsT0FBTyxJQUFJLENBQUE7QUFDWixDQUFDO0FBSEQsc0NBR0M7QUFFRCxTQUFnQixhQUFhLENBQWUsSUFBa0I7SUFFN0QsT0FBTyxJQUFJLENBQUE7QUFDWixDQUFDO0FBSEQsc0NBR0M7QUFFRCxTQUFnQixhQUFhLENBQUMsSUFBWTtJQUV6QyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtBQUMvQyxDQUFDO0FBSEQsc0NBR0M7QUFFRCxTQUFnQixlQUFlLENBQUMsSUFBWSxFQUFFLE1BQU0sR0FBRyxPQUFPO0lBRTdELE9BQU8sYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQTtBQUNwQyxDQUFDO0FBSEQsMENBR0M7QUFFRCxTQUFnQixjQUFjLENBQUMsSUFBWSxFQUFFLElBQVksRUFBRSxNQUFNLEdBQUcsT0FBTztJQUUxRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0FBQzlDLENBQUM7QUFIRCx3Q0FHQztBQUVELFNBQWdCLGtCQUFrQixDQUFDLE9BUWxDO0lBRUEsSUFBSSxRQUFRLEdBQUcsd0JBQWdCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQztJQUV0RCxPQUFPLHVCQUFlLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRTtRQUVuQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTdELEdBQUcsUUFBUTtLQUNYLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUM3QyxDQUFDO0FBbEJELGdEQWtCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICog5Zug54K6IC4vY2xpLnRzIOS8vOS5juWvq+WHukJVRyDmiYDku6Xlj6rlpb3miZPmjonph43nt7TkuIDlgItcbiAqXG4gKiDkvYbmmK/kvp3nhLZCVUcuLi5cbiAqIOaUvuajhOS/ruato1xuICovXG5cbmltcG9ydCB5YXJncyA9IHJlcXVpcmUoJ3lhcmdzJyk7XG5pbXBvcnQgeyBDb21tYW5kTW9kdWxlLCBBcmd1bWVudHMsIEFyZ3YsIENvbW1hbmRCdWlsZGVyLCBPcHRpb25zIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgSVRTT3ZlcndyaXRlIH0gZnJvbSAndHMtdHlwZS9saWIvaGVscGVyJztcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgndXBhdGgyJyk7XG5pbXBvcnQgeyBjaGVja01vZGlsZUV4aXN0cywgY3Jvc3NTcGF3bk90aGVyLCBwcm9jZXNzQXJndlNsaWNlIH0gZnJvbSAnLi9zcGF3bic7XG5pbXBvcnQgeyBTcGF3blN5bmNPcHRpb25zIH0gZnJvbSAnY3Jvc3Mtc3Bhd24tZXh0cmEvdHlwZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVVucGFja015WWFyZ3NBcmd2XG57XG5cdGN3ZDogc3RyaW5nO1xuXHRza2lwQ2hlY2tXb3Jrc3BhY2U/OiBib29sZWFuO1xuXHR5dERlYnVnTW9kZT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCB0eXBlIElVbnBhY2tNeVlhcmdzQXJndlBhcnRpYWwgPSBQYXJ0aWFsPElVbnBhY2tNeVlhcmdzQXJndj47XG5cbmV4cG9ydCB0eXBlIElVbnBhY2tZYXJnc0FyZ3Y8VCBleHRlbmRzIEFyZ3YsIEQgPSBhbnk+ID0gVCBleHRlbmRzIEFyZ3Y8aW5mZXIgVT4gPyBVIDogRDtcblxuZXhwb3J0IHR5cGUgSUNvbW1hbmRCdWlsZGVyRm48VCA9IG9iamVjdCwgVSA9IG9iamVjdD4gPSAoYXJnczogQXJndjxUPikgPT4gQXJndjxVPjtcblxuZXhwb3J0IGludGVyZmFjZSBJQ29tbWFuZEJ1aWxkZXJPYmplY3Q8VCA9IG9iamVjdCwgVSA9IG9iamVjdD5cbntcblx0W2tleTogc3RyaW5nXTogT3B0aW9uc1xufVxuXG5leHBvcnQgdHlwZSBJQ29tbWFuZE1vZHVsZU9taXQ8VCBleHRlbmRzIElVbnBhY2tNeVlhcmdzQXJndlBhcnRpYWwgPSBJVW5wYWNrTXlZYXJnc0FyZ3YsIFUgZXh0ZW5kcyB7fSA9IElVbnBhY2tNeVlhcmdzQXJndlBhcnRpYWw+ID0gT21pdDxDb21tYW5kTW9kdWxlLCAnaGFuZGxlcicgfCAnYnVpbGRlcic+O1xuXG5leHBvcnQgdHlwZSBJQ29tbWFuZE1vZHVsZUV4cG9ydHM8VCBleHRlbmRzIElVbnBhY2tNeVlhcmdzQXJndlBhcnRpYWwgPSBJVW5wYWNrTXlZYXJnc0FyZ3YsIFUgZXh0ZW5kcyBJVW5wYWNrTXlZYXJnc0FyZ3ZQYXJ0aWFsID0gSVVucGFja015WWFyZ3NBcmd2PiA9XG5cdElDb21tYW5kTW9kdWxlT21pdFxuXHQmICh7XG5cdGJ1aWxkZXIoYXJnczogQXJndjxUPik6IEFyZ3Y8VT47XG5cdGhhbmRsZXI6IChhcmdzOiBBcmd1bWVudHM8VT4pID0+IGFueTtcbn0gfCB7XG5cdGJ1aWxkZXI6IElDb21tYW5kQnVpbGRlck9iamVjdDtcblx0aGFuZGxlcjogKGFyZ3M6IEFyZ3VtZW50czxVPikgPT4gYW55O1xufSB8IHtcblx0aGFuZGxlcjogKGFyZ3M6IEFyZ3VtZW50czxUPikgPT4gYW55O1xufSB8IHtcblx0YnVpbGRlcihhcmdzOiBBcmd2PFQ+KTogQXJndjxVPjtcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29tbWFuZE1vZHVsZUV4cG9ydHM8VCBleHRlbmRzIElVbnBhY2tNeVlhcmdzQXJndlBhcnRpYWwgPSBJVW5wYWNrTXlZYXJnc0FyZ3YsIFUgZXh0ZW5kcyBJVW5wYWNrTXlZYXJnc0FyZ3ZQYXJ0aWFsID0gSVVucGFja015WWFyZ3NBcmd2Pihtb2R1bGU6IElDb21tYW5kTW9kdWxlRXhwb3J0czxULCBVPik6IENvbW1hbmRNb2R1bGU8VCwgVT5cbntcblx0Ly8gQHRzLWlnbm9yZVxuXHRpZiAobW9kdWxlLmJ1aWxkZXIgPT0gbnVsbCAmJiBtb2R1bGUuaGFuZGxlciA9PSBudWxsKVxuXHR7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoYCdidWlsZGVyJyBvciAnaGFuZGxlcicgbXVzdCBleGlzdHMsIGJ1dCBnb3RcXG5idWlsZGVyOiAke21vZHVsZS5idWlsZGVyfVxcbmhhbmRsZXI6ICR7bW9kdWxlLmhhbmRsZXJ9YClcblx0fVxuXG5cdC8vIEB0cy1pZ25vcmVcblx0bGV0IHsgYnVpbGRlciA9IF9kdW1teUJ1aWxkZXIsIGhhbmRsZXIgPSBfZHVtbXlIYW5kbGVyIH0gPSBtb2R1bGU7XG5cblx0cmV0dXJuIHtcblx0XHQuLi5tb2R1bGUsXG5cdFx0YnVpbGRlcixcblx0XHRoYW5kbGVyLFxuXHR9IGFzIENvbW1hbmRNb2R1bGU8VCwgVT5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9kdW1teUJ1aWxkZXI8VCBleHRlbmRzIHt9Pih5YXJnOiBBcmd2PFQ+KVxue1xuXHRyZXR1cm4geWFyZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2R1bW15SGFuZGxlcjxUIGV4dGVuZHMge30+KGFyZ3M6IEFyZ3VtZW50czxUPik6IGFueVxue1xuXHRyZXR1cm4gYXJnc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmFzZW5hbWVTdHJpcChuYW1lOiBzdHJpbmcpXG57XG5cdHJldHVybiBwYXRoLmJhc2VuYW1lKG5hbWUsIHBhdGguZXh0bmFtZShuYW1lKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbW1hbmREaXJTdHJpcChuYW1lOiBzdHJpbmcsIHN1ZmZpeCA9ICdfY21kcycpXG57XG5cdHJldHVybiBiYXNlbmFtZVN0cmlwKG5hbWUpICsgc3VmZml4XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21tYW5kRGlySm9pbihyb290OiBzdHJpbmcsIG5hbWU6IHN0cmluZywgc3VmZml4ID0gJ19jbWRzJylcbntcblx0cmV0dXJuIHBhdGguam9pbihyb290LCBjb21tYW5kRGlyU3RyaXAobmFtZSkpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsYXp5U3Bhd25Bcmd2U2xpY2Uob3B0aW9uczoge1xuXHRiaW46IHN0cmluZyxcblx0Y29tbWFuZDogc3RyaW5nIHwgc3RyaW5nW10sXG5cdGNtZD86IHN0cmluZyB8IHN0cmluZ1tdLFxuXHRhcmd2OiB7XG5cdFx0Y3dkOiBzdHJpbmdcblx0fSxcblx0Y3Jvc3NTcGF3bk9wdGlvbnM/OiBTcGF3blN5bmNPcHRpb25zXG59KVxue1xuXHRsZXQgY21kX2xpc3QgPSBwcm9jZXNzQXJndlNsaWNlKG9wdGlvbnMuY29tbWFuZCkuYXJndjtcblxuXHRyZXR1cm4gY3Jvc3NTcGF3bk90aGVyKG9wdGlvbnMuYmluLCBbXG5cblx0XHQuLi4oQXJyYXkuaXNBcnJheShvcHRpb25zLmNtZCkgPyBvcHRpb25zLmNtZCA6IFtvcHRpb25zLmNtZF0pLFxuXG5cdFx0Li4uY21kX2xpc3QsXG5cdF0sIG9wdGlvbnMuYXJndiwgb3B0aW9ucy5jcm9zc1NwYXduT3B0aW9ucyk7XG59XG4iXX0=