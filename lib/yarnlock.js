"use strict";
/**
 * Created by user on 2019/5/17.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const lockfile = require("@yarnpkg/lockfile");
const fs = require("fs-extra");
function parseFull(text) {
    return lockfile.parse(text.toString());
}
exports.parseFull = parseFull;
function parse(text) {
    return parseFull(text).object;
}
exports.parse = parse;
function stringify(json) {
    return lockfile.stringify(json);
}
exports.stringify = stringify;
function readYarnLockfile(file) {
    let data = fs.readFileSync(file);
    return parse(data);
}
exports.readYarnLockfile = readYarnLockfile;
function stripDepsName(name) {
    let m = name.match(/^(.+)@(.+)$/);
    if (!m) {
        throw new TypeError(`name is not dependencies, ${name}`);
    }
    let r = m.slice(1);
    //console.dir(r);
    //process.exit()
    return r;
}
exports.stripDepsName = stripDepsName;
function filterResolutions(pkg, yarnlock) {
    if (pkg.resolutions) {
        let ks = Object.keys(yarnlock)
            .filter(k => {
            let n = stripDepsName(k)[0];
            return pkg.resolutions[n] != null;
        });
        return ks
            .reduce(function (a, k) {
            let n = stripDepsName(k);
            a.deps[n[0]] = a.deps[n[0]] || [];
            a.deps[n[0]][n[1]] = yarnlock[k];
            return a;
        }, {
            names: ks,
            deps: {},
        });
    }
    return null;
}
exports.filterResolutions = filterResolutions;
function removeResolutions(pkg, yarnlock_old) {
    let result = filterResolutions(pkg, yarnlock_old);
    let yarnlock_new = result.names
        // @ts-ignore
        .reduce(function (a, b) {
        delete a[b];
        return a;
    }, {
        ...yarnlock_old,
    });
    let yarnlock_changed = !!result.names.length;
    return {
        /**
         * 執行前的 yarn.lock
         */
        yarnlock_old,
        /**
         * 執行後的 yarn.lock
         */
        yarnlock_new,
        /**
         * yarn.lock 是否有變動
         */
        yarnlock_changed,
        result,
    };
}
exports.removeResolutions = removeResolutions;
let pkg = fs.readJSONSync('G:/Users/The Project/nodejs-yarn/ws-create-yarn-workspaces/package.json');
let y = readYarnLockfile('G:/Users/The Project/nodejs-yarn/ws-create-yarn-workspaces/yarn.lock');
console.dir(removeResolutions(pkg, y), {
    depth: null,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWFybmxvY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ5YXJubG9jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBRUgsOENBQStDO0FBQy9DLCtCQUFnQztBQXFCaEMsU0FBZ0IsU0FBUyxDQUFDLElBQXFCO0lBRTlDLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQTtBQUN2QyxDQUFDO0FBSEQsOEJBR0M7QUFFRCxTQUFnQixLQUFLLENBQUMsSUFBcUI7SUFFMUMsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFBO0FBQzlCLENBQUM7QUFIRCxzQkFHQztBQUVELFNBQWdCLFNBQVMsQ0FBQyxJQUFZO0lBRXJDLE9BQU8sUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNoQyxDQUFDO0FBSEQsOEJBR0M7QUFFRCxTQUFnQixnQkFBZ0IsQ0FBQyxJQUFZO0lBRTVDLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFaEMsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDbkIsQ0FBQztBQUxELDRDQUtDO0FBRUQsU0FBZ0IsYUFBYSxDQUFDLElBQVk7SUFFekMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUVsQyxJQUFJLENBQUMsQ0FBQyxFQUNOO1FBQ0MsTUFBTSxJQUFJLFNBQVMsQ0FBQyw2QkFBNkIsSUFBSSxFQUFFLENBQUMsQ0FBQTtLQUN4RDtJQUVELElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFxQixDQUFDO0lBRXZDLGlCQUFpQjtJQUNqQixnQkFBZ0I7SUFFaEIsT0FBTyxDQUFDLENBQUE7QUFDVCxDQUFDO0FBZkQsc0NBZUM7QUFFRCxTQUFnQixpQkFBaUIsQ0FBOEMsR0FFOUUsRUFBRSxRQUFxQztJQUV2QyxJQUFJLEdBQUcsQ0FBQyxXQUFXLEVBQ25CO1FBQ0MsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7YUFDNUIsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBRVgsSUFBSSxDQUFDLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVCLE9BQU8sR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUE7UUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFFSixPQUFPLEVBQUU7YUFDUCxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztZQUVyQixJQUFJLENBQUMsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFekIsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUVsQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVqQyxPQUFPLENBQUMsQ0FBQztRQUNWLENBQUMsRUFBRTtZQUNGLEtBQUssRUFBRSxFQUFFO1lBQ1QsSUFBSSxFQUFFLEVBQUU7U0FJUixDQUFDLENBQ0Q7S0FDRjtJQUlELE9BQU8sSUFBSSxDQUFDO0FBQ2IsQ0FBQztBQXBDRCw4Q0FvQ0M7QUFFRCxTQUFnQixpQkFBaUIsQ0FBOEMsR0FFOUUsRUFBRSxZQUF5QztJQUUzQyxJQUFJLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFFbEQsSUFBSSxZQUFZLEdBQWdDLE1BQU0sQ0FBQyxLQUFLO1FBQzNELGFBQWE7U0FDWixNQUFNLENBQUMsVUFBVSxDQUE4QixFQUFFLENBQUM7UUFFbEQsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFWixPQUFPLENBQUMsQ0FBQztJQUNWLENBQUMsRUFBRTtRQUNGLEdBQUcsWUFBWTtLQUNmLENBQUMsQ0FBQztJQUVKLElBQUksZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBRTdDLE9BQU87UUFDTjs7V0FFRztRQUNILFlBQVk7UUFDWjs7V0FFRztRQUNILFlBQVk7UUFDWjs7V0FFRztRQUNILGdCQUFnQjtRQUVoQixNQUFNO0tBQ04sQ0FBQTtBQUNGLENBQUM7QUFuQ0QsOENBbUNDO0FBRUQsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyx5RUFBeUUsQ0FBMkMsQ0FBQztBQUUvSSxJQUFJLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxzRUFBc0UsQ0FBQyxDQUFBO0FBRWhHLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFO0lBQ3RDLEtBQUssRUFBRSxJQUFJO0NBQ1gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAxOS81LzE3LlxuICovXG5cbmltcG9ydCBsb2NrZmlsZSA9IHJlcXVpcmUoJ0B5YXJucGtnL2xvY2tmaWxlJyk7XG5pbXBvcnQgZnMgPSByZXF1aXJlKCdmcy1leHRyYScpO1xuaW1wb3J0IHsgSVRTVmFsdWVPZkFycmF5LCBJVFNBcnJheUxpc3RNYXliZVJlYWRvbmx5IH0gZnJvbSAndHMtdHlwZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVlhcm5Mb2NrZmlsZVBhcnNlRnVsbDxUIGV4dGVuZHMgSVRTQXJyYXlMaXN0TWF5YmVSZWFkb25seTxzdHJpbmc+ID0gc3RyaW5nW10+XG57XG5cdHR5cGU6IHN0cmluZztcblx0b2JqZWN0OiBJWWFybkxvY2tmaWxlUGFyc2VPYmplY3Q8VD5cbn1cblxuZXhwb3J0IHR5cGUgSVlhcm5Mb2NrZmlsZVBhcnNlT2JqZWN0PFQgZXh0ZW5kcyBJVFNBcnJheUxpc3RNYXliZVJlYWRvbmx5PHN0cmluZz4gPSBzdHJpbmdbXT4gPSBSZWNvcmQ8c3RyaW5nLCBJWWFybkxvY2tmaWxlUGFyc2VPYmplY3RSb3c8VD4+XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVlhcm5Mb2NrZmlsZVBhcnNlT2JqZWN0Um93PFQgZXh0ZW5kcyBJVFNBcnJheUxpc3RNYXliZVJlYWRvbmx5PHN0cmluZz4gPSBzdHJpbmdbXT5cbntcblx0dmVyc2lvbjogc3RyaW5nO1xuXHRyZXNvbHZlZDogc3RyaW5nO1xuXHRpbnRlZ3JpdHk6IHN0cmluZztcblx0ZGVwZW5kZW5jaWVzPzogSURlcGVuZGVuY2llczxUPjtcbn1cblxuZXhwb3J0IHR5cGUgSURlcGVuZGVuY2llczxUIGV4dGVuZHMgSVRTQXJyYXlMaXN0TWF5YmVSZWFkb25seTxzdHJpbmc+ID0gc3RyaW5nW10+ID0gUmVjb3JkPElUU1ZhbHVlT2ZBcnJheTxUPiwgc3RyaW5nPjtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRnVsbCh0ZXh0OiBzdHJpbmcgfCBCdWZmZXIpOiBJWWFybkxvY2tmaWxlUGFyc2VGdWxsXG57XG5cdHJldHVybiBsb2NrZmlsZS5wYXJzZSh0ZXh0LnRvU3RyaW5nKCkpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZSh0ZXh0OiBzdHJpbmcgfCBCdWZmZXIpXG57XG5cdHJldHVybiBwYXJzZUZ1bGwodGV4dCkub2JqZWN0XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnkoanNvbjogb2JqZWN0KTogc3RyaW5nXG57XG5cdHJldHVybiBsb2NrZmlsZS5zdHJpbmdpZnkoanNvbilcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRZYXJuTG9ja2ZpbGUoZmlsZTogc3RyaW5nKVxue1xuXHRsZXQgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhmaWxlKVxuXG5cdHJldHVybiBwYXJzZShkYXRhKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RyaXBEZXBzTmFtZShuYW1lOiBzdHJpbmcpOiBbc3RyaW5nLCBzdHJpbmddXG57XG5cdGxldCBtID0gbmFtZS5tYXRjaCgvXiguKylAKC4rKSQvKTtcblxuXHRpZiAoIW0pXG5cdHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGBuYW1lIGlzIG5vdCBkZXBlbmRlbmNpZXMsICR7bmFtZX1gKVxuXHR9XG5cblx0bGV0IHIgPSBtLnNsaWNlKDEpIGFzIFtzdHJpbmcsIHN0cmluZ107XG5cblx0Ly9jb25zb2xlLmRpcihyKTtcblx0Ly9wcm9jZXNzLmV4aXQoKVxuXG5cdHJldHVybiByXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJSZXNvbHV0aW9uczxUIGV4dGVuZHMgSVRTQXJyYXlMaXN0TWF5YmVSZWFkb25seTxzdHJpbmc+Pihwa2c6IHtcblx0cmVzb2x1dGlvbnM/OiBJRGVwZW5kZW5jaWVzPFQ+XG59LCB5YXJubG9jazogSVlhcm5Mb2NrZmlsZVBhcnNlT2JqZWN0PFQ+KVxue1xuXHRpZiAocGtnLnJlc29sdXRpb25zKVxuXHR7XG5cdFx0bGV0IGtzID0gT2JqZWN0LmtleXMoeWFybmxvY2spXG5cdFx0XHQuZmlsdGVyKGsgPT5cblx0XHRcdHtcblx0XHRcdFx0bGV0IG4gPSBzdHJpcERlcHNOYW1lKGspWzBdO1xuXHRcdFx0XHRyZXR1cm4gcGtnLnJlc29sdXRpb25zW25dICE9IG51bGxcblx0XHRcdH0pO1xuXG5cdFx0cmV0dXJuIGtzXG5cdFx0XHQucmVkdWNlKGZ1bmN0aW9uIChhLCBrKVxuXHRcdFx0e1xuXHRcdFx0XHRsZXQgbiA9IHN0cmlwRGVwc05hbWUoayk7XG5cblx0XHRcdFx0YS5kZXBzW25bMF1dID0gYS5kZXBzW25bMF1dIHx8IFtdO1xuXG5cdFx0XHRcdGEuZGVwc1tuWzBdXVtuWzFdXSA9IHlhcm5sb2NrW2tdO1xuXG5cdFx0XHRcdHJldHVybiBhO1xuXHRcdFx0fSwge1xuXHRcdFx0XHRuYW1lczoga3MsXG5cdFx0XHRcdGRlcHM6IHt9LFxuXHRcdFx0fSBhcyB7XG5cdFx0XHRcdG5hbWVzOiBULFxuXHRcdFx0XHRkZXBzOiBSZWNvcmQ8SVRTVmFsdWVPZkFycmF5PFQgJiBbJyonXT4sIElZYXJuTG9ja2ZpbGVQYXJzZU9iamVjdFJvdz5cblx0XHRcdH0pXG5cdFx0XHQ7XG5cdH1cblxuXG5cblx0cmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVSZXNvbHV0aW9uczxUIGV4dGVuZHMgSVRTQXJyYXlMaXN0TWF5YmVSZWFkb25seTxzdHJpbmc+Pihwa2c6IHtcblx0cmVzb2x1dGlvbnM/OiBJRGVwZW5kZW5jaWVzPFQ+XG59LCB5YXJubG9ja19vbGQ6IElZYXJuTG9ja2ZpbGVQYXJzZU9iamVjdDxUPilcbntcblx0bGV0IHJlc3VsdCA9IGZpbHRlclJlc29sdXRpb25zKHBrZywgeWFybmxvY2tfb2xkKTtcblxuXHRsZXQgeWFybmxvY2tfbmV3OiBJWWFybkxvY2tmaWxlUGFyc2VPYmplY3Q8VD4gPSByZXN1bHQubmFtZXNcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0LnJlZHVjZShmdW5jdGlvbiAoYTogSVlhcm5Mb2NrZmlsZVBhcnNlT2JqZWN0PFQ+LCBiKVxuXHRcdHtcblx0XHRcdGRlbGV0ZSBhW2JdO1xuXG5cdFx0XHRyZXR1cm4gYTtcblx0XHR9LCB7XG5cdFx0XHQuLi55YXJubG9ja19vbGQsXG5cdFx0fSk7XG5cblx0bGV0IHlhcm5sb2NrX2NoYW5nZWQgPSAhIXJlc3VsdC5uYW1lcy5sZW5ndGg7XG5cblx0cmV0dXJuIHtcblx0XHQvKipcblx0XHQgKiDln7fooYzliY3nmoQgeWFybi5sb2NrXG5cdFx0ICovXG5cdFx0eWFybmxvY2tfb2xkLFxuXHRcdC8qKlxuXHRcdCAqIOWft+ihjOW+jOeahCB5YXJuLmxvY2tcblx0XHQgKi9cblx0XHR5YXJubG9ja19uZXcsXG5cdFx0LyoqXG5cdFx0ICogeWFybi5sb2NrIOaYr+WQpuacieiuiuWLlVxuXHRcdCAqL1xuXHRcdHlhcm5sb2NrX2NoYW5nZWQsXG5cblx0XHRyZXN1bHQsXG5cdH1cbn1cblxubGV0IHBrZyA9IGZzLnJlYWRKU09OU3luYygnRzovVXNlcnMvVGhlIFByb2plY3Qvbm9kZWpzLXlhcm4vd3MtY3JlYXRlLXlhcm4td29ya3NwYWNlcy9wYWNrYWdlLmpzb24nKSBhcyB0eXBlb2YgaW1wb3J0KCcuLi8uLi8uLi9wYWNrYWdlLmpzb24nKTtcblxubGV0IHkgPSByZWFkWWFybkxvY2tmaWxlKCdHOi9Vc2Vycy9UaGUgUHJvamVjdC9ub2RlanMteWFybi93cy1jcmVhdGUteWFybi13b3Jrc3BhY2VzL3lhcm4ubG9jaycpXG5cbmNvbnNvbGUuZGlyKHJlbW92ZVJlc29sdXRpb25zKHBrZywgeSksIHtcblx0ZGVwdGg6IG51bGwsXG59KTtcbiJdfQ==