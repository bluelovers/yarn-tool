{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";AAAA;;GAEG;;AAEH,kEAAmE;AACnE,kCAAmC;AACnC,kEAA8D;AAC9D,4DAAgE;AAChE,+CAAwC;AACxC,6BAA8B;AAC9B,+BAAgC;AAEnB,QAAA,OAAO,GAAG,IAAI,uBAAQ,EAAE,CAAC;AAEzB,QAAA,YAAY,GAAG,IAAI,uBAAQ,CAAC,IAAI,EAAE;IAC9C,KAAK,EAAE,IAAI;IACX,IAAI,EAAE,IAAI;CACV,CAAC,CAAC;AAEH,SAAgB,QAAQ,CAAC,OAGxB;IAEA,IAAI,YAAoB,CAAC;IAEzB,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAC/B;QACC,YAAY,GAAG,qBAAqB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;KAClD;IAED,IAAI,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAEnC,OAAO;QACN,GAAG;QACH,EAAE,EAAE,YAAY;QAChB,IAAI,EAAE,YAAY,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,YAAY;KAC/C,CAAA;AACF,CAAC;AAnBD,4BAmBC;AAED,SAAgB,YAAY,CAAC,YAAoB,EAAE,YAAoB;IAEtE,IAAI,EAAE,GAAa,EAAE,CAAC;IAEtB,IAAI,CAAC,GAAG,0BAAW,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC;SAC3D,GAAG,CAAC,4BAAgB,CAAC,cAAc,CAAC;SACpC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CACrB;IAED,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;AACd,CAAC;AAVD,oCAUC;AAED,SAAgB,UAAU,CAAC,IAAY;IAEtC,IAAI,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IAEjD,IAAI,eAAe,GAAG,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;IAEnD,IAAI,YAAY,GAAG,eAAe,IAAI,EAAE,CAAC,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;IAE7E,OAAO;QACN,aAAa;QACb,eAAe;QACf,YAAY;KACZ,CAAA;AACF,CAAC;AAbD,gCAaC;AAED,SAAgB,SAAS,CAAC,IAAc,EAAE,IAEzC;IAEA,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,GAAG,GAAG,CAAC,CAAA;AAChD,CAAC;AALD,8BAKC;AAED,kBAAe,OAAmC,CAAC","sourcesContent":["/**\n * Created by user on 2019/4/30.\n */\n\nimport findYarnWorkspaceRoot = require('find-yarn-workspace-root');\nimport pkgDir = require('pkg-dir');\nimport { DiffService } from 'yarn-lock-diff/lib/diff-service';\nimport { FormatterService } from 'yarn-lock-diff/lib/formatter';\nimport { Console2 } from 'debug-color2';\nimport path = require('path');\nimport fs = require('fs-extra');\n\nexport const console = new Console2();\n\nexport const consoleDebug = new Console2(null, {\n\tlabel: true,\n\ttime: true,\n});\n\nexport function findRoot(options: {\n\tcwd: string,\n\tskipCheckWorkspace?: string,\n})\n{\n\tlet hasWorkspace: string;\n\n\tif (!options.skipCheckWorkspace)\n\t{\n\t\thasWorkspace = findYarnWorkspaceRoot(options.cwd);\n\t}\n\n\tlet pkg = pkgDir.sync(options.cwd);\n\n\treturn {\n\t\tpkg,\n\t\tws: hasWorkspace,\n\t\troot: hasWorkspace == null ? pkg : hasWorkspace,\n\t}\n}\n\nexport function yarnLockDiff(yarnlock_old: string, yarnlock_new: string): string\n{\n\tlet r2: string[] = [];\n\n\tlet r = DiffService.buildDiff([yarnlock_old], [yarnlock_new])\n\t\t.map(FormatterService.buildDiffTable)\n\t\t.map(r => r2.push(r))\n\t;\n\n\treturn r2[0];\n}\n\nexport function fsYarnLock(root: string)\n{\n\tlet yarnlock_file = path.join(root, 'yarn.lock');\n\n\tlet yarnlock_exists = fs.existsSync(yarnlock_file);\n\n\tlet yarnlock_old = yarnlock_exists && fs.readFileSync(yarnlock_file, 'utf8');\n\n\treturn {\n\t\tyarnlock_file,\n\t\tyarnlock_exists,\n\t\tyarnlock_old,\n\t}\n}\n\nexport function lazyFlags(keys: string[], argv: {\n\t[k: string]: boolean,\n})\n{\n\treturn keys.map(key => argv[key] && '--' + key)\n}\n\nexport default exports as typeof import('./index');\n"]}