#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const yargs = require("yargs");
const updateNotifier = require("update-notifier");
const pkg = require("../package.json");
const path = require("upath2");
const index_1 = require("../lib/index");
const cli_1 = require("../lib/cli");
const osLocale = require("os-locale");
const isNpx = require("is-npx");
!isNpx() && updateNotifier({ pkg }).notify();
let cli = yargs
    .option('cwd', {
    desc: `current working directory or package directory`,
    normalize: true,
    default: process.cwd(),
})
    .option('skipCheckWorkspace', {
    desc: `this options is for search yarn.lock, pkg root, workspace root, not same as --ignore-workspace-root-check`,
    boolean: true,
})
    .option('yt-debug-mode', {
    boolean: true,
})
    .command({
    command: 'help',
    describe: 'Show help',
    aliases: ['h'],
    builder(yarg) {
        require('yargs').showHelp('log');
        return yarg;
    },
    handler: cli_1.dummy_handler,
})
    .command({
    command: 'version',
    describe: 'Show version',
    builder(yarg) {
        return yarg;
    },
    async handler() {
        return Promise.resolve().then(() => require('../package.json')).then(v => index_1.console.log(v.version));
    },
})
    .recommendCommands()
    .locale(osLocale.sync())
    .commandDir(path.join(__dirname, 'cmds'))
    .help(true)
    .showHelpOnFail(true)
    .strict()
    .demandCommand()
    .scriptName('yt');
cli.argv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWFybi10b29sLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsieWFybi10b29sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLHVDQUFxQztBQUNyQywrQkFBZ0M7QUFDaEMsa0RBQW1EO0FBQ25ELHVDQUF3QztBQUN4QywrQkFBZ0M7QUFHaEMsd0NBQTBFO0FBUTFFLG9DQU1vQjtBQWVwQixzQ0FBdUM7QUFDdkMsZ0NBQWlDO0FBRWpDLENBQUMsS0FBSyxFQUFFLElBQUksY0FBYyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUU3QyxJQUFJLEdBQUcsR0FBRyxLQUFLO0tBQ2IsTUFBTSxDQUFDLEtBQUssRUFBRTtJQUNkLElBQUksRUFBRSxnREFBZ0Q7SUFDdEQsU0FBUyxFQUFFLElBQUk7SUFDZixPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRTtDQUN0QixDQUFDO0tBQ0QsTUFBTSxDQUFDLG9CQUFvQixFQUFFO0lBQzdCLElBQUksRUFBRSwyR0FBMkc7SUFDakgsT0FBTyxFQUFFLElBQUk7Q0FDYixDQUFDO0tBQ0QsTUFBTSxDQUFDLGVBQWUsRUFBRTtJQUN4QixPQUFPLEVBQUUsSUFBSTtDQUNiLENBQUM7S0FDRCxPQUFPLENBQUM7SUFDUixPQUFPLEVBQUUsTUFBTTtJQUNmLFFBQVEsRUFBRSxXQUFXO0lBQ3JCLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQztJQUNkLE9BQU8sQ0FBQyxJQUFJO1FBRVgsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqQyxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFDRCxPQUFPLEVBQUUsbUJBQWE7Q0FDdEIsQ0FBQztLQUNELE9BQU8sQ0FBQztJQUNSLE9BQU8sRUFBRSxTQUFTO0lBQ2xCLFFBQVEsRUFBRSxjQUFjO0lBQ3hCLE9BQU8sQ0FBQyxJQUFJO1FBRVgsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBQ0QsS0FBSyxDQUFDLE9BQU87UUFFWixPQUFPLHFDQUFPLGlCQUFpQixHQUM3QixJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxlQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUNqQztJQUNILENBQUM7Q0FDRCxDQUFDO0tBQ0QsaUJBQWlCLEVBQUU7S0FDbkIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUN2QixVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDeEMsSUFBSSxDQUFDLElBQUksQ0FBQztLQUNWLGNBQWMsQ0FBQyxJQUFJLENBQUM7S0FDcEIsTUFBTSxFQUFFO0tBQ1IsYUFBYSxFQUFFO0tBQ2YsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUNqQjtBQUVELEdBQUcsQ0FBQyxJQUFJLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5cbmltcG9ydCAnc291cmNlLW1hcC1zdXBwb3J0L3JlZ2lzdGVyJztcbmltcG9ydCB5YXJncyA9IHJlcXVpcmUoJ3lhcmdzJyk7XG5pbXBvcnQgdXBkYXRlTm90aWZpZXIgPSByZXF1aXJlKCd1cGRhdGUtbm90aWZpZXInKTtcbmltcG9ydCBwa2cgPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKTtcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgndXBhdGgyJyk7XG5pbXBvcnQgZnMgPSByZXF1aXJlKCdmcy1leHRyYScpO1xuaW1wb3J0IGNyb3NzU3Bhd24gPSByZXF1aXJlKCdjcm9zcy1zcGF3bi1leHRyYScpO1xuaW1wb3J0IHsgY29uc29sZSwgY29uc29sZURlYnVnLCBmaW5kUm9vdCwgZnNZYXJuTG9ja30gZnJvbSAnLi4vbGliL2luZGV4JztcbmltcG9ydCB7IERlZHVwZSwgaW5mb0Zyb21EZWR1cGVDYWNoZSwgd3JhcERlZHVwZSB9IGZyb20gJy4uL2xpYi9jbGkvZGVkdXBlJztcbmltcG9ydCB7IGV4aXN0c0RlcGVuZGVuY2llcywgZmxhZ3NZYXJuQWRkLCBsaXN0VG9UeXBlcywgc2V0dXBZYXJuQWRkVG9ZYXJncyB9IGZyb20gJy4uL2xpYi9jbGkvYWRkJztcbmltcG9ydCBzZXR1cFlhcm5JbnN0YWxsVG9ZYXJncyBmcm9tICcuLi9saWIvY2xpL2luc3RhbGwnO1xuaW1wb3J0IHNlbXZlciA9IHJlcXVpcmUoJ3NlbXZlcicpO1xuaW1wb3J0IHNldHVwSW5pdFRvWWFyZ3MgZnJvbSAnbnBtLWluaXQyL2xpYi95YXJncy1zZXR0aW5nJztcbmltcG9ydCB7IHNvcnRQYWNrYWdlSnNvbiB9IGZyb20gJ3NvcnQtcGFja2FnZS1qc29uJztcblxuaW1wb3J0IHtcblx0Y3JlYXRlX2NvbW1hbmQsXG5cdGNyZWF0ZV9jb21tYW5kMixcblx0ZHVtbXlfYnVpbGRlciwgZHVtbXlfaGFuZGxlcixcblx0SVVucGFja015WWFyZ3NBcmd2LFxuXHRJVW5wYWNrWWFyZ3NBcmd2LFxufSBmcm9tICcuLi9saWIvY2xpJztcbmltcG9ydCB7IHJlYWRQYWNrYWdlSnNvbiwgd3JpdGVKU09OU3luYywgd3JpdGVQYWNrYWdlSnNvbiB9IGZyb20gJy4uL2xpYi9wa2cnO1xuaW1wb3J0IElQYWNrYWdlSnNvbiBmcm9tICdAdHMtdHlwZS9wYWNrYWdlLWR0cy9wYWNrYWdlLWpzb24nO1xuaW1wb3J0IHNldHVwTmN1VG9ZYXJncywgeyBucG1DaGVja1VwZGF0ZXMgfSBmcm9tICcuLi9saWIvY2xpL25jdSc7XG5pbXBvcnQge1xuXHRmaWx0ZXJSZXNvbHV0aW9ucyxcblx0SURlcGVuZGVuY2llcyxcblx0SVlhcm5Mb2NrZmlsZVBhcnNlT2JqZWN0Um93LFxuXHRwYXJzZSBhcyBwYXJzZVlhcm5Mb2NrLFxuXHRzdHJpbmdpZnkgYXMgc3RyaW5naWZ5WWFybkxvY2ssXG5cdHJlbW92ZVJlc29sdXRpb25zQ29yZSwgc3RyaXBEZXBzTmFtZSwgeWFybkxvY2tEaWZmLFxufSBmcm9tICcuLi9saWIveWFybmxvY2snO1xuaW1wb3J0IHsgSVRTSXRlcmF0b3JMYXp5LCBJVFNWYWx1ZU9mQXJyYXkgfSBmcm9tICd0cy10eXBlJztcbmltcG9ydCB7IHNldHVwV29ya3NwYWNlc0luaXRUb1lhcmdzIH0gZnJvbSAnY3JlYXRlLXlhcm4td29ya3NwYWNlcy95YXJncy1zZXR0aW5nJztcbmltcG9ydCB7IGNoZWNrTW9kaWxlRXhpc3RzLCBjcm9zc1NwYXduT3RoZXIsIHByb2Nlc3NBcmd2U2xpY2UgfSBmcm9tICcuLi9saWIvc3Bhd24nO1xuaW1wb3J0IG9zTG9jYWxlID0gcmVxdWlyZSgnb3MtbG9jYWxlJyk7XG5pbXBvcnQgaXNOcHggPSByZXF1aXJlKCdpcy1ucHgnKTtcblxuIWlzTnB4KCkgJiYgdXBkYXRlTm90aWZpZXIoeyBwa2cgfSkubm90aWZ5KCk7XG5cbmxldCBjbGkgPSB5YXJnc1xuXHQub3B0aW9uKCdjd2QnLCB7XG5cdFx0ZGVzYzogYGN1cnJlbnQgd29ya2luZyBkaXJlY3Rvcnkgb3IgcGFja2FnZSBkaXJlY3RvcnlgLFxuXHRcdG5vcm1hbGl6ZTogdHJ1ZSxcblx0XHRkZWZhdWx0OiBwcm9jZXNzLmN3ZCgpLFxuXHR9KVxuXHQub3B0aW9uKCdza2lwQ2hlY2tXb3Jrc3BhY2UnLCB7XG5cdFx0ZGVzYzogYHRoaXMgb3B0aW9ucyBpcyBmb3Igc2VhcmNoIHlhcm4ubG9jaywgcGtnIHJvb3QsIHdvcmtzcGFjZSByb290LCBub3Qgc2FtZSBhcyAtLWlnbm9yZS13b3Jrc3BhY2Utcm9vdC1jaGVja2AsXG5cdFx0Ym9vbGVhbjogdHJ1ZSxcblx0fSlcblx0Lm9wdGlvbigneXQtZGVidWctbW9kZScsIHtcblx0XHRib29sZWFuOiB0cnVlLFxuXHR9KVxuXHQuY29tbWFuZCh7XG5cdFx0Y29tbWFuZDogJ2hlbHAnLFxuXHRcdGRlc2NyaWJlOiAnU2hvdyBoZWxwJyxcblx0XHRhbGlhc2VzOiBbJ2gnXSxcblx0XHRidWlsZGVyKHlhcmcpXG5cdFx0e1xuXHRcdFx0cmVxdWlyZSgneWFyZ3MnKS5zaG93SGVscCgnbG9nJyk7XG5cdFx0XHRyZXR1cm4geWFyZztcblx0XHR9LFxuXHRcdGhhbmRsZXI6IGR1bW15X2hhbmRsZXIsXG5cdH0pXG5cdC5jb21tYW5kKHtcblx0XHRjb21tYW5kOiAndmVyc2lvbicsXG5cdFx0ZGVzY3JpYmU6ICdTaG93IHZlcnNpb24nLFxuXHRcdGJ1aWxkZXIoeWFyZylcblx0XHR7XG5cdFx0XHRyZXR1cm4geWFyZztcblx0XHR9LFxuXHRcdGFzeW5jIGhhbmRsZXIoKVxuXHRcdHtcblx0XHRcdHJldHVybiBpbXBvcnQoJy4uL3BhY2thZ2UuanNvbicpXG5cdFx0XHRcdC50aGVuKHYgPT4gY29uc29sZS5sb2codi52ZXJzaW9uKSlcblx0XHRcdFx0O1xuXHRcdH0sXG5cdH0pXG5cdC5yZWNvbW1lbmRDb21tYW5kcygpXG5cdC5sb2NhbGUob3NMb2NhbGUuc3luYygpKVxuXHQuY29tbWFuZERpcihwYXRoLmpvaW4oX19kaXJuYW1lLCAnY21kcycpKVxuXHQuaGVscCh0cnVlKVxuXHQuc2hvd0hlbHBPbkZhaWwodHJ1ZSlcblx0LnN0cmljdCgpXG5cdC5kZW1hbmRDb21tYW5kKClcblx0LnNjcmlwdE5hbWUoJ3l0JylcbjtcblxuY2xpLmFyZ3Y7XG5cbiJdfQ==