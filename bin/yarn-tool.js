#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const yargs = require("yargs");
//import updateNotifier = require('update-notifier');
//import pkg = require('../package.json');
const path = require("upath2");
const osLocale = require("os-locale");
const update_notifier_1 = require("@yarn-tool/update-notifier");
//import isNpx = require('is-npx');
if (path.extname(__filename) === '.js' && !process.argv.filter(v => {
    if (typeof v === 'string') {
        return v.includes('ts-node') || v.includes('source-map-support');
    }
}).length) {
    require('source-map-support').install({
        hookRequire: true
    });
}
update_notifier_1.updateNotifier(path.join(__dirname, '..'));
let cli = yargs
    .option('cwd', {
    desc: `current working directory or package directory`,
    normalize: true,
    default: process.cwd(),
})
    .option('skipCheckWorkspace', {
    desc: `this options is for search yarn.lock, pkg root, workspace root, not same as --ignore-workspace-root-check`,
    boolean: true,
})
    .option('yt-debug-mode', {
    boolean: true,
})
    .alias('v', 'version')
    .alias('h', 'help')
    .help('help')
    .recommendCommands()
    .locale(osLocale.sync())
    .commandDir(path.join(__dirname, 'cmds'))
    .help(true)
    .showHelpOnFail(true)
    .strict()
    .demandCommand()
    .scriptName('yt');
cli.argv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWFybi10b29sLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsieWFybi10b29sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUdBLCtCQUFnQztBQUNoQyxxREFBcUQ7QUFDckQsMENBQTBDO0FBQzFDLCtCQUFnQztBQWdDaEMsc0NBQXVDO0FBQ3ZDLGdFQUE0RDtBQUM1RCxtQ0FBbUM7QUFHbkMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFO0lBQ2xFLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxFQUN6QjtRQUNDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFDLENBQUE7S0FDaEU7QUFDRixDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQ1Q7SUFDQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDckMsV0FBVyxFQUFFLElBQUk7S0FDakIsQ0FBQyxDQUFDO0NBQ0g7QUFFRCxnQ0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7QUFFM0MsSUFBSSxHQUFHLEdBQUcsS0FBSztLQUNiLE1BQU0sQ0FBQyxLQUFLLEVBQUU7SUFDZCxJQUFJLEVBQUUsZ0RBQWdEO0lBQ3RELFNBQVMsRUFBRSxJQUFJO0lBQ2YsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUU7Q0FDdEIsQ0FBQztLQUNELE1BQU0sQ0FBQyxvQkFBb0IsRUFBRTtJQUM3QixJQUFJLEVBQUUsMkdBQTJHO0lBQ2pILE9BQU8sRUFBRSxJQUFJO0NBQ2IsQ0FBQztLQUNELE1BQU0sQ0FBQyxlQUFlLEVBQUU7SUFDeEIsT0FBTyxFQUFFLElBQUk7Q0FDYixDQUFDO0tBQ0QsS0FBSyxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUM7S0FDckIsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUM7S0FDbEIsSUFBSSxDQUFDLE1BQU0sQ0FBQztLQUNaLGlCQUFpQixFQUFFO0tBQ25CLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7S0FDdkIsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQ3hDLElBQUksQ0FBQyxJQUFJLENBQUM7S0FDVixjQUFjLENBQUMsSUFBSSxDQUFDO0tBQ3BCLE1BQU0sRUFBRTtLQUNSLGFBQWEsRUFBRTtLQUNmLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FDakI7QUFFRCxHQUFHLENBQUMsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuXG5cbmltcG9ydCB5YXJncyA9IHJlcXVpcmUoJ3lhcmdzJyk7XG4vL2ltcG9ydCB1cGRhdGVOb3RpZmllciA9IHJlcXVpcmUoJ3VwZGF0ZS1ub3RpZmllcicpO1xuLy9pbXBvcnQgcGtnID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJyk7XG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3VwYXRoMicpO1xuaW1wb3J0IGZzID0gcmVxdWlyZSgnZnMtZXh0cmEnKTtcbmltcG9ydCBjcm9zc1NwYXduID0gcmVxdWlyZSgnY3Jvc3Mtc3Bhd24tZXh0cmEnKTtcbmltcG9ydCB7IGNvbnNvbGUsIGNvbnNvbGVEZWJ1ZywgZmluZFJvb3QsIGZzWWFybkxvY2t9IGZyb20gJy4uL2xpYi9pbmRleCc7XG5pbXBvcnQgeyBEZWR1cGUsIGluZm9Gcm9tRGVkdXBlQ2FjaGUsIHdyYXBEZWR1cGUgfSBmcm9tICcuLi9saWIvY2xpL2RlZHVwZSc7XG5pbXBvcnQgeyBleGlzdHNEZXBlbmRlbmNpZXMsIGZsYWdzWWFybkFkZCwgbGlzdFRvVHlwZXMsIHNldHVwWWFybkFkZFRvWWFyZ3MgfSBmcm9tICcuLi9saWIvY2xpL2FkZCc7XG5pbXBvcnQgc2V0dXBZYXJuSW5zdGFsbFRvWWFyZ3MgZnJvbSAnLi4vbGliL2NsaS9pbnN0YWxsJztcbmltcG9ydCBzZW12ZXIgPSByZXF1aXJlKCdzZW12ZXInKTtcbmltcG9ydCBzZXR1cEluaXRUb1lhcmdzIGZyb20gJ25wbS1pbml0Mi9saWIveWFyZ3Mtc2V0dGluZyc7XG5pbXBvcnQgeyBzb3J0UGFja2FnZUpzb24gfSBmcm9tICdzb3J0LXBhY2thZ2UtanNvbic7XG5cbmltcG9ydCB7XG5cdGNyZWF0ZV9jb21tYW5kLFxuXHRjcmVhdGVfY29tbWFuZDIsXG5cdGR1bW15X2J1aWxkZXIsIGR1bW15X2hhbmRsZXIsXG5cdElVbnBhY2tNeVlhcmdzQXJndixcblx0SVVucGFja1lhcmdzQXJndixcbn0gZnJvbSAnLi4vbGliL2NsaSc7XG5pbXBvcnQgeyByZWFkUGFja2FnZUpzb24sIHdyaXRlSlNPTlN5bmMsIHdyaXRlUGFja2FnZUpzb24gfSBmcm9tICcuLi9saWIvcGtnJztcbmltcG9ydCBJUGFja2FnZUpzb24gZnJvbSAnQHRzLXR5cGUvcGFja2FnZS1kdHMvcGFja2FnZS1qc29uJztcbmltcG9ydCBzZXR1cE5jdVRvWWFyZ3MsIHsgbnBtQ2hlY2tVcGRhdGVzIH0gZnJvbSAnLi4vbGliL2NsaS9uY3UnO1xuaW1wb3J0IHtcblx0ZmlsdGVyUmVzb2x1dGlvbnMsXG5cdElEZXBlbmRlbmNpZXMsXG5cdElZYXJuTG9ja2ZpbGVQYXJzZU9iamVjdFJvdyxcblx0cGFyc2UgYXMgcGFyc2VZYXJuTG9jayxcblx0c3RyaW5naWZ5IGFzIHN0cmluZ2lmeVlhcm5Mb2NrLFxuXHRyZW1vdmVSZXNvbHV0aW9uc0NvcmUsIHN0cmlwRGVwc05hbWUsIHlhcm5Mb2NrRGlmZixcbn0gZnJvbSAnLi4vbGliL3lhcm5sb2NrJztcbmltcG9ydCB7IElUU0l0ZXJhdG9yTGF6eSwgSVRTVmFsdWVPZkFycmF5IH0gZnJvbSAndHMtdHlwZSc7XG5pbXBvcnQgeyBzZXR1cFdvcmtzcGFjZXNJbml0VG9ZYXJncyB9IGZyb20gJ2NyZWF0ZS15YXJuLXdvcmtzcGFjZXMveWFyZ3Mtc2V0dGluZyc7XG5pbXBvcnQgeyBjaGVja01vZGlsZUV4aXN0cywgY3Jvc3NTcGF3bk90aGVyLCBwcm9jZXNzQXJndlNsaWNlIH0gZnJvbSAnLi4vbGliL3NwYXduJztcbmltcG9ydCBvc0xvY2FsZSA9IHJlcXVpcmUoJ29zLWxvY2FsZScpO1xuaW1wb3J0IHsgdXBkYXRlTm90aWZpZXIgfSBmcm9tICdAeWFybi10b29sL3VwZGF0ZS1ub3RpZmllcic7XG4vL2ltcG9ydCBpc05weCA9IHJlcXVpcmUoJ2lzLW5weCcpO1xuXG5cbmlmIChwYXRoLmV4dG5hbWUoX19maWxlbmFtZSkgPT09ICcuanMnICYmICFwcm9jZXNzLmFyZ3YuZmlsdGVyKHYgPT4ge1xuXHRpZiAodHlwZW9mIHYgPT09ICdzdHJpbmcnKVxuXHR7XG5cdFx0cmV0dXJuIHYuaW5jbHVkZXMoJ3RzLW5vZGUnKSB8fCB2LmluY2x1ZGVzKCdzb3VyY2UtbWFwLXN1cHBvcnQnKVxuXHR9XG59KS5sZW5ndGgpXG57XG5cdHJlcXVpcmUoJ3NvdXJjZS1tYXAtc3VwcG9ydCcpLmluc3RhbGwoe1xuXHRcdGhvb2tSZXF1aXJlOiB0cnVlXG5cdH0pO1xufVxuXG51cGRhdGVOb3RpZmllcihwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4nKSk7XG5cbmxldCBjbGkgPSB5YXJnc1xuXHQub3B0aW9uKCdjd2QnLCB7XG5cdFx0ZGVzYzogYGN1cnJlbnQgd29ya2luZyBkaXJlY3Rvcnkgb3IgcGFja2FnZSBkaXJlY3RvcnlgLFxuXHRcdG5vcm1hbGl6ZTogdHJ1ZSxcblx0XHRkZWZhdWx0OiBwcm9jZXNzLmN3ZCgpLFxuXHR9KVxuXHQub3B0aW9uKCdza2lwQ2hlY2tXb3Jrc3BhY2UnLCB7XG5cdFx0ZGVzYzogYHRoaXMgb3B0aW9ucyBpcyBmb3Igc2VhcmNoIHlhcm4ubG9jaywgcGtnIHJvb3QsIHdvcmtzcGFjZSByb290LCBub3Qgc2FtZSBhcyAtLWlnbm9yZS13b3Jrc3BhY2Utcm9vdC1jaGVja2AsXG5cdFx0Ym9vbGVhbjogdHJ1ZSxcblx0fSlcblx0Lm9wdGlvbigneXQtZGVidWctbW9kZScsIHtcblx0XHRib29sZWFuOiB0cnVlLFxuXHR9KVxuXHQuYWxpYXMoJ3YnLCAndmVyc2lvbicpXG5cdC5hbGlhcygnaCcsICdoZWxwJylcblx0LmhlbHAoJ2hlbHAnKVxuXHQucmVjb21tZW5kQ29tbWFuZHMoKVxuXHQubG9jYWxlKG9zTG9jYWxlLnN5bmMoKSlcblx0LmNvbW1hbmREaXIocGF0aC5qb2luKF9fZGlybmFtZSwgJ2NtZHMnKSlcblx0LmhlbHAodHJ1ZSlcblx0LnNob3dIZWxwT25GYWlsKHRydWUpXG5cdC5zdHJpY3QoKVxuXHQuZGVtYW5kQ29tbWFuZCgpXG5cdC5zY3JpcHROYW1lKCd5dCcpXG47XG5cbmNsaS5hcmd2O1xuXG4iXX0=