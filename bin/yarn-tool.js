#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const yargs = require("yargs");
const updateNotifier = require("update-notifier");
const pkg = require("../package.json");
const path = require("upath2");
const osLocale = require("os-locale");
const isNpx = require("is-npx");
!isNpx() && updateNotifier({ pkg }).notify();
let cli = yargs
    .option('cwd', {
    desc: `current working directory or package directory`,
    normalize: true,
    default: process.cwd(),
})
    .option('skipCheckWorkspace', {
    desc: `this options is for search yarn.lock, pkg root, workspace root, not same as --ignore-workspace-root-check`,
    boolean: true,
})
    .option('yt-debug-mode', {
    boolean: true,
})
    .alias('v', 'version')
    .alias('h', 'help')
    .help('help')
    .recommendCommands()
    .locale(osLocale.sync())
    .commandDir(path.join(__dirname, 'cmds'))
    .help(true)
    .showHelpOnFail(true)
    .strict()
    .demandCommand()
    .scriptName('yt');
cli.argv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWFybi10b29sLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsieWFybi10b29sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLHVDQUFxQztBQUNyQywrQkFBZ0M7QUFDaEMsa0RBQW1EO0FBQ25ELHVDQUF3QztBQUN4QywrQkFBZ0M7QUFnQ2hDLHNDQUF1QztBQUN2QyxnQ0FBaUM7QUFFakMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxjQUFjLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBRTdDLElBQUksR0FBRyxHQUFHLEtBQUs7S0FDYixNQUFNLENBQUMsS0FBSyxFQUFFO0lBQ2QsSUFBSSxFQUFFLGdEQUFnRDtJQUN0RCxTQUFTLEVBQUUsSUFBSTtJQUNmLE9BQU8sRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFO0NBQ3RCLENBQUM7S0FDRCxNQUFNLENBQUMsb0JBQW9CLEVBQUU7SUFDN0IsSUFBSSxFQUFFLDJHQUEyRztJQUNqSCxPQUFPLEVBQUUsSUFBSTtDQUNiLENBQUM7S0FDRCxNQUFNLENBQUMsZUFBZSxFQUFFO0lBQ3hCLE9BQU8sRUFBRSxJQUFJO0NBQ2IsQ0FBQztLQUNELEtBQUssQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDO0tBQ3JCLEtBQUssQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDO0tBQ2xCLElBQUksQ0FBQyxNQUFNLENBQUM7S0FDWixpQkFBaUIsRUFBRTtLQUNuQixNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0tBQ3ZCLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztLQUN4QyxJQUFJLENBQUMsSUFBSSxDQUFDO0tBQ1YsY0FBYyxDQUFDLElBQUksQ0FBQztLQUNwQixNQUFNLEVBQUU7S0FDUixhQUFhLEVBQUU7S0FDZixVQUFVLENBQUMsSUFBSSxDQUFDLENBQ2pCO0FBRUQsR0FBRyxDQUFDLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcblxuaW1wb3J0ICdzb3VyY2UtbWFwLXN1cHBvcnQvcmVnaXN0ZXInO1xuaW1wb3J0IHlhcmdzID0gcmVxdWlyZSgneWFyZ3MnKTtcbmltcG9ydCB1cGRhdGVOb3RpZmllciA9IHJlcXVpcmUoJ3VwZGF0ZS1ub3RpZmllcicpO1xuaW1wb3J0IHBrZyA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKCd1cGF0aDInKTtcbmltcG9ydCBmcyA9IHJlcXVpcmUoJ2ZzLWV4dHJhJyk7XG5pbXBvcnQgY3Jvc3NTcGF3biA9IHJlcXVpcmUoJ2Nyb3NzLXNwYXduLWV4dHJhJyk7XG5pbXBvcnQgeyBjb25zb2xlLCBjb25zb2xlRGVidWcsIGZpbmRSb290LCBmc1lhcm5Mb2NrfSBmcm9tICcuLi9saWIvaW5kZXgnO1xuaW1wb3J0IHsgRGVkdXBlLCBpbmZvRnJvbURlZHVwZUNhY2hlLCB3cmFwRGVkdXBlIH0gZnJvbSAnLi4vbGliL2NsaS9kZWR1cGUnO1xuaW1wb3J0IHsgZXhpc3RzRGVwZW5kZW5jaWVzLCBmbGFnc1lhcm5BZGQsIGxpc3RUb1R5cGVzLCBzZXR1cFlhcm5BZGRUb1lhcmdzIH0gZnJvbSAnLi4vbGliL2NsaS9hZGQnO1xuaW1wb3J0IHNldHVwWWFybkluc3RhbGxUb1lhcmdzIGZyb20gJy4uL2xpYi9jbGkvaW5zdGFsbCc7XG5pbXBvcnQgc2VtdmVyID0gcmVxdWlyZSgnc2VtdmVyJyk7XG5pbXBvcnQgc2V0dXBJbml0VG9ZYXJncyBmcm9tICducG0taW5pdDIvbGliL3lhcmdzLXNldHRpbmcnO1xuaW1wb3J0IHsgc29ydFBhY2thZ2VKc29uIH0gZnJvbSAnc29ydC1wYWNrYWdlLWpzb24nO1xuXG5pbXBvcnQge1xuXHRjcmVhdGVfY29tbWFuZCxcblx0Y3JlYXRlX2NvbW1hbmQyLFxuXHRkdW1teV9idWlsZGVyLCBkdW1teV9oYW5kbGVyLFxuXHRJVW5wYWNrTXlZYXJnc0FyZ3YsXG5cdElVbnBhY2tZYXJnc0FyZ3YsXG59IGZyb20gJy4uL2xpYi9jbGknO1xuaW1wb3J0IHsgcmVhZFBhY2thZ2VKc29uLCB3cml0ZUpTT05TeW5jLCB3cml0ZVBhY2thZ2VKc29uIH0gZnJvbSAnLi4vbGliL3BrZyc7XG5pbXBvcnQgSVBhY2thZ2VKc29uIGZyb20gJ0B0cy10eXBlL3BhY2thZ2UtZHRzL3BhY2thZ2UtanNvbic7XG5pbXBvcnQgc2V0dXBOY3VUb1lhcmdzLCB7IG5wbUNoZWNrVXBkYXRlcyB9IGZyb20gJy4uL2xpYi9jbGkvbmN1JztcbmltcG9ydCB7XG5cdGZpbHRlclJlc29sdXRpb25zLFxuXHRJRGVwZW5kZW5jaWVzLFxuXHRJWWFybkxvY2tmaWxlUGFyc2VPYmplY3RSb3csXG5cdHBhcnNlIGFzIHBhcnNlWWFybkxvY2ssXG5cdHN0cmluZ2lmeSBhcyBzdHJpbmdpZnlZYXJuTG9jayxcblx0cmVtb3ZlUmVzb2x1dGlvbnNDb3JlLCBzdHJpcERlcHNOYW1lLCB5YXJuTG9ja0RpZmYsXG59IGZyb20gJy4uL2xpYi95YXJubG9jayc7XG5pbXBvcnQgeyBJVFNJdGVyYXRvckxhenksIElUU1ZhbHVlT2ZBcnJheSB9IGZyb20gJ3RzLXR5cGUnO1xuaW1wb3J0IHsgc2V0dXBXb3Jrc3BhY2VzSW5pdFRvWWFyZ3MgfSBmcm9tICdjcmVhdGUteWFybi13b3Jrc3BhY2VzL3lhcmdzLXNldHRpbmcnO1xuaW1wb3J0IHsgY2hlY2tNb2RpbGVFeGlzdHMsIGNyb3NzU3Bhd25PdGhlciwgcHJvY2Vzc0FyZ3ZTbGljZSB9IGZyb20gJy4uL2xpYi9zcGF3bic7XG5pbXBvcnQgb3NMb2NhbGUgPSByZXF1aXJlKCdvcy1sb2NhbGUnKTtcbmltcG9ydCBpc05weCA9IHJlcXVpcmUoJ2lzLW5weCcpO1xuXG4haXNOcHgoKSAmJiB1cGRhdGVOb3RpZmllcih7IHBrZyB9KS5ub3RpZnkoKTtcblxubGV0IGNsaSA9IHlhcmdzXG5cdC5vcHRpb24oJ2N3ZCcsIHtcblx0XHRkZXNjOiBgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeSBvciBwYWNrYWdlIGRpcmVjdG9yeWAsXG5cdFx0bm9ybWFsaXplOiB0cnVlLFxuXHRcdGRlZmF1bHQ6IHByb2Nlc3MuY3dkKCksXG5cdH0pXG5cdC5vcHRpb24oJ3NraXBDaGVja1dvcmtzcGFjZScsIHtcblx0XHRkZXNjOiBgdGhpcyBvcHRpb25zIGlzIGZvciBzZWFyY2ggeWFybi5sb2NrLCBwa2cgcm9vdCwgd29ya3NwYWNlIHJvb3QsIG5vdCBzYW1lIGFzIC0taWdub3JlLXdvcmtzcGFjZS1yb290LWNoZWNrYCxcblx0XHRib29sZWFuOiB0cnVlLFxuXHR9KVxuXHQub3B0aW9uKCd5dC1kZWJ1Zy1tb2RlJywge1xuXHRcdGJvb2xlYW46IHRydWUsXG5cdH0pXG5cdC5hbGlhcygndicsICd2ZXJzaW9uJylcblx0LmFsaWFzKCdoJywgJ2hlbHAnKVxuXHQuaGVscCgnaGVscCcpXG5cdC5yZWNvbW1lbmRDb21tYW5kcygpXG5cdC5sb2NhbGUob3NMb2NhbGUuc3luYygpKVxuXHQuY29tbWFuZERpcihwYXRoLmpvaW4oX19kaXJuYW1lLCAnY21kcycpKVxuXHQuaGVscCh0cnVlKVxuXHQuc2hvd0hlbHBPbkZhaWwodHJ1ZSlcblx0LnN0cmljdCgpXG5cdC5kZW1hbmRDb21tYW5kKClcblx0LnNjcmlwdE5hbWUoJ3l0JylcbjtcblxuY2xpLmFyZ3Y7XG5cbiJdfQ==