#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const yargs = require("yargs");
//import updateNotifier = require('update-notifier');
//import pkg = require('../package.json');
const path = require("upath2");
const osLocale = require("os-locale");
const update_notifier_1 = require("@yarn-tool/update-notifier");
//import isNpx = require('is-npx');
if (path.extname(__filename) === '.js' && !process.argv.filter(v => {
    if (typeof v === 'string') {
        return v.includes('ts-node') || v.includes('source-map-support');
    }
}).length) {
    require('source-map-support').install({
        hookRequire: true
    });
}
update_notifier_1.updateNotifier(path.join(__dirname, '..'));
let cli = yargs
    .option('cwd', {
    desc: `current working directory or package directory`,
    normalize: true,
    default: process.cwd(),
})
    .option('skipCheckWorkspace', {
    desc: `this options is for search yarn.lock, pkg root, workspace root, not same as --ignore-workspace-root-check`,
    boolean: true,
})
    .option('yt-debug-mode', {
    boolean: true,
})
    .alias('v', 'version')
    .alias('h', 'help')
    .help('help')
    .recommendCommands()
    .locale(osLocale.sync())
    .commandDir(path.join(__dirname, 'cmds'))
    .help(true)
    .showHelpOnFail(true)
    .strict()
    .demandCommand()
    .scriptName('yt');
cli.argv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWFybi10b29sLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsieWFybi10b29sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUdBLCtCQUFnQztBQUNoQyxxREFBcUQ7QUFDckQsMENBQTBDO0FBQzFDLCtCQUFnQztBQWdDaEMsc0NBQXVDO0FBQ3ZDLGdFQUE0RDtBQUM1RCxtQ0FBbUM7QUFHbkMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFO0lBQ2xFLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxFQUN6QjtRQUNDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFDLENBQUE7S0FDaEU7QUFDRixDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQ1Q7SUFDQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDckMsV0FBVyxFQUFFLElBQUk7S0FDakIsQ0FBQyxDQUFDO0NBQ0g7QUFFRCxnQ0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7QUFFM0MsSUFBSSxHQUFHLEdBQUcsS0FBSztLQUNiLE1BQU0sQ0FBQyxLQUFLLEVBQUU7SUFDZCxJQUFJLEVBQUUsZ0RBQWdEO0lBQ3RELFNBQVMsRUFBRSxJQUFJO0lBQ2YsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUU7Q0FDdEIsQ0FBQztLQUNELE1BQU0sQ0FBQyxvQkFBb0IsRUFBRTtJQUM3QixJQUFJLEVBQUUsMkdBQTJHO0lBQ2pILE9BQU8sRUFBRSxJQUFJO0NBQ2IsQ0FBQztLQUNELE1BQU0sQ0FBQyxlQUFlLEVBQUU7SUFDeEIsT0FBTyxFQUFFLElBQUk7Q0FDYixDQUFDO0tBQ0QsS0FBSyxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUM7S0FDckIsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUM7S0FDbEIsSUFBSSxDQUFDLE1BQU0sQ0FBQztLQUNaLGlCQUFpQixFQUFFO0tBQ25CLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7S0FDdkIsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQ3hDLElBQUksQ0FBQyxJQUFJLENBQUM7S0FDVixjQUFjLENBQUMsSUFBSSxDQUFDO0tBQ3BCLE1BQU0sRUFBRTtLQUNSLGFBQWEsRUFBRTtLQUNmLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FDakI7QUFFRCxHQUFHLENBQUMsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuXG5cbmltcG9ydCB5YXJncyA9IHJlcXVpcmUoJ3lhcmdzJyk7XG4vL2ltcG9ydCB1cGRhdGVOb3RpZmllciA9IHJlcXVpcmUoJ3VwZGF0ZS1ub3RpZmllcicpO1xuLy9pbXBvcnQgcGtnID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJyk7XG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3VwYXRoMicpO1xuaW1wb3J0IGZzID0gcmVxdWlyZSgnZnMtZXh0cmEnKTtcbmltcG9ydCBjcm9zc1NwYXduID0gcmVxdWlyZSgnY3Jvc3Mtc3Bhd24tZXh0cmEnKTtcbmltcG9ydCB7IGNvbnNvbGUsIGNvbnNvbGVEZWJ1ZywgZmluZFJvb3QsIGZzWWFybkxvY2t9IGZyb20gJy4uL2xpYi9pbmRleCc7XG5pbXBvcnQgeyBEZWR1cGUsIGluZm9Gcm9tRGVkdXBlQ2FjaGUsIHdyYXBEZWR1cGUgfSBmcm9tICcuLi9saWIvY2xpL2RlZHVwZSc7XG5pbXBvcnQgeyBleGlzdHNEZXBlbmRlbmNpZXMsIGZsYWdzWWFybkFkZCwgbGlzdFRvVHlwZXMsIHNldHVwWWFybkFkZFRvWWFyZ3MgfSBmcm9tICcuLi9saWIvY2xpL2FkZCc7XG5pbXBvcnQgc2V0dXBZYXJuSW5zdGFsbFRvWWFyZ3MgZnJvbSAnLi4vbGliL2NsaS9pbnN0YWxsJztcbmltcG9ydCBzZW12ZXIgPSByZXF1aXJlKCdzZW12ZXInKTtcbmltcG9ydCBzZXR1cEluaXRUb1lhcmdzIGZyb20gJ25wbS1pbml0Mi9saWIveWFyZ3Mtc2V0dGluZyc7XG5cblxuaW1wb3J0IHtcblx0Y3JlYXRlX2NvbW1hbmQsXG5cdGNyZWF0ZV9jb21tYW5kMixcblx0ZHVtbXlfYnVpbGRlciwgZHVtbXlfaGFuZGxlcixcblx0SVVucGFja015WWFyZ3NBcmd2LFxuXHRJVW5wYWNrWWFyZ3NBcmd2LFxufSBmcm9tICcuLi9saWIvY2xpJztcbmltcG9ydCB7IHJlYWRQYWNrYWdlSnNvbiwgd3JpdGVKU09OU3luYywgd3JpdGVQYWNrYWdlSnNvbiB9IGZyb20gJy4uL2xpYi9wa2cnO1xuaW1wb3J0IElQYWNrYWdlSnNvbiBmcm9tICdAdHMtdHlwZS9wYWNrYWdlLWR0cy9wYWNrYWdlLWpzb24nO1xuaW1wb3J0IHNldHVwTmN1VG9ZYXJncywgeyBucG1DaGVja1VwZGF0ZXMgfSBmcm9tICcuLi9saWIvY2xpL25jdSc7XG5pbXBvcnQge1xuXHRmaWx0ZXJSZXNvbHV0aW9ucyxcblx0SURlcGVuZGVuY2llcyxcblx0SVlhcm5Mb2NrZmlsZVBhcnNlT2JqZWN0Um93LFxuXHRwYXJzZSBhcyBwYXJzZVlhcm5Mb2NrLFxuXHRzdHJpbmdpZnkgYXMgc3RyaW5naWZ5WWFybkxvY2ssXG5cdHJlbW92ZVJlc29sdXRpb25zQ29yZSwgc3RyaXBEZXBzTmFtZSwgeWFybkxvY2tEaWZmLFxufSBmcm9tICcuLi9saWIveWFybmxvY2snO1xuaW1wb3J0IHsgSVRTSXRlcmF0b3JMYXp5LCBJVFNWYWx1ZU9mQXJyYXkgfSBmcm9tICd0cy10eXBlJztcbmltcG9ydCB7IHNldHVwV29ya3NwYWNlc0luaXRUb1lhcmdzIH0gZnJvbSAnY3JlYXRlLXlhcm4td29ya3NwYWNlcy95YXJncy1zZXR0aW5nJztcbmltcG9ydCB7IGNoZWNrTW9kaWxlRXhpc3RzLCBjcm9zc1NwYXduT3RoZXIsIHByb2Nlc3NBcmd2U2xpY2UgfSBmcm9tICcuLi9saWIvc3Bhd24nO1xuaW1wb3J0IG9zTG9jYWxlID0gcmVxdWlyZSgnb3MtbG9jYWxlJyk7XG5pbXBvcnQgeyB1cGRhdGVOb3RpZmllciB9IGZyb20gJ0B5YXJuLXRvb2wvdXBkYXRlLW5vdGlmaWVyJztcbi8vaW1wb3J0IGlzTnB4ID0gcmVxdWlyZSgnaXMtbnB4Jyk7XG5cblxuaWYgKHBhdGguZXh0bmFtZShfX2ZpbGVuYW1lKSA9PT0gJy5qcycgJiYgIXByb2Nlc3MuYXJndi5maWx0ZXIodiA9PiB7XG5cdGlmICh0eXBlb2YgdiA9PT0gJ3N0cmluZycpXG5cdHtcblx0XHRyZXR1cm4gdi5pbmNsdWRlcygndHMtbm9kZScpIHx8IHYuaW5jbHVkZXMoJ3NvdXJjZS1tYXAtc3VwcG9ydCcpXG5cdH1cbn0pLmxlbmd0aClcbntcblx0cmVxdWlyZSgnc291cmNlLW1hcC1zdXBwb3J0JykuaW5zdGFsbCh7XG5cdFx0aG9va1JlcXVpcmU6IHRydWVcblx0fSk7XG59XG5cbnVwZGF0ZU5vdGlmaWVyKHBhdGguam9pbihfX2Rpcm5hbWUsICcuLicpKTtcblxubGV0IGNsaSA9IHlhcmdzXG5cdC5vcHRpb24oJ2N3ZCcsIHtcblx0XHRkZXNjOiBgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeSBvciBwYWNrYWdlIGRpcmVjdG9yeWAsXG5cdFx0bm9ybWFsaXplOiB0cnVlLFxuXHRcdGRlZmF1bHQ6IHByb2Nlc3MuY3dkKCksXG5cdH0pXG5cdC5vcHRpb24oJ3NraXBDaGVja1dvcmtzcGFjZScsIHtcblx0XHRkZXNjOiBgdGhpcyBvcHRpb25zIGlzIGZvciBzZWFyY2ggeWFybi5sb2NrLCBwa2cgcm9vdCwgd29ya3NwYWNlIHJvb3QsIG5vdCBzYW1lIGFzIC0taWdub3JlLXdvcmtzcGFjZS1yb290LWNoZWNrYCxcblx0XHRib29sZWFuOiB0cnVlLFxuXHR9KVxuXHQub3B0aW9uKCd5dC1kZWJ1Zy1tb2RlJywge1xuXHRcdGJvb2xlYW46IHRydWUsXG5cdH0pXG5cdC5hbGlhcygndicsICd2ZXJzaW9uJylcblx0LmFsaWFzKCdoJywgJ2hlbHAnKVxuXHQuaGVscCgnaGVscCcpXG5cdC5yZWNvbW1lbmRDb21tYW5kcygpXG5cdC5sb2NhbGUob3NMb2NhbGUuc3luYygpKVxuXHQuY29tbWFuZERpcihwYXRoLmpvaW4oX19kaXJuYW1lLCAnY21kcycpKVxuXHQuaGVscCh0cnVlKVxuXHQuc2hvd0hlbHBPbkZhaWwodHJ1ZSlcblx0LnN0cmljdCgpXG5cdC5kZW1hbmRDb21tYW5kKClcblx0LnNjcmlwdE5hbWUoJ3l0JylcbjtcblxuY2xpLmFyZ3Y7XG5cbiJdfQ==